<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LsWisdom的博客</title>
  
  <subtitle>谋事在人成事在天</subtitle>
  <link href="https://lswisdom.github.io/atom.xml" rel="self"/>
  
  <link href="https://lswisdom.github.io/"/>
  <updated>2022-10-30T08:33:45.812Z</updated>
  <id>https://lswisdom.github.io/</id>
  
  <author>
    <name>ls</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rancher安装使用</title>
    <link href="https://lswisdom.github.io/posts/879516788/"/>
    <id>https://lswisdom.github.io/posts/879516788/</id>
    <published>2022-10-29T10:06:57.000Z</published>
    <updated>2022-10-30T08:33:45.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rancher安装使用"><a href="#Rancher安装使用" class="headerlink" title="Rancher安装使用"></a>Rancher安装使用</h1><table><thead><tr><th>CPU</th><th>内存</th><th>硬盘</th><th>角色</th><th>主机名称</th><th>ip地址</th></tr></thead><tbody><tr><td>2Core</td><td>4G</td><td>50G</td><td>rancher</td><td>rancher</td><td>192.168.77.150</td></tr><tr><td>2Core</td><td>4G</td><td>50G</td><td>master</td><td>k8s-master-01</td><td>192.168.77.151</td></tr><tr><td>2Core</td><td>4G</td><td>50G</td><td>worker</td><td>k8s-node-02</td><td>192.168.77.152</td></tr><tr><td>2Core</td><td>4G</td><td>50G</td><td>worker</td><td>k8s-node-03</td><td>192.168.77.153</td></tr></tbody></table><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h3 id="安装docker所有的节点都要执行"><a href="#安装Docker（所有的节点都要执行）" class="headerlink" title="安装Docker（所有的节点都要执行）"></a>安装Docker（所有的节点都要执行）</h3><p>下面是阿里云官网提供的安装的方式</p><p>查看可以安装的docker的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce.x86_64 --showduplicates |sort -r</span><br></pre></td></tr></table></figure><h4 id="配置docker安装"><a href="#配置docker安装" class="headerlink" title="配置docker安装"></a>配置docker安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># step 1: 安装必要的一些系统工具</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"># Step 2: 添加软件源信息</span><br><span class="line">sudo yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line"># Step 3: 更新并安装 Docker-CE</span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"># Step 4: 开启Docker服务</span><br><span class="line">sudo service docker start</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;rv0ikufp.mirror.aliyuncs.com&quot;]   # 配置自己的阿里云容器镜像站</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="配置开启自启动"><a href="#配置开启自启动" class="headerlink" title="配置开启自启动"></a>配置开启自启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker;systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="修改cgroup-方式"><a href="#修改cgroup-方式" class="headerlink" title="修改cgroup 方式"></a>修改cgroup 方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json 中添加如下内容</span><br><span class="line">&#123;</span><br><span class="line">&quot;exec-opts&quot;:[&quot;native.cgroupdriver&#x3D;systemd&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主机配置"><a href="#主机配置" class="headerlink" title="主机配置"></a>主机配置</h2><h4 id="主机名配置"><a href="#主机名配置" class="headerlink" title="主机名配置"></a>主机名配置</h4><blockquote><p>所有主机均需要配置对应主机名称</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master01 </span><br><span class="line">或者</span><br><span class="line">nmtui-hostname 设置主机名称</span><br></pre></td></tr></table></figure><h4 id="主机ip地址配置"><a href="#主机ip地址配置" class="headerlink" title="主机ip地址配置"></a>主机ip地址配置</h4><p>所有的主机地址都应该是一个静态的ip</p><figure class="highlight vim"><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-ens33</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p>k8s-master01的ip地址配置  其他的以此类推</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;f693d834-f55e-4c2e-8329-957cc221303d&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.77.150&quot;</span><br><span class="line">GATEWAY=&quot;192.168.77.2&quot;</span><br><span class="line">DNS1=&quot;119.29.29.29&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="主机名和ip地址解析"><a href="#主机名和IP地址解析" class="headerlink" title="主机名和IP地址解析"></a>主机名和IP地址解析</h4><blockquote><p>所有的集群主机都需要配置  vim /etc/hosts  追加如下配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">192.168.77.150 rancher</span><br><span class="line">192.168.77.151 k8s-master-01</span><br><span class="line">192.168.77.152 k8s-node-02</span><br><span class="line">192.168.77.153 k8s-node-03</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="时间同步配置所有节点"><a href="#时间同步配置（所有节点）" class="headerlink" title="时间同步配置（所有节点）"></a>时间同步配置（所有节点）</h4><p>同步时间服务器需要安装ntpdate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ntpdate</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># which ntpdate  查看</span><br><span class="line">crontab -e</span><br><span class="line">0 *&#x2F;1 * * * ntpdate time1.aliyun.com  #每隔一小时同步一下阿里云服务器</span><br></pre></td></tr></table></figure><h4 id="关闭swap分区所有节点都要执行"><a href="#关闭swap分区-所有节点都要执行" class="headerlink" title="关闭swap分区(所有节点都要执行)"></a>关闭swap分区(所有节点都要执行)</h4><p>因为关闭后，可以提高k8s的性能。且初始化master节点的时候不会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;fstab</span><br><span class="line">#</span><br><span class="line"># &#x2F;etc&#x2F;fstab</span><br><span class="line"># Created by anaconda on Mon Oct  3 15:41:00 2022</span><br><span class="line">#</span><br><span class="line"># Accessible filesystems, by reference, are maintained under &#39;&#x2F;dev&#x2F;disk&#39;</span><br><span class="line"># See man pages fstab(5), findfs(8), mount(8) and&#x2F;or blkid(8) for more info</span><br><span class="line">#</span><br><span class="line">&#x2F;dev&#x2F;mapper&#x2F;centos-root &#x2F;                       xfs     defaults        0 0</span><br><span class="line">UUID&#x3D;715915d4-5b52-469f-a69d-f92410a28415 &#x2F;boot                   xfs     defaults        0 0</span><br><span class="line">#&#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0  swap前加个#号</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="下载rancher"><a href="#下载rancher" class="headerlink" title="下载rancher"></a>下载rancher</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rancher&#x2F;rancher:v2.5.2-linux-amd64</span><br></pre></td></tr></table></figure><h3 id="创建rancher的主机目录"><a href="#创建rancher的主机目录" class="headerlink" title="创建rancher的主机目录"></a>创建rancher的主机目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir  -p &#x2F;mnt&#x2F;d&#x2F;rancher_data </span><br><span class="line"></span><br><span class="line">docker run -itd --privileged  -p 80:80  -p 443:443 -v &#x2F;mnt&#x2F;d&#x2F;rancher_data:&#x2F;var&#x2F;lib&#x2F;rancher&#x2F; --restart&#x3D;always  --name rancher-server rancher&#x2F;rancher:v2.5.2-linux-amd64</span><br></pre></td></tr></table></figure><h3 id="访问rancher首页"><a href="#访问rancher首页" class="headerlink" title="访问rancher首页"></a>访问rancher首页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;192.168.77.150&#x2F;</span><br></pre></td></tr></table></figure><p>第一次进入rancher的首页面，页面是英文的，需要进行设置登陆密码</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/1.%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81.png" alt="image-20221028212856603"></p><h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/1%E6%96%B0%E5%A2%9E%E9%9B%86%E7%BE%A4.png" alt="image-20221028223437497"></p><p>进入如下页面，选择自定义</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE2.png" alt="image-20221028223527824"></p><p>添加一些配置之后，直接下一步</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/%E6%B7%BB%E5%8A%A0master%E5%92%8Cnode%E8%8A%82%E7%82%B9.png" alt="image-20221028223650812"></p><h3 id="可能出现的错误"><a href="#可能出现的错误" class="headerlink" title="可能出现的错误"></a>可能出现的错误</h3><p>这个不用管，一会儿就消失了，这是rancher的最后一个注册过程，根据自己的电脑配置情况，几分钟之后，就可以了</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/%E6%B7%BB%E5%8A%A0%E4%B8%BB%E6%9C%BA%E5%A4%B1%E8%B4%A5.png" alt="image-20221028221832111"></p><h3 id="添加其他的节点"><a href="#添加其他的节点" class="headerlink" title="添加其他的节点"></a>添加其他的节点</h3><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/5.%E7%BC%96%E8%BE%91%E9%9B%86%E7%BE%A4.png" alt="image-20221028222147641"></p><p>点击编辑集群-&gt;选择worker-&gt;复制命令在需要添加的节点上执行-&gt; 点击ok-&gt;node节点不需要etcd和control了</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/%E6%B7%BB%E5%8A%A0node%E8%8A%82%E7%82%B92.png" alt="image-20221028222253323"></p><p>如下所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/%E4%B8%BB%E6%9C%BA%E6%88%AA%E5%9B%BE.png" alt="image-20221028222519527"></p><p>等待一段时间之后，效果图如下：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/%E5%8A%A0%E5%85%A5%E8%8A%82%E7%82%B9%E5%90%8E%E7%BB%93%E6%9E%9C.png" alt="image-20221028223237457"></p><h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><blockquote><p>选择操作的集群-&gt;default项目 -&gt;部署应用</p></blockquote><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A81.png" alt="image-20221028223928072"></p><p>进行一些初始化操作</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B7%BB%E5%8A%A0%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE2.png" alt="image-20221028224200291"></p><h3 id="数据卷配置"><a href="#数据卷配置" class="headerlink" title="数据卷配置"></a>数据卷配置</h3><p>映射主机目录</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/%E6%95%B0%E6%8D%AE%E5%8D%B7%E9%85%8D%E7%BD%AE-%E6%98%A0%E5%B0%84%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95.png" alt="image-20221028224311400"></p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/%E5%AE%B9%E5%99%A8%E5%8D%B7%E9%85%8D%E7%BD%AE2.png" alt="image-20221028224445433"></p><p>上面的意思就是容器内的路径，映射到宿主机的data目录下面 —&gt;其他操作—&gt;点击启动</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/nginx%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F%E5%90%8E%E6%88%AA%E5%9B%BE1.png" alt="image-20221028224638120"></p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F%E5%90%8E%E6%88%AA%E5%9B%BE2.png" alt="image-20221028224719795"></p><p>nginx首页成功访问截图</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/nginx%E9%A6%96%E9%A1%B5%E6%88%90%E5%8A%9F%E8%AE%BF%E9%97%AE%E6%88%AA%E5%9B%BE.png" alt="image-20221028225017174"></p><h3 id="kubectl-安装"><a href="#kubectl-安装" class="headerlink" title="kubectl 安装"></a>kubectl 安装</h3><h3 id="30-安装kubectl-客户端工具"><a href="#3-0-安装kubectl-客户端工具" class="headerlink" title="3.0 安装kubectl 客户端工具"></a>3.0 安装kubectl 客户端工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在k8s-master01上操作</span><br><span class="line">wget https:&#x2F;&#x2F;storage.googleapis.com&#x2F;kubernetes-release&#x2F;release&#x2F;v1.21.9&#x2F;bin&#x2F;linux&#x2F;amd64&#x2F;kubectl</span><br><span class="line">chmod +x kubectl</span><br><span class="line">mv kubectl &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/kubectl%E5%AE%89%E8%A3%851.png" alt="image-20221028225924758"></p><p>上面发现还是运行不了，需要下载kubeconfig文件，然后执行如下操作</p><p>在安装好的kubectl的机器上配置kubeconfig,将复制的文件内容全部保存到config文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~&#x2F;.kube</span><br><span class="line">vim ~&#x2F;.kube&#x2F;config  # 添加k8s集群中的kubeconfig文件到该文件中，保存之后继续执行</span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/rancher%E9%9B%86%E7%BE%A4%E7%9A%84kubeconfig%E6%96%87%E4%BB%B6.png" alt="image-20221028230301543"></p><p>完整过程如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# chmod +x kubectl</span><br><span class="line">[root@k8s-master-01 ~]# mv kubectl &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl</span><br><span class="line">[root@k8s-master-01 ~]# kubectl get pods</span><br><span class="line">The connection to the server localhost:8080 was refused - did you specify the right host or port?</span><br><span class="line">[root@k8s-master-01 ~]# mkdir ~&#x2F;.kube</span><br><span class="line">您在 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root 中有邮件</span><br><span class="line">[root@k8s-master-01 ~]# vim ~&#x2F;.kube&#x2F;config</span><br><span class="line">[root@k8s-master-01 ~]# kubectl get nodes</span><br><span class="line">NAME            STATUS   ROLES                      AGE   VERSION</span><br><span class="line">k8s-master-01   Ready    controlplane,etcd,worker   48m   v1.19.15</span><br><span class="line">k8s-node-02     Ready    worker                     34m   v1.19.15</span><br><span class="line">k8s-node-03     Ready    worker                     34m   v1.19.15</span><br><span class="line">[root@k8s-master-01 ~]#</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rancher安装使用&quot;&gt;&lt;a href=&quot;#Rancher安装使用&quot; class=&quot;headerlink&quot; title=&quot;Rancher安装使用&quot;&gt;&lt;/a&gt;Rancher安装使用&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;th</summary>
      
    
    
    
    <category term="云原生" scheme="https://lswisdom.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="kubernetes" scheme="https://lswisdom.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群公共服务</title>
    <link href="https://lswisdom.github.io/posts/879586788/"/>
    <id>https://lswisdom.github.io/posts/879586788/</id>
    <published>2022-10-29T10:06:57.000Z</published>
    <updated>2022-10-30T05:57:35.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubernetes集群核心服务"><a href="#Kubernetes集群核心服务" class="headerlink" title="Kubernetes集群核心服务"></a>Kubernetes集群核心服务</h1><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/k8s%E9%9B%86%E7%BE%A4%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1.png"></p><h1 id="kubernetes公共服务"><a href="#Kubernetes公共服务" class="headerlink" title="Kubernetes公共服务"></a>Kubernetes公共服务</h1><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/k8s%E9%9B%86%E7%BE%A4%E5%85%AC%E5%85%B1%E6%9C%8D%E5%8A%A1.png" alt="image-20220512190022889"></p><h1 id="域名解析-dns"><a href="#域名解析-DNS" class="headerlink" title="域名解析 DNS"></a>域名解析 DNS</h1><h2 id="主机ip地址及域名规划"><a href="#主机IP地址及域名规划" class="headerlink" title="主机IP地址及域名规划"></a>主机IP地址及域名规划</h2><table><thead><tr><th>序号</th><th>提供服务</th><th>IP地址</th><th>域名</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>DNS</td><td>192.168.10.211</td><td></td><td></td></tr><tr><td>2</td><td>Nginx</td><td>192.168.10.212</td><td>yaml.kubels.com</td><td></td></tr><tr><td>3</td><td>Harbor</td><td>192.168.10.213</td><td>harbor.kubels.com</td><td><a href="http://www.kubels.com/">www.kubels.com</a></td></tr><tr><td>4</td><td>NFS</td><td>192.168.10.214</td><td>nfs.kubels.com</td><td></td></tr></tbody></table><h2 id="32-域名解析-dns配置"><a href="#3-2-域名解析-DNS配置" class="headerlink" title="3.2 域名解析 DNS配置"></a>3.2 域名解析 DNS配置</h2><ul><li>bind9</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># hostnamectl set-hostname dns</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="built_in">TYPE</span>=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=<span class="keyword">static</span></span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable<span class="literal">-privacy</span></span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=<span class="number">6</span>b19f511<span class="literal">-5a6d</span><span class="literal">-4434</span><span class="literal">-bb00</span><span class="literal">-95fc19a62c39</span></span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">DNS1=<span class="number">192.168</span>.<span class="number">77.121</span>  <span class="comment">#自己的DNS服务器</span></span><br><span class="line">DNS2=<span class="number">119.29</span>.<span class="number">29.29</span></span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">77.211</span>  </span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span>.<span class="number">77.2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dns</span> ~]<span class="comment"># firewall-cmd --state</span></span><br><span class="line">not running</span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> ~]<span class="comment"># echo $?</span></span><br><span class="line"><span class="number">252</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> ~]<span class="comment"># sestatus</span></span><br><span class="line">SELinux status:                 disabled</span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> ~]<span class="comment"># echo $?</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">或关闭</span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> ~]<span class="comment"># systemctl disable firewalld;systemctl stop firewalld</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> ~]<span class="comment"># sed -ri.bak &#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config</span></span><br></pre></td></tr></table></figure><h2 id="安装dns"><a href="#安装dns" class="headerlink" title="安装dns"></a>安装dns</h2><p> dns就是bind9</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dns</span> ~]<span class="comment"># yum -y install bind</span></span><br></pre></td></tr></table></figure><p>修改配置文件的第<code>13行和第21行</code>，添加<code>any: </code> 空格要加上,不要动，只允许自己访问没有意义  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listen-on port 53 &#123; 127.0.0.1; &#125;;</span><br><span class="line">修改为</span><br><span class="line">listen-on port 53 &#123; 127.0.0.1;any; &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allow-query     &#123; localhost; &#125;;</span><br><span class="line">修改为</span><br><span class="line">allow-query     &#123; localhost;any; &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dns</span> ~]<span class="comment"># cat -n /etc/named.conf</span></span><br><span class="line">     <span class="number">1</span>  //</span><br><span class="line">     <span class="number">2</span>  // named.conf</span><br><span class="line">     <span class="number">3</span>  //</span><br><span class="line">     <span class="number">4</span>  // Provided by Red Hat bind package to configure the ISC BIND named(<span class="number">8</span>) DNS</span><br><span class="line">     <span class="number">5</span>  // server as a caching only nameserver (as a localhost DNS resolver only).</span><br><span class="line">     <span class="number">6</span>  //</span><br><span class="line">     <span class="number">7</span>  // See /usr/share/doc/bind*/sample/ <span class="keyword">for</span> example named configuration files.</span><br><span class="line">     <span class="number">8</span>  //</span><br><span class="line">     <span class="number">9</span>  // See the BIND Administrator<span class="string">&#x27;s Reference Manual (ARM) for details about the</span></span><br><span class="line"><span class="string">    10  // configuration located in /usr/share/doc/bind-&#123;version&#125;/Bv9ARM.html</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    12  options &#123;</span></span><br><span class="line"><span class="string">    13          listen-on port 53 &#123; 127.0.0.1;any; &#125;;</span></span><br><span class="line"><span class="string">    14          listen-on-v6 port 53 &#123; ::1; &#125;;</span></span><br><span class="line"><span class="string">    15          directory       &quot;/var/named&quot;;</span></span><br><span class="line"><span class="string">    16          dump-file       &quot;/var/named/data/cache_dump.db&quot;;</span></span><br><span class="line"><span class="string">    17          statistics-file &quot;/var/named/data/named_stats.txt&quot;;</span></span><br><span class="line"><span class="string">    18          memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;</span></span><br><span class="line"><span class="string">    19          recursing-file  &quot;/var/named/data/named.recursing&quot;;</span></span><br><span class="line"><span class="string">    20          secroots-file   &quot;/var/named/data/named.secroots&quot;;</span></span><br><span class="line"><span class="string">    21          allow-query     &#123; localhost;any; &#125;;</span></span><br><span class="line"><span class="string">    22</span></span><br><span class="line"><span class="string">    23          /*</span></span><br><span class="line"><span class="string">    24           - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.</span></span><br><span class="line"><span class="string">    25           - If you are building a RECURSIVE (caching) DNS server, you need to enable</span></span><br><span class="line"><span class="string">    26             recursion.</span></span><br><span class="line"><span class="string">    27           - If your recursive DNS server has a public IP address, you MUST enable access</span></span><br><span class="line"><span class="string">    28             control to limit queries to your legitimate users. Failing to do so will</span></span><br><span class="line"><span class="string">    29             cause your server to become part of large scale DNS amplification</span></span><br><span class="line"><span class="string">    30             attacks. Implementing BCP38 within your network would greatly</span></span><br><span class="line"><span class="string">    31             reduce such attack surface</span></span><br><span class="line"><span class="string">    32          */</span></span><br><span class="line"><span class="string">    33          recursion yes;</span></span><br><span class="line"><span class="string">    34</span></span><br><span class="line"><span class="string">    35          dnssec-enable yes;</span></span><br><span class="line"><span class="string">    36          dnssec-validation yes;</span></span><br><span class="line"><span class="string">    37</span></span><br><span class="line"><span class="string">    38          /* Path to ISC DLV key */</span></span><br><span class="line"><span class="string">    39          bindkeys-file &quot;/etc/named.root.key&quot;;</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    41          managed-keys-directory &quot;/var/named/dynamic&quot;;</span></span><br><span class="line"><span class="string">    42</span></span><br><span class="line"><span class="string">    43          pid-file &quot;/run/named/named.pid&quot;;</span></span><br><span class="line"><span class="string">    44          session-keyfile &quot;/run/named/session.key&quot;;</span></span><br><span class="line"><span class="string">    45  &#125;;</span></span><br><span class="line"><span class="string">    46</span></span><br><span class="line"><span class="string">    47  logging &#123;</span></span><br><span class="line"><span class="string">    48          channel default_debug &#123;</span></span><br><span class="line"><span class="string">    49                  file &quot;data/named.run&quot;;</span></span><br><span class="line"><span class="string">    50                  severity dynamic;</span></span><br><span class="line"><span class="string">    51          &#125;;</span></span><br><span class="line"><span class="string">    52  &#125;;</span></span><br><span class="line"><span class="string">    53</span></span><br><span class="line"><span class="string">    54  zone &quot;.&quot; IN &#123;</span></span><br><span class="line"><span class="string">    55          type hint;</span></span><br><span class="line"><span class="string">    56          file &quot;named.ca&quot;;</span></span><br><span class="line"><span class="string">    57  &#125;;</span></span><br><span class="line"><span class="string">    58</span></span><br><span class="line"><span class="string">    59  include &quot;/etc/named.rfc1912.zones&quot;;</span></span><br><span class="line"><span class="string">    60  include &quot;/etc/named.root.key&quot;;</span></span><br></pre></td></tr></table></figure><p>当然域名改自己的主机的hosts文件也是可以的，但是这里不采用这种方式处理</p><p>注册域名</p><p>可以直接文件里面复制，防止出现，vim里面找到要复制的行，按5 yy   在文件的最后，按一个p键就可以实现复制操作</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dns</span> ~]<span class="comment"># tail -6 /etc/named.rfc1912.zones</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> ~] vim /etc/named.rfc1912.zones</span><br><span class="line"></span><br><span class="line">zone <span class="string">&quot;kubels.com&quot;</span> <span class="keyword">IN</span> &#123;   <span class="comment"># 这里的域名随便写</span></span><br><span class="line">          <span class="built_in">type</span> master;    <span class="comment"># dns可以主备操作，这里只有一个主操作,type选master就可以</span></span><br><span class="line">          file <span class="string">&quot;kubels.com.zone&quot;</span>;   <span class="comment"># 这里的文件名称也随便写</span></span><br><span class="line">          allow<span class="literal">-update</span> &#123; none; &#125;;   <span class="comment">#  不用变   从服务器可以允许更新，主服务器不需要变更</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的<code>-p</code> 必须要加上 ,复制文件的过程中权限保持不变</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dns</span> ~]<span class="comment"># cd /var/named/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># ls</span></span><br><span class="line"><span class="keyword">data</span>  dynamic  named.ca  named.empty  named.localhost  named.loopback  slaves</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># cp named.localhost  1.conf</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># ll</span></span><br><span class="line">总用量 <span class="number">20</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root  root   <span class="number">152</span> <span class="number">9</span>月  <span class="number">27</span> <span class="number">23</span>:<span class="number">44</span> <span class="number">1</span>.conf</span><br><span class="line">drwxrwx---. <span class="number">2</span> named named    <span class="number">6</span> <span class="number">2</span>月  <span class="number">24</span> <span class="number">2022</span> <span class="keyword">data</span></span><br><span class="line">drwxrwx---. <span class="number">2</span> named named    <span class="number">6</span> <span class="number">2</span>月  <span class="number">24</span> <span class="number">2022</span> dynamic</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root  named <span class="number">2253</span> <span class="number">4</span>月   <span class="number">5</span> <span class="number">2018</span> named.ca</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root  named  <span class="number">152</span> <span class="number">12</span>月 <span class="number">15</span> <span class="number">2009</span> named.empty</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root  named  <span class="number">152</span> <span class="number">6</span>月  <span class="number">21</span> <span class="number">2007</span> named.localhost</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root  named  <span class="number">168</span> <span class="number">12</span>月 <span class="number">15</span> <span class="number">2009</span> named.loopback</span><br><span class="line">drwxrwx---. <span class="number">2</span> named named    <span class="number">6</span> <span class="number">2</span>月  <span class="number">24</span> <span class="number">2022</span> slaves</span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># cp -p named.localhost kubels.com.zone</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># ll</span></span><br><span class="line">总用量 <span class="number">24</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root  root   <span class="number">152</span> <span class="number">9</span>月  <span class="number">27</span> <span class="number">23</span>:<span class="number">44</span> <span class="number">1</span>.conf</span><br><span class="line">drwxrwx---. <span class="number">2</span> named named    <span class="number">6</span> <span class="number">2</span>月  <span class="number">24</span> <span class="number">2022</span> <span class="keyword">data</span></span><br><span class="line">drwxrwx---. <span class="number">2</span> named named    <span class="number">6</span> <span class="number">2</span>月  <span class="number">24</span> <span class="number">2022</span> dynamic</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root  named  <span class="number">152</span> <span class="number">6</span>月  <span class="number">21</span> <span class="number">2007</span> kubels.com.zone</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root  named <span class="number">2253</span> <span class="number">4</span>月   <span class="number">5</span> <span class="number">2018</span> named.ca</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root  named  <span class="number">152</span> <span class="number">12</span>月 <span class="number">15</span> <span class="number">2009</span> named.empty</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root  named  <span class="number">152</span> <span class="number">6</span>月  <span class="number">21</span> <span class="number">2007</span> named.localhost</span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-----. <span class="number">1</span> root  named  <span class="number">168</span> <span class="number">12</span>月 <span class="number">15</span> <span class="number">2009</span> named.loopback</span><br><span class="line">drwxrwx---. <span class="number">2</span> named named    <span class="number">6</span> <span class="number">2</span>月  <span class="number">24</span> <span class="number">2022</span> slaves</span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加DNSzheng</p><p>添加域名解析文件，把我们规划的域名最解析，解析之后，我们的网络就可以使用自己的域名了</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># vim kubels.com.zone</span></span><br><span class="line"><span class="comment"># 这里修改的是一个域名的正向查询文件。正向查询文件是指把我们的域名解析为具体的ip地址</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$TTL</span> <span class="number">1</span>D  <span class="comment">#  设置DNS的有效期为1天</span></span><br><span class="line"><span class="selector-tag">@</span>       <span class="keyword">IN</span> SOA  kubels.com admin.kubels.com. (     <span class="comment"># 第一条是起始域名机构，负责做域名解析   . 必须要加上</span></span><br><span class="line">                                        <span class="number">0</span>       ; serial</span><br><span class="line">                                        <span class="number">1</span>D      ; refresh</span><br><span class="line">                                        <span class="number">1</span><span class="built_in">H</span>      ; retry</span><br><span class="line">                                        <span class="number">1</span>W      ; expire</span><br><span class="line">                                        <span class="number">3</span><span class="built_in">H</span> )    ; minimum</span><br><span class="line"><span class="selector-tag">@</span>       NS      ns.kubels.com.    <span class="comment"># NS 就是域名服务器 起始授权结构本身要注册进来  . 必须要加上</span></span><br><span class="line">ns      A       <span class="number">192.168</span>.<span class="number">31.211</span>    <span class="comment"># 这个就是本身</span></span><br><span class="line">yaml    A       <span class="number">192.168</span>.<span class="number">31.212</span></span><br><span class="line">harbor  A       <span class="number">192.168</span>.<span class="number">31.213</span></span><br><span class="line">www     A       <span class="number">192.168</span>.<span class="number">31.213</span></span><br><span class="line">nfs     A       <span class="number">192.168</span>.<span class="number">31.214</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># systemctl enable  named</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># systemctl start named</span></span><br></pre></td></tr></table></figure><p>注意：这里要修改<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>  修改DNS1 ,一定要把我们自己的DNS嫁到前面去</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="built_in">TYPE</span>=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=<span class="keyword">static</span></span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable<span class="literal">-privacy</span></span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=<span class="number">6</span>b19f511<span class="literal">-5a6d</span><span class="literal">-4434</span><span class="literal">-bb00</span><span class="literal">-95fc19a62c39</span></span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">DNS1=<span class="number">192.168</span>.<span class="number">77.121</span>  <span class="comment">#自己的DNS服务器</span></span><br><span class="line">DNS2=<span class="number">119.29</span>.<span class="number">29.29</span></span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">77.211</span>  </span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span>.<span class="number">77.2</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># systemctl restart network</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为DNS有缓存，所以这里可能更改完成后，不会立即生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable --now named</span><br></pre></td></tr></table></figure><p>如果还是不生效,执行如下命令再看看效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@dns named]# nslookup</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> server</span></span><br><span class="line">Default server: 192.168.77.211</span><br><span class="line">Address: 192.168.77.211#53</span><br><span class="line">Default server: 119.29.29.29</span><br><span class="line">Address: 119.29.29.29#53</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ns.kubels.com</span></span><br><span class="line">Server:         192.168.77.211</span><br><span class="line">Address:        192.168.77.211#53</span><br><span class="line"></span><br><span class="line">Name:   ns.kubels.com</span><br><span class="line">Address: 192.168.77.211</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> yaml.kubels.com</span></span><br><span class="line">Server:         192.168.77.211</span><br><span class="line">Address:        192.168.77.211#53</span><br><span class="line"></span><br><span class="line">Name:   yaml.kubels.com</span><br><span class="line">Address: 192.168.77.212</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> harbor.kubels.com</span></span><br><span class="line">Server:         192.168.77.211</span><br><span class="line">Address:        192.168.77.211#53</span><br><span class="line"></span><br><span class="line">Name:   harbor.kubels.com</span><br><span class="line">Address: 192.168.77.213</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> www.kubels.com</span></span><br><span class="line">Server:         192.168.77.211</span><br><span class="line">Address:        192.168.77.211#53</span><br><span class="line"></span><br><span class="line">Name:   www.kubels.com</span><br><span class="line">Address: 192.168.77.213</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> nfs.kubels.com</span></span><br><span class="line">Server:         192.168.77.211</span><br><span class="line">Address:        192.168.77.211#53</span><br><span class="line"></span><br><span class="line">Name:   nfs.kubels.com</span><br><span class="line">Address: 192.168.77.214</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ^C[root@dns named]<span class="comment"># ^C</span></span></span><br><span class="line">[root@dns named]#</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="域名解析验证"><a href="#域名解析验证" class="headerlink" title="域名解析验证"></a>域名解析验证</h2><p>两种工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@dns named]# dig -t a www.baidu.com @19.96.0.10</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.9 &lt;&lt;&gt;&gt; -t a www.baidu.com @19.96.0.10</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 8322</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.baidu.com.                 IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.baidu.com.          1132    IN      CNAME   www.a.shifen.com.</span><br><span class="line">www.a.shifen.com.       167     IN      A       112.80.248.75</span><br><span class="line">www.a.shifen.com.       167     IN      A       112.80.248.76</span><br><span class="line"></span><br><span class="line">;; Query time: 5 msec</span><br><span class="line">;; SERVER: 19.96.0.10#53(19.96.0.10)</span><br><span class="line">;; WHEN: 三 9月 28 00:11:20 CST 2022</span><br><span class="line">;; MSG SIZE  rcvd: 90</span><br><span class="line"></span><br><span class="line">[root@dns named]#</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二个工具</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># yum -y  install bind-utils</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">dns</span> <span class="type">named</span>]<span class="comment"># nslookup</span></span><br><span class="line">&gt; server</span><br><span class="line">Default server: <span class="number">192.168</span>.<span class="number">10.211</span></span><br><span class="line">Address: <span class="number">192.168</span>.<span class="number">10.211</span><span class="comment">#53</span></span><br><span class="line">Default server: <span class="number">119.29</span>.<span class="number">29.29</span></span><br><span class="line">Address: <span class="number">119.29</span>.<span class="number">29.29</span><span class="comment">#53</span></span><br><span class="line">&gt; ns.kubels.com</span><br><span class="line">Server:         <span class="number">192.168</span>.<span class="number">10.211</span></span><br><span class="line">Address:        <span class="number">192.168</span>.<span class="number">10.211</span><span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Name:   ns.kubels.com</span><br><span class="line">Address: <span class="number">192.168</span>.<span class="number">10.211</span></span><br><span class="line"></span><br><span class="line">&gt; yaml.kubels.com</span><br><span class="line">Server:         <span class="number">192.168</span>.<span class="number">10.211</span></span><br><span class="line">Address:        <span class="number">192.168</span>.<span class="number">10.211</span><span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Name:   yaml.kubels.com</span><br><span class="line">Address: <span class="number">192.168</span>.<span class="number">10.212</span></span><br></pre></td></tr></table></figure><p>k8s怎么使用呢，修改k8s的主节点和从节点都需要换的dns解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</span><br><span class="line">修改dns1&#x3D;192.168.31.211</span><br><span class="line">保存</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><h1 id="yaml资源清单文件托管服务-nginx"><a href="#YAML资源清单文件托管服务-Nginx" class="headerlink" title="YAML资源清单文件托管服务 Nginx"></a>YAML资源清单文件托管服务 Nginx</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># hostnamectl set-hostname nginx</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># vi /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="built_in">TYPE</span>=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=<span class="string">&quot;none&quot;</span></span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable<span class="literal">-privacy</span></span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=<span class="number">6</span>b19f511<span class="literal">-5a6d</span><span class="literal">-4434</span><span class="literal">-bb00</span><span class="literal">-95fc19a62c39</span></span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DNS1=<span class="number">192.168</span>.<span class="number">77.211</span></span><br><span class="line">DNS2=<span class="string">&quot;119.29.29.29&quot;</span></span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">77.212</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span>.<span class="number">77.2</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># firewall-cmd --state</span></span><br><span class="line">not running</span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># sestatus</span></span><br><span class="line">SELinux status:                 disabled</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/3.nginx%E5%9C%B0%E5%9D%80.png" alt="image-20200512094822918"></p><p><img src="Kubernetes%E9%9B%86%E7%BE%A4%E5%85%AC%E5%85%B1%E6%9C%8D%E5%8A%A1.assets/image-20200512094918480.png" alt="image-20200512094918480"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># wget http://nginx.org/download/nginx-1.18.0.tar.gz</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># ls soft/</span></span><br><span class="line"><span class="built_in">echo</span><span class="literal">-nginx</span><span class="literal">-module</span><span class="literal">-0</span>.<span class="number">61</span>.tar.gz  nginx<span class="literal">-1</span>.<span class="number">18.0</span>.tar.gz  ngx<span class="literal">-fancyindex</span><span class="literal">-0</span>.<span class="number">4.3</span>.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># yum -y install gcc prce-devel zlib-devel openssl-devel</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># cd soft/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">soft</span>]<span class="comment"># ls</span></span><br><span class="line"><span class="built_in">echo</span><span class="literal">-nginx</span><span class="literal">-module</span><span class="literal">-0</span>.<span class="number">61</span>.tar.gz  nginx<span class="literal">-1</span>.<span class="number">18.0</span>.tar.gz  ngx<span class="literal">-fancyindex</span><span class="literal">-0</span>.<span class="number">4.3</span>.tar.gz</span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">soft</span>]<span class="comment"># tar xf ngx-fancyindex-0.4.3.tar.gz</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">soft</span>]<span class="comment"># tar xf nginx-1.18.0.tar.gz</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">soft</span>]<span class="comment"># tar xf echo-nginx-module-0.61.tar.gz</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">soft</span>]<span class="comment"># ls</span></span><br><span class="line"><span class="built_in">echo</span><span class="literal">-nginx</span><span class="literal">-module</span><span class="literal">-0</span>.<span class="number">61</span>         nginx<span class="literal">-1</span>.<span class="number">18.0</span>         ngx<span class="literal">-fancyindex</span><span class="literal">-0</span>.<span class="number">4.3</span></span><br><span class="line"><span class="built_in">echo</span><span class="literal">-nginx</span><span class="literal">-module</span><span class="literal">-0</span>.<span class="number">61</span>.tar.gz  nginx<span class="literal">-1</span>.<span class="number">18.0</span>.tar.gz  ngx<span class="literal">-fancyindex</span><span class="literal">-0</span>.<span class="number">4.3</span>.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">nginx</span>-<span class="number">1.18</span><span class="type">.0</span>]<span class="comment"># ./configure --prefix=/usr/local/nginx  --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --add-module=/root/soft/ngx-fancyindex-0.4.3/ --add-module=/root/soft/echo-nginx-module-0.61</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">nginx</span>-<span class="number">1.18</span><span class="type">.0</span>]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> <span class="type">soft</span>]<span class="comment"># cat nginx_manager.sh</span></span><br><span class="line"><span class="comment">#!/usr/bin/bash</span></span><br><span class="line"><span class="comment"># nginx manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">nginx_base=<span class="string">&quot;/usr/local/nginx&quot;</span></span><br><span class="line">nginxd=<span class="string">&quot;<span class="variable">$nginx_base</span>/sbin/nginx&quot;</span></span><br><span class="line">nginx_pid=<span class="string">&quot;<span class="variable">$nginx_base</span>/logs/nginx.pid&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用系统函数，为输出文字添加颜色</span></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">f</span> /<span class="type">etc</span>/<span class="type">init.d</span>/<span class="type">functions</span> ];then</span><br><span class="line">        source /etc/init.d/functions</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测nginx进程是否存在及进程数量是否正常</span></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">f</span> <span class="variable">$nginx_pid</span> ];then</span><br><span class="line">        nginx_process_pid=`cat <span class="variable">$nginx_pid</span>`</span><br><span class="line">        nginx_process_num=`ps aux | grep <span class="string">&quot;<span class="variable">$nginx_process_pid</span>&quot;</span> | wc <span class="literal">-l</span>`</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装功能</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">start</span> () &#123;</span><br><span class="line">        <span class="keyword">if</span> [ -<span class="type">f</span> <span class="variable">$nginx_pid</span> ] &amp;&amp; [ <span class="variable">$nginx_process_num</span> -<span class="type">ge</span> <span class="number">2</span> ];then</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;nginx already start&quot;</span></span><br><span class="line">        elif [ ! -<span class="type">f</span> <span class="variable">$nginx_pid</span> ] || [ -<span class="type">z</span> <span class="string">&quot;<span class="variable">$nginx_process_num</span>&quot;</span> ];then</span><br><span class="line">                action <span class="string">&quot;nginx start&quot;</span> <span class="variable">$nginxd</span></span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop () &#123;</span><br><span class="line">        <span class="keyword">if</span> [ -<span class="type">f</span> <span class="variable">$nginx_pid</span> ] &amp;&amp; [ <span class="variable">$nginx_process_num</span> -<span class="type">ge</span> <span class="number">2</span> ];then</span><br><span class="line">                action <span class="string">&quot;nginx stop&quot;</span> <span class="built_in">kill</span> <span class="literal">-s</span> QUIT <span class="variable">$nginx_process_pid</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;nginx already stop&quot;</span></span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status () &#123;</span><br><span class="line">        <span class="keyword">if</span> [ -<span class="type">f</span> <span class="variable">$nginx_pid</span> ] &amp;&amp; [ <span class="variable">$nginx_process_num</span> -<span class="type">ge</span> <span class="number">2</span> ];then</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;nginx running&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;nginx stopped&quot;</span></span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reload () &#123;</span><br><span class="line">        <span class="keyword">if</span> [ -<span class="type">f</span> <span class="variable">$nginx_pid</span> ] &amp;&amp; [ <span class="variable">$nginx_process_num</span> -<span class="type">ge</span> <span class="number">2</span> ];then</span><br><span class="line">                <span class="built_in">kill</span> <span class="literal">-s</span> HUP <span class="variable">$nginx_process_pid</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;nginx stopped&quot;</span></span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line"></span><br><span class="line">case <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">start</span>)</span><br><span class="line">                <span class="built_in">start</span></span><br><span class="line">                ;;</span><br><span class="line">        stop)</span><br><span class="line">                stop</span><br><span class="line">                ;;</span><br><span class="line">        restart)</span><br><span class="line">                stop</span><br><span class="line">                <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">                <span class="built_in">start</span></span><br><span class="line">                ;;</span><br><span class="line">        status)</span><br><span class="line">                status</span><br><span class="line">                ;;</span><br><span class="line">        reload)</span><br><span class="line">                reload</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;命令用法: <span class="variable">$0</span> start|stop|restart|status|reload&quot;</span></span><br><span class="line">esac</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># cat /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet<span class="literal">-stream</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  <span class="number">192.168</span>.<span class="number">10.212</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">        root   html;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            fancyindex on;</span><br><span class="line">            fancyindex_exact_size off;</span><br><span class="line">            index  index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">        location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># cat /etc/rc.d/rc.local</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is highly advisable to create own systemd services or udev rules</span></span><br><span class="line"><span class="comment"># to run scripts during boot instead of using this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In contrast to previous versions due to parallel execution during boot</span></span><br><span class="line"><span class="comment"># this script will NOT be run after all other services.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please note that you must run &#x27;chmod +x /etc/rc.d/rc.local&#x27; to ensure</span></span><br><span class="line"><span class="comment"># that this script will be executed during boot.</span></span><br><span class="line"></span><br><span class="line">touch /var/lock/subsys/local</span><br><span class="line">/root/soft/nginx_manager.sh <span class="built_in">start</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># ll /etc/rc.d/rc.local</span></span><br><span class="line"><span class="literal">-rw</span><span class="literal">-r</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">507</span> <span class="number">5</span>月  <span class="number">12</span> <span class="number">10</span>:<span class="number">27</span> /etc/rc.d/rc.local</span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># chmod 744 /etc/rc.d/rc.local</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># ll /etc/rc.d/rc.local</span></span><br><span class="line"><span class="literal">-rwxr</span>-<span class="literal">-r</span>-- <span class="number">1</span> root root <span class="number">507</span> <span class="number">5</span>月  <span class="number">12</span> <span class="number">10</span>:<span class="number">27</span> /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><h1 id="容器镜像仓库-harbor"><a href="#容器镜像仓库-Harbor" class="headerlink" title="容器镜像仓库 Harbor"></a>容器镜像仓库 Harbor</h1><h2 id="主机名及ip地址配置"><a href="#主机名及IP地址配置" class="headerlink" title="主机名及IP地址配置"></a>主机名及IP地址配置</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># hostnamectl set-hostname harbor</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="built_in">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;eth0&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;eth0&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=<span class="string">&quot;192.168.10.213&quot;</span></span><br><span class="line">PREFIX=<span class="string">&quot;24&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.10.2&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;192.168.10.211&quot;</span></span><br><span class="line">DNS2=<span class="string">&quot;119.29.29.29&quot;</span></span><br></pre></td></tr></table></figure><h2 id="docker-ce安装"><a href="#docker-ce安装" class="headerlink" title="docker ce安装"></a>docker ce安装</h2><h3 id="docker安装yum源准备"><a href="#Docker安装YUM源准备" class="headerlink" title="Docker安装YUM源准备"></a>Docker安装YUM源准备</h3><blockquote><p>使用阿里云开源软件镜像站。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span></span><br></pre></td></tr></table></figure><h3 id="docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum -y install docker-ce</span></span><br></pre></td></tr></table></figure><h3 id="启动docker服务"><a href="#启动Docker服务" class="headerlink" title="启动Docker服务"></a>启动Docker服务</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl enable --now docker</span></span><br></pre></td></tr></table></figure><h2 id="获取-docker-compose二进制文件"><a href="#获取-docker-compose二进制文件" class="headerlink" title="获取 docker compose二进制文件"></a>获取 docker compose二进制文件</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载docker<span class="literal">-compose</span>二进制文件</span><br><span class="line"><span class="comment"># wget https://github.com/docker/compose/releases/download/1.25.0/docker-compose-Linux-x86_64</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看已下载二进制文件</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">docker<span class="literal">-compose</span><span class="literal">-Linux</span><span class="literal">-x86_64</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">移动二进制文件到/usr/bin目录，并更名为docker<span class="literal">-compose</span></span><br><span class="line"><span class="comment"># mv docker-compose-Linux-x86_64 /usr/bin/docker-compose</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">为二进制文件添加可执行权限</span><br><span class="line"><span class="comment"># chmod +x /usr/bin/docker-compose</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装完成后，查看docker<span class="literal">-compse</span>版本</span><br><span class="line"><span class="comment"># docker-compose version</span></span><br><span class="line">docker<span class="literal">-compose</span> version <span class="number">1.25</span>.<span class="number">0</span>, build <span class="number">0</span>a186604</span><br><span class="line">docker<span class="literal">-py</span> version: <span class="number">4.1</span>.<span class="number">0</span></span><br><span class="line">CPython version: <span class="number">3.7</span>.<span class="number">4</span></span><br><span class="line">OpenSSL version: OpenSSL <span class="number">1.1</span>.<span class="number">0</span>l  <span class="number">10</span> Sep <span class="number">2019</span></span><br></pre></td></tr></table></figure><h2 id="获取harbor安装文件"><a href="#获取harbor安装文件" class="headerlink" title="获取harbor安装文件"></a>获取harbor安装文件</h2><p>1.github上搜索harbor</p><p>2.找到goharbor/harbor进入</p><p>3.选择合并的tags版本</p><p>4.选择离线安装包  harbor-offline-installer-v2.4.1.tgz</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/harbor%E4%B8%8B%E8%BD%BD.png" alt="image-20220125233739356"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载harbor离线安装包</span><br><span class="line"><span class="comment"># wget https://github.com/goharbor/harbor/releases/download/v2.4.1/harbor-offline-installer-v2.4.1.tgz</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看已下载的离线安装包</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">harbor<span class="literal">-offline</span><span class="literal">-installer</span><span class="literal">-v2</span>.<span class="number">4.1</span>.tgz</span><br></pre></td></tr></table></figure><h2 id="获取tls文件"><a href="#获取TLS文件" class="headerlink" title="获取TLS文件"></a>获取TLS文件</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看准备好的证书</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">kubels.com_nginx.zip</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解压证书压缩包文件</span><br><span class="line"><span class="comment"># unzip kubels.com_nginx.zip</span></span><br><span class="line">Archive:  kubels.com_nginx.zip</span><br><span class="line">Aliyun Certificate Download</span><br><span class="line">  inflating: <span class="number">6864844</span>_kubels.com.pem</span><br><span class="line">  inflating: <span class="number">6864844</span>_kubels.com.key</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看解压出的文件</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line"><span class="number">6864844</span>_kubels.com.key</span><br><span class="line"><span class="number">6864844</span>_kubels.com.pem</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解压harbor离线安装包</span><br><span class="line"><span class="comment"># tar xf harbor-offline-installer-v2.4.1.tgz</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看解压出来的目录</span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">harbor </span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">移动证书到harbor目录</span><br><span class="line"><span class="comment"># # mv 6864844_kubels.com.* harbor</span></span><br><span class="line"></span><br><span class="line">查看harbor目录</span><br><span class="line"><span class="comment"># ls harbor</span></span><br><span class="line"><span class="number">6864844</span>_kubels.com.key  <span class="number">6864844</span>_kubels.com.pem  common.sh  harbor.v2.<span class="number">4.1</span>.tar.gz  harbor.yml.tmpl  install.sh  LICENSE  prepare</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建配置文件</span><br><span class="line"><span class="comment"># cd harbor/</span></span><br><span class="line"><span class="comment"># mv harbor.yml.tmpl harbor.yml</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">修改配置文件内容</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim harbor.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configuration file of Harbor</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The IP address or hostname to access admin UI and registry service.</span></span><br><span class="line"><span class="comment"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span></span><br><span class="line">hostname: www.kubels.com 修改为域名，而且一定是证书签发的域名</span><br><span class="line"></span><br><span class="line"><span class="comment"># http related config</span></span><br><span class="line">http:</span><br><span class="line">  <span class="comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  port: <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https related config</span></span><br><span class="line">https:</span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line">  port: <span class="number">443</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line">  certificate: /root/harbor/<span class="number">6864844</span>_kubels.com.pem 证书  如果没有证书要注释掉https的这段配置</span><br><span class="line">  private_key: /root/harbor/<span class="number">6864844</span>_kubels.com.key 密钥</span><br><span class="line"></span><br><span class="line"><span class="comment"># # Uncomment following will enable tls communication between all harbor components</span></span><br><span class="line"><span class="comment"># internal_tls:</span></span><br><span class="line"><span class="comment">#   # set enabled to true means internal tls is enabled</span></span><br><span class="line"><span class="comment">#   enabled: true</span></span><br><span class="line"><span class="comment">#   # put your cert and key files on dir</span></span><br><span class="line"><span class="comment">#   dir: /etc/harbor/tls/internal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment external_url if you want to enable external proxy</span></span><br><span class="line"><span class="comment"># And when it enabled the hostname will no longer used</span></span><br><span class="line"><span class="comment"># external_url: https://reg.mydomain.com:8433</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The initial password of Harbor admin</span></span><br><span class="line"><span class="comment"># It only works in first time to install harbor</span></span><br><span class="line"><span class="comment"># Remember Change the admin password from UI after launching Harbor.</span></span><br><span class="line">harbor_admin_password: <span class="number">12345</span> 访问密码</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="执行预备脚本"><a href="#执行预备脚本" class="headerlink" title="执行预备脚本"></a>执行预备脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prepare base dir is set to &#x2F;home&#x2F;harbor</span><br><span class="line">Unable to find image &#39;goharbor&#x2F;prepare:v2.6.0&#39; locally</span><br><span class="line">docker: Error response from daemon: Get &quot;https:&#x2F;&#x2F;registry-1.docker.io&#x2F;v2&#x2F;&quot;: dial tcp: lookup registry-1.docker.io on 192.168.31.211:53: server misbehaving.</span><br><span class="line">See &#39;docker run --help&#39;.</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./prepare</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">输出</span><br><span class="line">prepare base <span class="built_in">dir</span> is <span class="built_in">set</span> to /root/harbor</span><br><span class="line">Clearing the configuration file: /config/portal/nginx.conf</span><br><span class="line">Clearing the configuration file: /config/log/logrotate.conf</span><br><span class="line">Clearing the configuration file: /config/log/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/portal/nginx.conf</span><br><span class="line">Generated configuration file: /config/log/logrotate.conf</span><br><span class="line">Generated configuration file: /config/log/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: /config/core/env</span><br><span class="line">Generated configuration file: /config/core/app.conf</span><br><span class="line">Generated configuration file: /config/registry/config.yml</span><br><span class="line">Generated configuration file: /config/registryctl/env</span><br><span class="line">Generated configuration file: /config/registryctl/config.yml</span><br><span class="line">Generated configuration file: /config/db/env</span><br><span class="line">Generated configuration file: /config/jobservice/env</span><br><span class="line">Generated configuration file: /config/jobservice/config.yml</span><br><span class="line">Generated and saved secret to file: /<span class="keyword">data</span>/secret/keys/secretkey</span><br><span class="line">Successfully called func: create_root_cert</span><br><span class="line">Generated configuration file: /compose_location/docker<span class="literal">-compose</span>.yml</span><br><span class="line">Clean up the input <span class="built_in">dir</span></span><br></pre></td></tr></table></figure><h2 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./install.sh</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">输出</span><br><span class="line">[<span class="type">Step</span> <span class="number">0</span>]: checking <span class="keyword">if</span> docker is installed ...</span><br><span class="line"></span><br><span class="line">Note: docker version: <span class="number">20.10</span>.<span class="number">12</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Step</span> <span class="number">1</span>]: checking docker<span class="literal">-compose</span> is installed ...</span><br><span class="line"></span><br><span class="line">Note: docker<span class="literal">-compose</span> version: <span class="number">1.25</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">[<span class="type">Step</span> <span class="number">2</span>]: loading Harbor images ...</span><br><span class="line"></span><br><span class="line">[<span class="type">Step</span> <span class="number">3</span>]: preparing environment ...</span><br><span class="line"></span><br><span class="line">[<span class="type">Step</span> <span class="number">4</span>]: preparing harbor configs ...</span><br><span class="line">prepare base <span class="built_in">dir</span> is <span class="built_in">set</span> to /root/harbor</span><br><span class="line"></span><br><span class="line">[<span class="type">Step</span> <span class="number">5</span>]: starting Harbor ...</span><br><span class="line">Creating network <span class="string">&quot;harbor_harbor&quot;</span> with the default driver</span><br><span class="line">Creating harbor<span class="literal">-log</span> ... done</span><br><span class="line">Creating harbor<span class="literal">-db</span>     ... done</span><br><span class="line">Creating registry      ... done</span><br><span class="line">Creating registryctl   ... done</span><br><span class="line">Creating redis         ... done</span><br><span class="line">Creating harbor<span class="literal">-portal</span> ... done</span><br><span class="line">Creating harbor<span class="literal">-core</span>   ... done</span><br><span class="line">Creating harbor<span class="literal">-jobservice</span> ... done</span><br><span class="line">Creating nginx             ... done</span><br><span class="line">✔ ---<span class="literal">-Harbor</span> has been installed and started successfully.----</span><br></pre></td></tr></table></figure><h2 id="验证运行情况"><a href="#验证运行情况" class="headerlink" title="验证运行情况"></a>验证运行情况</h2><p>9个镜像在运行，少一个都不行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                                COMMAND                  CREATED              STATUS                        PORTS                                                                            NAMES</span><br><span class="line"><span class="number">71</span>c0db683e4a   goharbor/nginx<span class="literal">-photon</span>:v2.<span class="number">4.1</span>         <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute (healthy)   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>-&gt;<span class="number">8080</span>/tcp, :::<span class="number">80</span>-&gt;<span class="number">8080</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">443</span>-&gt;<span class="number">8443</span>/tcp, :::<span class="number">443</span>-&gt;<span class="number">8443</span>/tcp   nginx</span><br><span class="line"><span class="number">4</span>e3b53a86f01   goharbor/harbor<span class="literal">-jobservice</span>:v2.<span class="number">4.1</span>    <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    harbor<span class="literal">-jobservice</span></span><br><span class="line">df76e1eabbf7   goharbor/harbor<span class="literal">-core</span>:v2.<span class="number">4.1</span>          <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    harbor<span class="literal">-core</span></span><br><span class="line">eeb4d224dfc4   goharbor/harbor<span class="literal">-portal</span>:v2.<span class="number">4.1</span>        <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    harbor<span class="literal">-portal</span></span><br><span class="line"><span class="number">70</span>e162c38b59   goharbor/redis<span class="literal">-photon</span>:v2.<span class="number">4.1</span>         <span class="string">&quot;redis-server /etc/r…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    redis</span><br><span class="line"><span class="number">8</span>bcc0e9b06ec   goharbor/harbor<span class="literal">-registryctl</span>:v2.<span class="number">4.1</span>   <span class="string">&quot;/home/harbor/start.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    registryctl</span><br><span class="line">d88196398df7   goharbor/registry<span class="literal">-photon</span>:v2.<span class="number">4.1</span>      <span class="string">&quot;/home/harbor/entryp…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    registry</span><br><span class="line">ed5ba2ba9c82   goharbor/harbor<span class="literal">-db</span>:v2.<span class="number">4.1</span>            <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About a minute ago   Up About a minute (healthy)                                                                                    harbor<span class="literal">-db</span></span><br><span class="line">dcb4b57c7542   goharbor/harbor<span class="literal">-log</span>:v2.<span class="number">4.1</span>           <span class="string">&quot;/bin/sh -c /usr/loc…&quot;</span>   About a minute ago   Up About a minute (healthy)   <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1514</span>-&gt;<span class="number">10514</span>/tcp                                                        harbor<span class="literal">-log</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>##访问harbor UI界面</p><h3 id="在物理机通过浏览器访问"><a href="#在物理机通过浏览器访问" class="headerlink" title="在物理机通过浏览器访问"></a>在物理机通过浏览器访问</h3><p>访问102.168.10.213 进入harbor的ui页面</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/harbor%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E9%A6%96%E9%A1%B5.png" alt="image-20220126000840905"></p><h2 id="本地docker-daemon配置使用本地容器镜像仓库"><a href="#本地docker-daemon配置使用本地容器镜像仓库" class="headerlink" title="本地docker daemon配置使用本地容器镜像仓库"></a>本地docker daemon配置使用本地容器镜像仓库</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://www.kubels.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">harbor</span> ~]<span class="comment"># docker login www.kubels.com</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: <span class="number">12345</span></span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><h2 id="kubernetes集群所有节点配置使用本地容器镜像仓库"><a href="#Kubernetes集群所有节点配置使用本地容器镜像仓库" class="headerlink" title="Kubernetes集群所有节点配置使用本地容器镜像仓库"></a>Kubernetes集群所有节点配置使用本地容器镜像仓库</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-* ~]<span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-* ~]<span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://www.kubels.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-* ~]<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-* ~]<span class="comment"># docker login www.kubels.com</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: <span class="number">12345</span></span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><h1 id="持久化网络文件系统-nfs"><a href="#持久化网络文件系统-NFS" class="headerlink" title="持久化网络文件系统 NFS"></a>持久化网络文件系统 NFS</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># hostnamectl set-hostname nfs</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> ~]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line"><span class="built_in">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;eth0&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;eth0&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=<span class="string">&quot;192.168.10.214&quot;</span></span><br><span class="line">PREFIX=<span class="string">&quot;24&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.10.2&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;192.168.10.211&quot;</span></span><br><span class="line">DNS2=<span class="string">&quot;119.29.29.29&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># firewall-cmd --state</span></span><br><span class="line">not running</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># sestatus</span></span><br><span class="line">SELinux status:                 disabled</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME                MAJ:MIN <span class="built_in">RM</span>  SIZE RO <span class="built_in">TYPE</span> MOUNTPOINT</span><br><span class="line">vda                 <span class="number">252</span>:<span class="number">0</span>    <span class="number">0</span>  <span class="number">100</span>G  <span class="number">0</span> disk</span><br><span class="line">├─vda1              <span class="number">252</span>:<span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>G  <span class="number">0</span> part /boot</span><br><span class="line">└─vda2              <span class="number">252</span>:<span class="number">2</span>    <span class="number">0</span>   <span class="number">99</span>G  <span class="number">0</span> part</span><br><span class="line">  ├─centos_192<span class="literal">-root</span> <span class="number">253</span>:<span class="number">0</span>    <span class="number">0</span>   <span class="number">50</span>G  <span class="number">0</span> lvm  /</span><br><span class="line">  ├─centos_192<span class="literal">-swap</span> <span class="number">253</span>:<span class="number">1</span>    <span class="number">0</span>  <span class="number">3.9</span>G  <span class="number">0</span> lvm  [<span class="type">SWAP</span>]</span><br><span class="line">  └─centos_192<span class="literal">-home</span> <span class="number">253</span>:<span class="number">2</span>    <span class="number">0</span> <span class="number">45.1</span>G  <span class="number">0</span> lvm  /home</span><br><span class="line">sdb                 <span class="number">252</span>:<span class="number">16</span>   <span class="number">0</span>  <span class="number">100</span>G  <span class="number">0</span> disk</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># mkfs.xfs /dev/sdb</span></span><br><span class="line">meta<span class="literal">-data</span>=/dev/vdb               isize=<span class="number">512</span>    agcount=<span class="number">4</span>, agsize=<span class="number">6553600</span> blks</span><br><span class="line">         =                       sectsz=<span class="number">512</span>   attr=<span class="number">2</span>, projid32bit=<span class="number">1</span></span><br><span class="line">         =                       crc=<span class="number">1</span>        finobt=<span class="number">0</span>, sparse=<span class="number">0</span></span><br><span class="line"><span class="keyword">data</span>     =                       bsize=<span class="number">4096</span>   blocks=<span class="number">26214400</span>, imaxpct=<span class="number">25</span></span><br><span class="line">         =                       sunit=<span class="number">0</span>      swidth=<span class="number">0</span> blks</span><br><span class="line">naming   =version <span class="number">2</span>              bsize=<span class="number">4096</span>   ascii<span class="literal">-ci</span>=<span class="number">0</span> ftype=<span class="number">1</span></span><br><span class="line">log      =internal log           bsize=<span class="number">4096</span>   blocks=<span class="number">12800</span>, version=<span class="number">2</span></span><br><span class="line">         =                       sectsz=<span class="number">512</span>   sunit=<span class="number">0</span> blks, lazy<span class="literal">-count</span>=<span class="number">1</span></span><br><span class="line">realtime =none                   extsz=<span class="number">4096</span>   blocks=<span class="number">0</span>, rtextents=<span class="number">0</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># mkdir /sdb</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># echo -e &quot;/dev/sdb\t/sdb\txfs\tdefaults\t0 0&quot; &gt;&gt; /etc/fstab</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># tail -1 /etc/fstab</span></span><br><span class="line">/dev/vdb        /vdb    xfs     defaults <span class="number">0</span> <span class="number">0</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># mount -a</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># df -Th</span></span><br><span class="line">文件系统                    类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs                    devtmpfs  <span class="number">2.0</span>G     <span class="number">0</span>  <span class="number">2.0</span>G    <span class="number">0</span>% /dev</span><br><span class="line">tmpfs                       tmpfs     <span class="number">2.0</span>G     <span class="number">0</span>  <span class="number">2.0</span>G    <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs                       tmpfs     <span class="number">2.0</span>G  <span class="number">8.6</span>M  <span class="number">2.0</span>G    <span class="number">1</span>% /run</span><br><span class="line">tmpfs                       tmpfs     <span class="number">2.0</span>G     <span class="number">0</span>  <span class="number">2.0</span>G    <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos_192<span class="literal">-root</span> xfs        <span class="number">50</span>G  <span class="number">2.1</span>G   <span class="number">48</span>G    <span class="number">5</span>% /</span><br><span class="line">/dev/mapper/centos_192<span class="literal">-home</span> xfs        <span class="number">46</span>G   <span class="number">33</span>M   <span class="number">46</span>G    <span class="number">1</span>% /home</span><br><span class="line">/dev/vda1                   xfs      <span class="number">1014</span>M  <span class="number">163</span>M  <span class="number">852</span>M   <span class="number">16</span>% /boot</span><br><span class="line">tmpfs                       tmpfs     <span class="number">250</span>M     <span class="number">0</span>  <span class="number">250</span>M    <span class="number">0</span>% /run/user/<span class="number">0</span></span><br><span class="line">/dev/sdb                    xfs       <span class="number">100</span>G   <span class="number">33</span>M  <span class="number">100</span>G    <span class="number">1</span>% /vdb</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># yum -y install nfs-utils</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># cat /etc/exports</span></span><br><span class="line">/sdb *(rw,sync,no_root_squash)</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># systemctl enable nfs-server;systemctl start nfs-server</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi<span class="literal">-user</span>.target.wants/nfs<span class="literal">-server</span>.service to /usr/lib/systemd/system/nfs<span class="literal">-server</span>.service.</span><br><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># systemctl status nfs-server</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nfs</span> ~]<span class="comment"># showmount -e</span></span><br><span class="line">Export list <span class="keyword">for</span> nfs:</span><br><span class="line">/sdb *</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">为了模拟在k8s集群主机中验证nfs可用性</span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master01</span> ~]<span class="comment"># yum -y install nfs-utils</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">k8s</span>-<span class="type">master01</span> ~]<span class="comment"># showmount -e nfs.kubels.com</span></span><br><span class="line">Export list <span class="keyword">for</span> nfs.kubels.com:</span><br><span class="line">/sdb *</span><br></pre></td></tr></table></figure><h1 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">创建Pod资源清单文件</span><br><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># cat 01-create-pod.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: c1</span><br><span class="line">    image: www.kubels.com/library/nginx:latest</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">nginx</span> ~]<span class="comment"># kubectl apply -f http://yaml.kubels.com/01-create-pod.yaml</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kubernetes集群核心服务&quot;&gt;&lt;a href=&quot;#Kubernetes集群核心服务&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes集群核心服务&quot;&gt;&lt;/a&gt;Kubernetes集群核心服务&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http</summary>
      
    
    
    
    <category term="云原生" scheme="https://lswisdom.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="kubernetes" scheme="https://lswisdom.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubeadm部署单Master节点的K8s集群</title>
    <link href="https://lswisdom.github.io/posts/879582920/"/>
    <id>https://lswisdom.github.io/posts/879582920/</id>
    <published>2022-10-29T10:06:57.000Z</published>
    <updated>2022-10-30T05:44:34.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubenates-集群部署方式"><a href="#Kubenates-集群部署方式" class="headerlink" title="Kubenates 集群部署方式"></a>Kubenates 集群部署方式</h1><h2 id="kubeadm部署"><a href="#kubeadm部署" class="headerlink" title="kubeadm部署"></a>kubeadm部署</h2><blockquote><p>官网安装地址：<a href="https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/">https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/</a></p></blockquote><ul><li>kubeadm 是一个工具，可以通过kubeadm init 和kubeadm join快速部署k8s集群</li><li>kubeadm 的前置操作非常多，会安装各种各样的插件，网络插件，但是安装过程简单</li></ul><h2 id="minikube-部署"><a href="#minikube-部署" class="headerlink" title="minikube 部署"></a>minikube 部署</h2><h2 id="rke部署k8s"><a href="#RKE部署k8s" class="headerlink" title="RKE部署k8s"></a>RKE部署k8s</h2><h2 id="公有云部署"><a href="#公有云部署" class="headerlink" title="公有云部署"></a>公有云部署</h2><ul><li>阿里云ACK</li><li>华为云CCE(Cloud Container Engine)</li><li>腾讯云EKS(Elastic Kubernetes Service)</li></ul><h2 id="国内三方部署工具"><a href="#国内三方部署工具" class="headerlink" title="国内三方部署工具"></a>国内三方部署工具</h2><ul><li>kubekey</li><li>kubeasz</li></ul><h1 id="kubeadm部署单master节点的k8s集群k8s-121-部署"><a href="#Kubeadm部署单Master节点的K8s集群（K8s-1-21-部署）" class="headerlink" title="Kubeadm部署单Master节点的K8s集群（K8s 1.21 部署）"></a>Kubeadm部署单Master节点的K8s集群（K8s 1.21 部署）</h1><blockquote><p>经过不断的摸索尝试,除了最后的k8s的初始化节点(kubelet init之后的操作) ，其他的前置准备工作，每个节点都要做</p><p>清单中2.5之前的工作，每一个工作节点都要执行</p></blockquote><h2 id="部署环境准备工作"><a href="#部署环境准备工作" class="headerlink" title="部署环境准备工作"></a>部署环境准备工作</h2><blockquote><p>操作系统统一使用CentOS7.9<br>整个过程在vmware虚拟机中进行<br>每个节点至少2核心4G的配置<br>网络模式：Net模式<br>网关:192.168.77.2</p></blockquote><table><thead><tr><th>CPU</th><th>内存</th><th>硬盘</th><th>角色</th><th>主机名称</th><th>ip地址</th></tr></thead><tbody><tr><td>2Core</td><td>4G</td><td>50G</td><td>master</td><td>k8s-master01</td><td>192.168.77.210</td></tr><tr><td>2Core</td><td>4G</td><td>50G</td><td>worker</td><td>k8s-worker01</td><td>192.168.77.211</td></tr><tr><td>2Core</td><td>4G</td><td>50G</td><td>worker</td><td>k8s-worker02</td><td>192.168.77.212</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="主机配置"><a href="#主机配置" class="headerlink" title="主机配置"></a>主机配置</h3><h4 id="主机名配置"><a href="#主机名配置" class="headerlink" title="主机名配置"></a>主机名配置</h4><p>分别设置三台主机的主机名称</p><p>k8s-master01</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master01  # 192.168.77.210</span><br></pre></td></tr></table></figure><p>k8s-worker01</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-worker01   # 192.168.77.211</span><br></pre></td></tr></table></figure><p>8s-worker02</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-worker02   # 192.168.77.212</span><br></pre></td></tr></table></figure><h4 id="主机ip地址配置"><a href="#主机ip地址配置" class="headerlink" title="主机ip地址配置"></a>主机ip地址配置</h4><figure class="highlight vim"><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-ens33</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p>k8s-master01的ip地址配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;f693d834-f55e-4c2e-8329-957cc221303d&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.77.210&quot;</span><br><span class="line">GATEWAY=&quot;192.168.77.2&quot;</span><br><span class="line">DNS1=&quot;119.29.29.29&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>k8s-worker01的ip地址配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;f693d834-f55e-4c2e-8329-957cc221303d&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.77.211&quot;</span><br><span class="line">GATEWAY=&quot;192.168.77.2&quot;</span><br><span class="line">DNS1=&quot;119.29.29.29&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>k8s-worker02的ip地址配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-worker02 ~]# </span><br><span class="line">TYPE&#x3D;&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD&#x3D;&quot;none&quot;</span><br><span class="line">BROWSER_ONLY&#x3D;&quot;no&quot;</span><br><span class="line">BOOTPROTO&#x3D;&quot;static&quot;</span><br><span class="line">DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6INIT&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE&#x3D;&quot;stable-privacy&quot;</span><br><span class="line">NAME&#x3D;&quot;ens33&quot;</span><br><span class="line">UUID&#x3D;&quot;f693d834-f55e-4c2e-8329-957cc221303d&quot;</span><br><span class="line">DEVICE&#x3D;&quot;ens33&quot;</span><br><span class="line">ONBOOT&#x3D;&quot;yes&quot;</span><br><span class="line">IPADDR&#x3D;&quot;192.168.77.212&quot;</span><br><span class="line">GATEWAY&#x3D;&quot;192.168.77.2&quot;</span><br><span class="line">DNS1&#x3D;&quot;119.29.29.29&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="主机名和ip地址解析"><a href="#主机名和IP地址解析" class="headerlink" title="主机名和IP地址解析"></a>主机名和IP地址解析</h4><blockquote><p>所有的集群主机都需要配置  vim /etc/hosts  追加如下配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.77.210 k8s-master01</span><br><span class="line">192.168.77.211 k8s-worker01</span><br><span class="line">192.168.77.212 k8s-worker02</span><br></pre></td></tr></table></figure><h4 id="关闭防火墙配置"><a href="#关闭防火墙配置" class="headerlink" title="关闭防火墙配置"></a>关闭防火墙配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># systemctl disable firewalld  关闭开机子启动</span><br><span class="line"># systemctl stop firewalld  关机防火墙</span><br><span class="line"># firewall-cmd --state</span><br></pre></td></tr></table></figure><h4 id="禁用selinux配置"><a href="#禁用SELINUX配置" class="headerlink" title="禁用SELINUX配置"></a>禁用SELINUX配置</h4><p>所有的主机都要操作，操作完成后要<code>重启</code>服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;selinux&#x2F;config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX&#x3D; can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX&#x3D;enforcing</span><br><span class="line"># SELINUXTYPE&#x3D; can take one of three values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     minimum - Modification of targeted policy. Only selected processes are protected.</span><br><span class="line">#     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE&#x3D;targeted</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更改上述配置文件中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELINUX&#x3D;enforcing  为disabled</span><br><span class="line">然后保存退出</span><br></pre></td></tr></table></figure><h4 id="时间同步配置所有节点"><a href="#时间同步配置（所有节点）" class="headerlink" title="时间同步配置（所有节点）"></a>时间同步配置（所有节点）</h4><p>同步时间服务器需要安装ntpdate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ntpdate</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># which ntpdate  查看</span><br><span class="line">crontab -e</span><br><span class="line">0 *&#x2F;1 * * * ntpdate time1.aliyun.com  #每隔一小时同步一下阿里云服务器</span><br></pre></td></tr></table></figure><h4 id="升级操作系统内核所有节点都要执行"><a href="#升级操作系统内核（所有节点都要执行）" class="headerlink" title="升级操作系统内核（所有节点都要执行）"></a>升级操作系统内核（所有节点都要执行）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">导入 elrepo gpg key (确认软件合法性)</span><br><span class="line"># rpm --import  https:&#x2F;&#x2F;www.elrepo.org&#x2F;RPM-GPG-KEY-elrepo.org</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">安装elrepo yum 源仓库</span><br><span class="line"># yum -y install https:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.0-4.el7.elrepo.noarch.rpm</span><br><span class="line"># 验证是否包含elrepo的包 yum repolist  观察是否存在elrepo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装kernel-ml 内核版本，ml为长期稳定版本，lt 为长期维护版本</span><br><span class="line"># yum --enablerepo&#x3D;&quot;elrepo-kernel&quot; -y install kernel-ml.x86_64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设置安装的内核优先启动 ,设置默认的引导项为0</span><br><span class="line"># grub2-set-default 0</span><br><span class="line">该命令不会立即生效，所以需要重新生成配置文件</span><br><span class="line"># grub2-mkconfig -o &#x2F;boot&#x2F;grub2&#x2F;grub.cfg</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 更新后需要重启，使用升级的内核生效</span><br><span class="line">reboot</span><br><span class="line">uname -r</span><br><span class="line">重启后查看内核是否更新为对应的版本  uname -r</span><br></pre></td></tr></table></figure><h4 id="配置内核转发及网桥过滤"><a href="#配置内核转发及网桥过滤" class="headerlink" title="配置内核转发及网桥过滤"></a>配置内核转发及网桥过滤</h4><blockquote><p>所有的主机均需要操作</p></blockquote><p>添加网桥过滤及内核转发配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line">复制如下到该文件中</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables&#x3D;1</span><br><span class="line">net.bridge.bridge-nf-call-iptables&#x3D;1</span><br><span class="line">net.ipv4.ip_forward&#x3D;1</span><br><span class="line">vm.swappiness&#x3D;0</span><br></pre></td></tr></table></figure><p>保存退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 加载br_netfilter模块</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">查看是否加载</span><br><span class="line">lsmod | grep br_netfilter</span><br><span class="line"></span><br><span class="line"># 加载网桥过滤及内核转发配置文件</span><br><span class="line">sysctl -p &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="安装ipset及ipvadm"><a href="#安装ipset及ipvadm" class="headerlink" title="安装ipset及ipvadm"></a>安装ipset及ipvadm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要为了实现service转发  </span><br></pre></td></tr></table></figure><p>安装ipset 及ipvsadm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ipset ipvsadm</span><br><span class="line"># 配置ipvsadm 模块加载方式</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules &lt;&lt; EOF</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>授权、运行检查是否加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules &amp;&amp; bash &#x2F;etc&#x2F;sysconfig&#x2F;modules&#x2F;ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack</span><br></pre></td></tr></table></figure><h4 id="关闭swap分区所有节点都要执行"><a href="#关闭swap分区-所有节点都要执行" class="headerlink" title="关闭swap分区(所有节点都要执行)"></a>关闭swap分区(所有节点都要执行)</h4><p>因为关闭后，可以提高k8s的性能。且初始化master节点的时候不会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;fstab</span><br><span class="line">#</span><br><span class="line"># &#x2F;etc&#x2F;fstab</span><br><span class="line"># Created by anaconda on Mon Oct  3 15:41:00 2022</span><br><span class="line">#</span><br><span class="line"># Accessible filesystems, by reference, are maintained under &#39;&#x2F;dev&#x2F;disk&#39;</span><br><span class="line"># See man pages fstab(5), findfs(8), mount(8) and&#x2F;or blkid(8) for more info</span><br><span class="line">#</span><br><span class="line">&#x2F;dev&#x2F;mapper&#x2F;centos-root &#x2F;                       xfs     defaults        0 0</span><br><span class="line">UUID&#x3D;715915d4-5b52-469f-a69d-f92410a28415 &#x2F;boot                   xfs     defaults        0 0</span><br><span class="line">#&#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0  swap前加个#号</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="装docker所有的节点都要执行"><a href="#装Docker（所有的节点都要执行）" class="headerlink" title="装Docker（所有的节点都要执行）"></a>装Docker（所有的节点都要执行）</h3><p>下面是阿里云官网提供的安装的方式</p><p>查看可以安装的docker的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce.x86_64 --showduplicates |sort -r</span><br></pre></td></tr></table></figure><h4 id="配置docker安装"><a href="#配置docker安装" class="headerlink" title="配置docker安装"></a>配置docker安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># step 1: 安装必要的一些系统工具</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"># Step 2: 添加软件源信息</span><br><span class="line">sudo yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line"># Step 3: 更新并安装 Docker-CE</span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"># Step 4: 开启Docker服务</span><br><span class="line">sudo service docker start</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;rv0ikufp.mirror.aliyuncs.com&quot;] # 配置自己的阿里云镜像操作地址</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="配置开启自启动"><a href="#配置开启自启动" class="headerlink" title="配置开启自启动"></a>配置开启自启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker;systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="修改cgroup-方式"><a href="#修改cgroup-方式" class="headerlink" title="修改cgroup 方式"></a>修改cgroup 方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json 中添加如下内容</span><br><span class="line">&#123;</span><br><span class="line">&quot;exec-opts&quot;:[&quot;native.cgroupdriver&#x3D;systemd&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="kubelet集群部署"><a href="#kubelet集群部署" class="headerlink" title="kubelet集群部署"></a>kubelet集群部署</h3><table><thead><tr><th></th><th>kubeadm</th><th>kubelet</th><th>kubectl</th></tr></thead><tbody><tr><td>版本</td><td>1.21.0</td><td>1.21.0</td><td>1.21.0</td></tr><tr><td>安装位置</td><td>集群中所有的主机</td><td>集群中所有的主机</td><td>集群中所有的主机</td></tr><tr><td>作用</td><td>初始化集群、管理集群等</td><td>用于接口api-server并对pod的生命周期进行管理</td><td>集群应用的命令行管理工具</td></tr></tbody></table><h4 id="kubernates-yum-源准备"><a href="#kubernates-yum-源准备" class="headerlink" title="kubernates yum 源准备"></a>kubernates yum 源准备</h4><h4 id="阿里云的yum源-所有的节点都要执行"><a href="#阿里云的yum源-（所有的节点都要执行）" class="headerlink" title="阿里云的yum源  （所有的节点都要执行）"></a>阿里云的yum源  （所有的节点都要执行）</h4><p>vim /etc/yum.repos.d/kubernetes.repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">repo_gpgcheck&#x3D;0</span><br><span class="line">gpgkey&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg</span><br><span class="line">       http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist 查看yum源是否可用,网络不好的情况下，注意观察，否则后续操作可能会失败</span><br></pre></td></tr></table></figure><h4 id="集群软件安装都要执行"><a href="#集群软件安装（都要执行）" class="headerlink" title="集群软件安装（都要执行）"></a>集群软件安装（都要执行）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看指定的版本</span><br><span class="line">yum list kubeadm.x86_64   --showduplicates | sort -r</span><br><span class="line">yum list kublet.x86_64      --showduplicates | sort -r</span><br><span class="line">yum list kubectl.x86_64     --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 安装指定的版本</span><br><span class="line">yum -y install --setopt&#x3D;obsoletes&#x3D;0 kubeadm-1.21.0-0  kubelet-1.21.0-0  kubectl-1.21.0-0</span><br></pre></td></tr></table></figure><h4 id="配置kubelet都要执行"><a href="#配置kubelet（都要执行）" class="headerlink" title="配置kubelet（都要执行）"></a>配置kubelet（都要执行）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;kubelet</span><br><span class="line">KUBELET_EXTRA_ARGS&#x3D;&quot;--cgroup-driver&#x3D;systemd&quot;</span><br><span class="line"></span><br><span class="line"># 设置kubelet开机自启动</span><br><span class="line">systemctl enable kubelet</span><br></pre></td></tr></table></figure><h4 id="集群镜像准备所有节点都要"><a href="#集群镜像准备（所有节点都要）" class="headerlink" title="集群镜像准备（所有节点都要）"></a>集群镜像准备（所有节点都要）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#强制删除所有镜像的命令(慎用)  docker rmi --force $(docker images -q)</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查看 需要下载镜像</span><br><span class="line">kubeadm config images list --kubernetes-version&#x3D;v1.21.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写镜像下载脚本 vim images_pull.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">images_list&#x3D;&#39;</span><br><span class="line">k8s.gcr.io&#x2F;kube-apiserver:v1.21.0</span><br><span class="line">k8s.gcr.io&#x2F;kube-controller-manager:v1.21.0</span><br><span class="line">k8s.gcr.io&#x2F;kube-scheduler:v1.21.0</span><br><span class="line">k8s.gcr.io&#x2F;kube-proxy:v1.21.0</span><br><span class="line">k8s.gcr.io&#x2F;pause:3.4.1</span><br><span class="line">k8s.gcr.io&#x2F;etcd:3.4.13-0</span><br><span class="line">k8s.gcr.io&#x2F;coredns&#x2F;coredns:v1.8.0&#39;</span><br><span class="line"></span><br><span class="line">for i in $images_list </span><br><span class="line">do</span><br><span class="line">    docker pull $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">docker save -o k8s-1-21-0.tar $images_list</span><br></pre></td></tr></table></figure><p>可能会遇到镜像拉不下来的场景,可以换成如下脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 下面的镜像应该去除&quot;k8s.gcr.io&quot;的前缀，版本换成kubeadm config images list命令获取</span><br><span class="line">到的版本</span><br><span class="line">images&#x3D;(</span><br><span class="line">kube-apiserver:v1.21.0</span><br><span class="line">kube-controller-manager:v1.21.0</span><br><span class="line">kube-scheduler:v1.21.0</span><br><span class="line">kube-proxy:v1.21.0</span><br><span class="line">pause:3.4.1</span><br><span class="line">etcd:3.4.13-0</span><br><span class="line">coredns:v1.8.0</span><br><span class="line">)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ;</span><br><span class="line">do</span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;$imageName</span><br><span class="line">    docker tag  registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;$imageName k8s.gcr.io&#x2F;$imageName</span><br><span class="line">    docker rmi  registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;$imageName</span><br><span class="line">done</span><br><span class="line">docker tag k8s.gcr.io&#x2F;coredns:v1.8.0  k8s.gcr.io&#x2F;coredns&#x2F;coredns:v1.8.0</span><br><span class="line">docker rmi k8s.gcr.io&#x2F;coredns:v1.8.0</span><br><span class="line"></span><br><span class="line">docker save -o k8s.1.21.0.tar \</span><br><span class="line">k8s.gcr.io&#x2F;kube-proxy:v1.21.0 \</span><br><span class="line">k8s.gcr.io&#x2F;kube-apiserver:v1.21.0 \</span><br><span class="line">k8s.gcr.io&#x2F;kube-controller-manager:v1.21.0 \</span><br><span class="line">k8s.gcr.io&#x2F;kube-scheduler:v1.21.0 \</span><br><span class="line">k8s.gcr.io&#x2F;coredns&#x2F;coredns:v1.8.0 \</span><br><span class="line">k8s.gcr.io&#x2F;etcd:3.4.13-0 \</span><br><span class="line">k8s.gcr.io&#x2F;pause:3.4.1 \</span><br></pre></td></tr></table></figure><p>保存镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker save -o k8s.1.21.0.tar \</span><br><span class="line">k8s.gcr.io&#x2F;kube-proxy:v1.21.0 \</span><br><span class="line">k8s.gcr.io&#x2F;kube-apiserver:v1.21.0 \</span><br><span class="line">k8s.gcr.io&#x2F;kube-controller-manager:v1.21.0 \</span><br><span class="line">k8s.gcr.io&#x2F;kube-scheduler:v1.21.0 \</span><br><span class="line">k8s.gcr.io&#x2F;coredns:v1.8.0 \</span><br><span class="line">k8s.gcr.io&#x2F;etcd:3.4.13-0 \</span><br><span class="line">k8s.gcr.io&#x2F;pause:3.4.1 \</span><br></pre></td></tr></table></figure><h3 id="master节点初始化工作"><a href="#master节点初始化工作" class="headerlink" title="master节点初始化工作"></a>master节点初始化工作</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version v1.21.0 --pod-network-cidr&#x3D;10.244.0.0&#x2F;16 --apiserver-advertise-address&#x3D;192.168.77.210</span><br><span class="line"># 只有master节点进行初始化</span><br><span class="line"># --kubernetes&#x3D;v1.21.0 k8s的版本</span><br><span class="line"># --pod-network-cidr&#x3D;10.244.0.0&#x2F;16  k8s集群内的网络  不要使用真实网络的网段</span><br><span class="line"># --apiserver-advertise-address&#x3D;192.168.77.210  api-server监听的地址</span><br></pre></td></tr></table></figure><p>会得到以下提示,按照步骤输入即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"># 部署配置</span><br><span class="line">  mkdir -p $HOME&#x2F;.kube</span><br><span class="line">  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br><span class="line"></span><br><span class="line">Alternatively, if you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</span><br><span class="line">#部署网络</span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"># 工作节点加入master中</span><br><span class="line">kubeadm join 192.168.77.210:6443 --token el7wfg.8xwwykz5hcn8y0ew \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:a6295f2bb6fff92c8b20e6506baa8f7f8a88abade29a3e29c9ff5382c3956f3b</span><br><span class="line">您在 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root 中有新邮件</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一步执行配置命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><h4 id="kubernate-集群网络配置"><a href="#kubernate-集群网络配置" class="headerlink" title="kubernate 集群网络配置"></a>kubernate 集群网络配置</h4><blockquote><p><a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart">https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart</a></p><p>左侧Install Calico] -&gt; Kubernetes-&gt;<a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart">Quickstart</a></p></blockquote><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果这一步执行不了,把域名换成指定的ip地址配置在hosts里面  域名ip查询链接链接：http:&#x2F;&#x2F;ip.tool.chinaz.com&#x2F;  或者把文件下载到本地计算机再上传到服务器里面，不需要改什么东西</span><br><span class="line">kubectl create -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;projectcalico&#x2F;calico&#x2F;v3.24.1&#x2F;manifests&#x2F;tigera-operator.yaml</span><br></pre></td></tr></table></figure><p>第二步骤,下载该文件，如果文件下载不下来,可以使用如下已经下载好的文件</p><p><code>wget https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/custom-resources.yaml</code></p><p>custom-resources.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This section includes base Calico installation configuration.</span></span><br><span class="line"><span class="comment"># For more information, see: https://projectcalico.docs.tigera.io/master/reference/installation/api#operator.tigera.io/v1.Installation</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">operator.tigera.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Installation</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># Configures Calico networking.</span></span><br><span class="line">  <span class="attr">calicoNetwork:</span></span><br><span class="line">    <span class="comment"># <span class="doctag">Note:</span> The ipPools section cannot be modified post-install.</span></span><br><span class="line">    <span class="attr">ipPools:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">blockSize:</span> <span class="number">26</span></span><br><span class="line">      <span class="attr">cidr:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span>  <span class="comment"># 更改为自己的网段</span></span><br><span class="line">      <span class="attr">encapsulation:</span> <span class="string">VXLANCrossSubnet</span></span><br><span class="line">      <span class="attr">natOutgoing:</span> <span class="string">Enabled</span></span><br><span class="line">      <span class="attr">nodeSelector:</span> <span class="string">all()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This section configures the Calico API server.</span></span><br><span class="line"><span class="comment"># For more information, see: https://projectcalico.docs.tigera.io/master/reference/installation/api#operator.tigera.io/v1.APIServer</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">operator.tigera.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">APIServer</span> </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span> </span><br><span class="line"><span class="attr">spec:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>修改13行为k8s初始化时自己设置的网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f  custom-resources.yaml</span><br><span class="line">kubectl get ns #查看命名空间calio-system</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看节点是否加入了calico网络中去</span></span><br><span class="line">watch kubectl get pods -n calico-system</span><br><span class="line"><span class="meta">#</span><span class="bash"> 出现如下提示,网络就已经可以了</span></span><br><span class="line">Every 2.0s: kubectl get pods -n calico-system                                                                           Mon Oct 10 18:33:12 2022</span><br><span class="line"></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">calico-kube-controllers-78687bb75f-4j7f5   1/1     Running   0          5m48s</span><br><span class="line">calico-node-575vz                          1/1     Running   0          5m49s</span><br><span class="line">calico-typha-5978d86859-gfnwb              1/1     Running   0          5m49s</span><br><span class="line">csi-node-driver-drqb2                      2/2     Running   0          3m29s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果某些节点一直处于初始化节点，需要把污点取消</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/control-plane-node-role.kubernetes.io/master-</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">官网下载地址：</span><br><span class="line">https:&#x2F;&#x2F;docs.projectcalico.org&#x2F;v3.24.1&#x2F;manifests&#x2F;calico.yaml</span><br><span class="line">github地址：</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;projectcalico&#x2F;calico</span><br><span class="line"></span><br><span class="line">docker pull calico&#x2F;cni:v3.24.1</span><br><span class="line">docker pull calico&#x2F;pod2daemon-flexvol:v3.24.1</span><br><span class="line">docker pull calico&#x2F;node:v3.24.1</span><br><span class="line">docker pull calico&#x2F;kube-controllers:v3.24.1</span><br></pre></td></tr></table></figure><h4 id="安装calio客户端"><a href="#安装calio客户端" class="headerlink" title="安装calio客户端"></a>安装calio客户端</h4><blockquote><p><a href="https://projectcalico.docs.tigera.io/maintenance/clis/calicoctl/install">https://projectcalico.docs.tigera.io/maintenance/clis/calicoctl/install</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl -L https:&#x2F;&#x2F;github.com&#x2F;projectcalico&#x2F;calico&#x2F;releases&#x2F;download&#x2F;v3.24.1&#x2F;calicoctl-linux-amd64 -o calicoctl</span><br><span class="line">mv calicoctl &#x2F;usr&#x2F;bin</span><br><span class="line"># 添加可执行权限</span><br><span class="line">chmod +x &#x2F;usr&#x2F;bin&#x2F;calicoctl </span><br><span class="line"></span><br><span class="line">ls -l &#x2F;usr&#x2F;bin&#x2F;calicoctl </span><br><span class="line"># 查看版本</span><br><span class="line">calicoctl version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">效果如下：通过宿主机下面的隐藏文件，获取节点</span><br><span class="line">[root@k8s-master01 calicodir]# DATASTORE_TYPE&#x3D;kubernetes KUBECONFIG&#x3D;~&#x2F;.kube&#x2F;config calicoctl get nodes</span><br><span class="line">NAME</span><br><span class="line">k8s-master01</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 calicodir]#</span><br></pre></td></tr></table></figure><h4 id="在k8s集群工作节点中添加"><a href="#在k8s集群工作节点中添加" class="headerlink" title="在k8s集群工作节点中添加"></a>在k8s集群工作节点中添加</h4><p>k8s-worker01节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-worker02 ~]# kubeadm join 192.168.77.210:6443 --token el7wfg.8xwwykz5hcn8y0ew \</span><br><span class="line">&gt;         --discovery-token-ca-cert-hash sha256:a6295f2bb6fff92c8b20e6506baa8f7f8a88abade29a3e29c9ff5382c3956f3b</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>k8s-worker02节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-worker01 ~]# kubeadm join 192.168.77.210:6443 --token el7wfg.8xwwykz5hcn8y0ew \</span><br><span class="line">&gt;         --discovery-token-ca-cert-hash sha256:a6295f2bb6fff92c8b20e6506baa8f7f8a88abade29a3e29c9ff5382c3956f3b</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在master节点执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master01 &#x2F;]# kubectl get nodes</span><br><span class="line">NAME           STATUS     ROLES                  AGE     VERSION</span><br><span class="line">k8s-master01   Ready      control-plane,master   5h41m   v1.21.0</span><br><span class="line">k8s-worker01   NotReady   &lt;none&gt;                 103s    v1.21.0</span><br><span class="line">k8s-worker02   NotReady   &lt;none&gt;                 98s     v1.21.0</span><br><span class="line"></span><br><span class="line">网络的初始化完成，需要一些时间，可以通过如下命令查询</span><br><span class="line">[root@k8s-master01 &#x2F;]# kubectl get pods -n calico-system</span><br><span class="line">NAME                                       READY   STATUS              RESTARTS   AGE</span><br><span class="line">calico-kube-controllers-78687bb75f-4j7f5   1&#x2F;1     Running             0          15m</span><br><span class="line">calico-node-575vz                          1&#x2F;1     Running             0          15m</span><br><span class="line">calico-node-d686n                          0&#x2F;1     Init:0&#x2F;2            0          2m36s</span><br><span class="line">calico-node-t2585                          0&#x2F;1     Init:0&#x2F;2            0          2m41s</span><br><span class="line">calico-typha-5978d86859-gfnwb              1&#x2F;1     Running             0          15m</span><br><span class="line">calico-typha-5978d86859-qk2mt              0&#x2F;1     ContainerCreating   0          2m30s</span><br><span class="line">csi-node-driver-drqb2                      2&#x2F;2     Running             0          13m</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init 初始化日志中会有kubeadm join 复制在worker节点中执行</span><br><span class="line"># 查看节点是否加入了calico网络中去</span><br><span class="line">DATASTORE_TYPE&#x3D;kubernetes KUBECONFIG&#x3D;~&#x2F;.kube&#x2F;config calicoctl get nodes</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="完全卸载k8s"><a href="#完全卸载K8s" class="headerlink" title="完全卸载K8s"></a>完全卸载K8s</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset -f</span><br><span class="line">modprobe -r ipip</span><br><span class="line">rm -rf ~&#x2F;.kube&#x2F;</span><br><span class="line">rm -rf &#x2F;etc&#x2F;kubernetes&#x2F;</span><br><span class="line">rm -rf &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kubelet.service.d</span><br><span class="line">rm -rf &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kubelet.service</span><br><span class="line">rm -rf &#x2F;usr&#x2F;bin&#x2F;kube*</span><br><span class="line">rm -rf &#x2F;etc&#x2F;cni</span><br><span class="line">rm -rf &#x2F;opt&#x2F;cni</span><br><span class="line">rm -rf &#x2F;var&#x2F;lib&#x2F;etcd</span><br><span class="line">rm -rf &#x2F;var&#x2F;etcd</span><br><span class="line">yum clean all</span><br><span class="line">yum remove kube*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、杀死运行的容器：</span><br><span class="line"></span><br><span class="line"># docker kill $(docker ps -a -q)</span><br><span class="line"></span><br><span class="line">2、删除所有容器：</span><br><span class="line"></span><br><span class="line"># docker rm $(docker ps -a -q)</span><br><span class="line"></span><br><span class="line">3、强制删除所有镜像：</span><br><span class="line"></span><br><span class="line"># docker rmi -f $(docker images -q)</span><br></pre></td></tr></table></figure><h3 id="报错问题记录"><a href="#报错问题记录" class="headerlink" title="报错问题记录"></a>报错问题记录</h3><h4 id="k8s安装node加入到节点错误running-pre-flight-checks"><a href="#K8S安装node加入到节点错误Running-pre-flight-checks" class="headerlink" title="K8S安装node加入到节点错误Running pre-flight checks"></a>K8S安装node加入到节点错误Running pre-flight checks</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.时间不同步</span><br><span class="line">2.token过期</span><br><span class="line">3.master主节点防火墙没有关闭</span><br></pre></td></tr></table></figure><h4 id="kubectl-join-生成"><a href="#kubectl-join-生成" class="headerlink" title="kubectl join 生成"></a>kubectl join 生成</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create --ttl 0 --print-join-command</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kubenates-集群部署方式&quot;&gt;&lt;a href=&quot;#Kubenates-集群部署方式&quot; class=&quot;headerlink&quot; title=&quot;Kubenates 集群部署方式&quot;&gt;&lt;/a&gt;Kubenates 集群部署方式&lt;/h1&gt;&lt;h2 id=&quot;kubeadm部署</summary>
      
    
    
    
    <category term="云原生" scheme="https://lswisdom.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="kubernetes" scheme="https://lswisdom.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装</title>
    <link href="https://lswisdom.github.io/posts/708881443/"/>
    <id>https://lswisdom.github.io/posts/708881443/</id>
    <published>2022-10-29T07:01:26.000Z</published>
    <updated>2022-10-29T14:18:01.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h3 id="1配置docker安装"><a href="#1-配置docker安装" class="headerlink" title="1.配置docker安装"></a>1.配置docker安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># step 1: 安装必要的一些系统工具</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"># Step 2: 添加软件源信息</span><br><span class="line">sudo yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line"># Step 3: 更新并安装 Docker-CE</span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"># Step 4: 开启Docker服务</span><br><span class="line">sudo service docker start</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2配置镜像加速器"><a href="#2-配置镜像加速器" class="headerlink" title="2.配置镜像加速器"></a>2.配置镜像加速器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;xxxx.mirror.aliyuncs.com&quot;]  # 配置自己的阿里云进行站</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;Docker安装&lt;/h1&gt;&lt;h3 id=&quot;1配置docker安装&quot;&gt;&lt;a href=&quot;#1-配置docker安装&quot; clas</summary>
      
    
    
    
    <category term="云原生" scheme="https://lswisdom.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="docker" scheme="https://lswisdom.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>VUE基本使用和的组件介绍</title>
    <link href="https://lswisdom.github.io/posts/1082886779/"/>
    <id>https://lswisdom.github.io/posts/1082886779/</id>
    <published>2021-08-20T13:37:58.000Z</published>
    <updated>2022-10-30T03:01:37.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue的简单使用一"><a href="#Vue的简单使用一" class="headerlink" title="Vue的简单使用一"></a>Vue的简单使用一</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Vue是一款渐进式的JavaScript框架,作者<strong>尤雨溪(Evan You)</strong><br>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>更加轻量20kb min +gzip</li><li>渐进式框架</li><li>响应式的更新机制</li><li>学习成本低</li></ul><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p>vue 官网地址：<a href="https://cn.vuejs.org/v2/guide/#Vue-js-%E6%98%AF%E4%BB%80%E4%B9%88">https://cn.vuejs.org/v2/guide/#Vue-js-%E6%98%AF%E4%BB%80%E4%B9%88</a><br>安装分为两个版本,开发版本和生成版本,如下图所示：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/01vue%E5%AE%89%E8%A3%85.png?versionId=CAEQGxiBgMCI9q6P2xciIDZlMjM4YmM1Njg5ZjQ3MGJiYzcwOWFhZDM1MzQ4MmYw"></p><h2 id="helloworld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>开发工具vscode<br>新建一个html文件,输入html:5 快速生成一个模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--双括号用来显示变量 双括号还支持表达式如：&#123;&#123;message+message&#125;&#125; ,但是不支持定义变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125; &#123;&#123; message + message &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 动态解析v-bind   可以简写为:id</span></span><br><span class="line"><span class="comment">        v-bind  用来绑定一个动态的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-if 和 v-else 和js中的if else作用是相似的    v-show 是否显示按钮--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-for对应这js中的循环操作 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;!item.del_flag&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: line-through;&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;!item.del_flag&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入CDN 文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    // 直接下载并用 <span class="tag">&lt;<span class="name">script</span>&gt;</span> 标签引入，Vue 会被注册为一个全局变量</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,   <span class="comment">// el元素用来指定一个DOM节点。div标签使用是ID,所以这里使用警号</span></span></span><br><span class="line"><span class="javascript">        data: &#123;        <span class="comment">// data表示数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;hello world&#x27;</span>,</span></span><br><span class="line">            list: [&#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;标题1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                del_flag: <span class="literal">false</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="javascript">                    title: <span class="string">&#x27;标题2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    del_flag: <span class="literal">true</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。可以打开你的浏览器的 JavaScript 控制台 并修改 vm.message 的值，你将看到上例相应地更新。<br><code>v-bind</code> attribute 被称为指令。指令带有前缀<code> v-</code>，以表示它们是 Vue 提供的特殊 attribute。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>控制切换一个元素</p><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>指令可以绑定数组的数据来渲染一个项目列表</p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法,例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-on 绑定一个点击时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;findUser&quot;</span>&gt;</span> 反转message信息 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入CDN 文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app2&#x27;</span>,    <span class="comment">// el用来定义元素</span></span></span><br><span class="line"><span class="javascript">        data:&#123;      <span class="comment">// data用来定义数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;Hello Vue.js!&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        methods: &#123;   <span class="comment">//methods用来定义方法</span></span></span><br><span class="line"><span class="javascript">            findUser: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.message = <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。</p><h3 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h3><p>下图是官网提供的声明周期图示<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/lifecycle.png?versionId=CAEQGxiBgIDp_pyf2xciIGY1M2M2N2IxNGMzODRkMTlhMDJhNjQzNzBjOTlhZGVi"></p><h3 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入CDN 文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Vue的声明周期演示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue对象创建的时候，需要传入一个对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 在实例初始化之后,数据观测(data observer) 和 event/watcher 事件配置之前调用</span></span></span><br><span class="line"><span class="javascript">        beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;beforeCreate&#x27;</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 在实例创建过程后立即被调用</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 在这一步,实例已完成以下配置，数据观测(data  observer) 属性和方法的运算, watch/event 事件回调</span></span></span><br><span class="line"><span class="javascript">        created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;created&#x27;</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 在挂在开始之前被调用,相关的渲染函数首次被调用</span></span></span><br><span class="line"><span class="javascript">        beforeMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;beforeMount&#x27;</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// el 被新建的vm.$el 替换 挂在成功</span></span></span><br><span class="line"><span class="javascript">        mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;mounted&#x27;</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 数据更新前调用</span></span></span><br><span class="line"><span class="javascript">        beforeUpdate:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;beforeUpdate&#x27;</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 组件Dom已经更新</span></span></span><br><span class="line"><span class="javascript">        updated :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;updated&#x27;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 3s之后把msg的属性值从hi vue 替换为change</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        vm.msg = <span class="string">&quot;chang..........&quot;</span>;</span></span><br><span class="line">    &#125;,3000)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>演示效果如下，可以看到控制台函数的一个打印顺序<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C.png?versionId=CAEQGxiBgMC4kKKf2xciIDBiMmVhMjc5OWUwMjRhYzE5OGU2ZDA4MDBkMTE2ODhh"></p><h2 id="vue组件"><a href="#VUE组件" class="headerlink" title="VUE组件"></a>VUE组件</h2><h3 id="組件是什么"><a href="#組件是什么" class="headerlink" title="組件是什么"></a>組件是什么</h3><p>允许我们使用小型、独立和通常可复用的组件构建大型应用,在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例<br>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。为了能在模板中使用，这些组件必须先注册以便 <code>Vue</code> 能够识别。这里有两种组件的注册类型：<code>全局注册</code>和<code>局部注册</code>。至此，我们的组件都只是通过<br><code>Vue.component</code>全局注册的：全局注册的组件可以用在其被注册之后的任何 (通过 new Vue) 新创建的 Vue 根实例，也包括其组件树中的所有子组件的模板中。组织结构图如下：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/3%E7%B5%84%E4%BB%B6%E7%9A%84%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84%E5%9B%BE.png?versionId=CAEQGxiBgMCXrMib2xciIDM2NWMwMmYwMWY2YjQyMmI5ZTJlM2Y3YTZiNjc3ODM0"></p><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p><code>Vue.component</code> :组件固定格式：包含两个参数，参数一：组件的名称,该值必须唯一。参数二：组建的对象。里面可以包含方法、数据<br><code>template</code> : 组件里面需要有一个模板，这个参数表示组件的模板。需要复用的html模板<br><code>props</code> : 可选操作,Prop 是你可以在组件上注册的一些自定义 attribute。当一个值传递给一个 <code>prop attribute</code> 的时候，它就变成了那个组件实例的一个 <code>property</code> 一个组件默认可以拥有<code>任意数量</code>的 prop，任何值都可以传递给任何 prop</p><p>组件之间也可以互相包含,模板如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;my-component-name&#x27;, &#123;</span><br><span class="line">  // ... options ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="基本demo"><a href="#基本Demo" class="headerlink" title="基本Demo"></a>基本Demo</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入CDN 文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;ul&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;todo-item v-for=&quot; item in list &quot;  :title=&quot;item.title&quot;  :del_flag=&quot;item.del_flag&quot;&gt;&lt;/todo-item&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/ul&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// todo-itme:表示组件的名称</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#123;&#125;表示组件的对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// template 表示组件的模板</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo-item&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 为了进行复用，模板中定义两个变量。定义一个title 和一个del_flag,并通过props 进行属性传播</span></span></span><br><span class="line">        props:&#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 定义属性名称：属性类型</span></span></span><br><span class="line"><span class="javascript">            title: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 定义一个del_flag属性，并设置为Boolean 默认值为false</span></span></span><br><span class="line">            del_flag:&#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 注意：组件模板必须包含一个根元素，否则控制台会报错</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:&#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">iv</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;!del_flag&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>\n&#x27; +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            &#x27;            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: line-through;&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>\n&#x27; +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            &#x27;            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;!del_flag&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27; ,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义data类型返回数据的时候，最好使用一个自定义函数进行返回</span></span></span><br><span class="line"><span class="javascript">        data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo-list&#x27;</span>,&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 组件包含组件的</span></span></span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27; &lt;ul&gt;\n&#x27;</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">            &#x27;        <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">&quot; item in list &quot;</span>  <span class="attr">:title</span>=<span class="string">&quot;item.title&quot;</span>  <span class="attr">:del_flag</span>=<span class="string">&quot;item.del_flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span>\n&#x27; +</span></span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;    &lt;/ul&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                list: [&#123;</span><br><span class="line"><span class="javascript">                    title: <span class="string">&#x27;标题1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    del_flag: <span class="literal">false</span></span></span><br><span class="line">                &#125;,&#123;</span><br><span class="line"><span class="javascript">                    title: <span class="string">&#x27;标题2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    del_flag: <span class="literal">true</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建一个Vue的实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       <span class="comment">// el 元素标签，绑定一个div</span></span></span><br><span class="line"><span class="javascript">       el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;这是一个Vue的组件demo&#x27;</span>,</span></span><br><span class="line">            list: [&#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;标题1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                del_flag: <span class="literal">false</span></span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;标题2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                del_flag: <span class="literal">true</span></span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="练习2多元素属性"><a href="#练习2：多元素属性" class="headerlink" title="练习2：多元素属性"></a>练习2：多元素属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入CDN 文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里传入了多个元素,假设有10个元素的话，一个个的书写就很麻烦，组件对象中编写的时候，也需要定义属性的名称和类别 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">&quot; item in list &quot;</span>  <span class="attr">v-bind:title</span>=<span class="string">&quot;item.title&quot;</span>  <span class="attr">v-bind:del_flag</span>=<span class="string">&quot;item.del_flag&quot;</span>  <span class="attr">v-bind:content</span>=<span class="string">&quot;item.content&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// todo-itme:表示组件的名称</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#123;&#125;表示组件的对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// template 表示组件的模板</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo-item&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 为了进行复用,如果变量有很多的时候,可知直接传入一个变量,取名叫做item</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// props:[&#x27;item&#x27;],</span></span></span><br><span class="line">        props:&#123;</span><br><span class="line"><span class="javascript">            title: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            del_flag: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">            content: <span class="built_in">String</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 注意：组件模板必须包含一个根元素，否则控制台会报错</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:&#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">iv</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;!del_flag&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>\n&#x27; +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            &#x27;            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: line-through;&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>\n&#x27; +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            &#x27;            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;!del_flag&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">content</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27; ,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义data类型返回数据的时候，最好使用一个自定义函数进行返回</span></span></span><br><span class="line"><span class="javascript">        data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 创建一个Vue的实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// el 元素标签，绑定一个div</span></span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;这是一个Vue的组件demo&#x27;</span>,</span></span><br><span class="line">            list: [&#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;标题1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                del_flag: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                content: <span class="string">&quot;测试对象绑定1&quot;</span></span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;标题2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                del_flag: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                content: <span class="string">&quot;测试对象绑定2&quot;</span></span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="练习3-组件对象传入"><a href="#练习3-组件对象传入" class="headerlink" title="练习3 组件对象传入"></a>练习3 组件对象传入</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 引入CDN 文件--&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; message&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;todo-item v-<span class="keyword">for</span>=<span class="string">&quot; item in list &quot;</span>  v-bind:item=<span class="string">&quot;item&quot;</span></span><br><span class="line">            &gt;&lt;/todo-item&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// todo-itme:表示组件的名称</span></span><br><span class="line">    <span class="comment">// &#123;&#125;表示组件的对象</span></span><br><span class="line">    <span class="comment">// template 表示组件的模板</span></span><br><span class="line">    Vue.component(<span class="string">&#x27;todo-item&#x27;</span>,&#123;</span><br><span class="line">        <span class="comment">// 为了进行复用,如果变量有很多的时候,可知直接传入一个变量,取名叫做item</span></span><br><span class="line">        props:[<span class="string">&#x27;item&#x27;</span>],</span><br><span class="line">        <span class="comment">// 注意：组件模板必须包含一个根元素，否则控制台会报错</span></span><br><span class="line">        template:<span class="string">&#x27;&lt;div&gt;&lt;/iv&gt; &lt;span v-if=&quot;!item.del_flag&quot;&gt;&#123;&#123;item.title &#125;&#125;&lt;/span&gt;\n&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;            &lt;span v-else style=&quot;text-decoration: line-through;&quot;&gt;&#123;&#123;item.title &#125;&#125;&lt;/span&gt;\n&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;            &lt;button v-show=&quot;!item.del_flag&quot;&gt;删除&lt;/button&gt;&lt;p&gt;&#123;&#123;item.content&#125;&#125;&lt;/p&gt;&lt;/div&gt;&#x27;</span> ,</span><br><span class="line">        <span class="comment">// 定义data类型返回数据的时候，最好使用一个自定义函数进行返回</span></span><br><span class="line">        data: function () &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 创建一个Vue的实例</span></span><br><span class="line">    let vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="comment">// el 元素标签，绑定一个div</span></span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;这是一个Vue的组件demo&#x27;</span>,</span><br><span class="line">            list: [&#123;</span><br><span class="line">                title: <span class="string">&#x27;标题1&#x27;</span>,</span><br><span class="line">                del_flag: <span class="keyword">false</span>,</span><br><span class="line">                content: <span class="string">&quot;测试对象绑定1&quot;</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                title: <span class="string">&#x27;标题2&#x27;</span>,</span><br><span class="line">                del_flag: <span class="keyword">true</span>,</span><br><span class="line">                content: <span class="string">&quot;测试对象绑定2&quot;</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h4><ul><li>组件模板需要有,组件模板必须包含一个根元素，否则控制台会报错.Vue 会显示一个错误，并解释道 <code>every component must have a single root element</code> (每个组件必须只有一个根元素)。你可以将模板的内容包裹在一个父元素内，来修复这个问题</li><li>组件之间可以相互包含</li><li>定义data类型返回数据的时候，最好使用一个自定义函数进行返回,增加复用性</li><li>组件定义后之后，在使用的地方，可以直接编写组件的标签进行使用 <todo-list></todo-list></li><li>练习2 和练习3 根据参数的传入方式不一样。属性<code>props</code> 和模板<code>template</code> 接收参数的格式也不一样</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue的简单使用一&quot;&gt;&lt;a href=&quot;#Vue的简单使用一&quot; class=&quot;headerlink&quot; title=&quot;Vue的简单使用一&quot;&gt;&lt;/a&gt;Vue的简单使用一&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="前端" scheme="https://lswisdom.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://lswisdom.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>线程与并发基础</title>
    <link href="https://lswisdom.github.io/posts/221454721/"/>
    <id>https://lswisdom.github.io/posts/221454721/</id>
    <published>2021-08-18T16:09:14.000Z</published>
    <updated>2022-10-30T03:04:44.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-线程与并发基础"><a href="#01-线程与并发基础" class="headerlink" title="01 线程与并发基础"></a>01 线程与并发基础</h1><h2 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h2><p><code>线程</code>： 线程是CPU分配的基本单位</p><p><code>进程</code> ： 进程是进行资源分配和调度的基本单位。</p><p><code>进程与线程关系</code>：线程是进程的一个执行路径 ，一个进程中至少包含一个线程，进程中的多个线程共享进程中的资源。</p><h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><p><code>同步</code>和<code>异步</code>  通常用来形容一次方法调用。</p><p><code>同步</code>： 同步方法一旦调用开始，调用者必须等到方法调用返回后，才能继续后续的行为。</p><p><code>异步</code>： 异步方法调用更像一个消息传递，一旦开始，方法调用会立即返回，调用者才能继续后续操作。异常方法通常会在另外一个线程中执行。</p><h2 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h2><p><code>临界区</code> ：临界区用来表示一种公共资源或者说是共享数据，可以被多个线程使用，但是每一次，都只能有一个线程来使用它，一旦临界资源被占用，其他线程想要使用这个资源，就必须进行等待。在并行程序中，临界资源是需要保护的资源。</p><h2 id="线程定义"><a href="#线程定义" class="headerlink" title="线程定义"></a>线程定义</h2><h3 id="多线程间的相互影响"><a href="#多线程间的相互影响" class="headerlink" title="多线程间的相互影响"></a>多线程间的相互影响</h3><p><code>线程阻塞(Blocking)</code> : 一个线程占用了临界区的资源，那么其他所有需要这个资源的线程就必须在这个临界区中等待。等待会导致线程挂起，这种情况被称为线程阻塞。如果占用资源的线程一直不愿意释放资源，那么其他阻塞在这个临界区的线程都不能工作。</p><p><code>线程非阻塞(Non-Blocking)</code> ：没有一个线程可以妨碍其他线程的执行。所有的线程都会尝试不断执行。</p><h3 id="多线程的活跃性"><a href="#多线程的活跃性" class="headerlink" title="多线程的活跃性"></a>多线程的活跃性</h3><p>如果出现死锁、饥饿、活锁中的任何一种，那么线程可能就不再活跃了，很难执行下去了。</p><p><code>线程死锁(DeadLock)</code> ： 线程死锁是指两个或两个以上的线程互相持有对方所需要的资源，由于synchronized的特性，一个线程持有一个资源，或者说获得一个锁，在该线程释放这个锁之前，其它线程是获取不到这个锁的，而且会一直死等下去，因此这便造成了死锁。</p><p><code>线程饥饿(Starvation)</code> ： 饥饿是指某一个或者多个线程由于种种原因无法获得所需要的资源，导致一直无法执行。</p><p>情况一 ：例如它的线程优先级可能非常低，而高优先级的线程不断抢占它需要的资源，导致低优先级的工作无法执行。</p><p>情况二 ：某一个线程一直占着关键资源不放手，导致其他需要这个资源的线程无法执行，这种情况也是线程饥饿的一种。</p><p><strong>线程饥饿</strong>还是有可能在未来的某一段时间内解决的。比如高优先级的线程已经执行完，不再疯狂的创建线程。</p><p><code>线程活锁(LiveLock)</code> ：是指多个线程秉承着”谦让的”原则，主动将资源释放给其他人使用，那么就会出现资源在两个线程中不断的跳动，而没有一个线程可以同时拿到所有的资源而正常执行。这种情况就是活锁</p><h2 id="并发级别"><a href="#并发级别" class="headerlink" title="并发级别"></a>并发级别</h2><p>由于<code>临界区</code>的存在,多线程之间的并发控制必须受到控制。并发的级别分为五大类。<code>阻塞</code> 、<code>无饥饿</code> 、<code>无障碍</code> 、<code>无锁</code> 、<code>无等待</code></p><p><code>阻塞</code> ： 一个线程是阻塞的，那么其他线程释放资源之前，当前线程无法继续执行。当我们使用synchronized关键字或者重入锁的时候，我们得到的就是阻塞的线程。</p><p><code>无饥饿</code> ：如果线程之间是有优先级的，那么线程的调用总是会倾向于高优先级的线程。也就是说，对于一个资源的分配是不公平的。对于非公平的锁来说，系统允许高优先级的线程插队。这样有可能导致低优先级的线程产生<code>饥饿</code>  .但是如果锁是公平的，那么饥饿就不会产生，不管新来的线程优先级有多高，要想获取到资源，就必须排队，所有的线程都会有机会执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-线程与并发基础&quot;&gt;&lt;a href=&quot;#01-线程与并发基础&quot; class=&quot;headerlink&quot; title=&quot;01 线程与并发基础&quot;&gt;&lt;/a&gt;01 线程与并发基础&lt;/h1&gt;&lt;h2 id=&quot;线程概念&quot;&gt;&lt;a href=&quot;#线程概念&quot; class=&quot;head</summary>
      
    
    
    
    <category term="JDK" scheme="https://lswisdom.github.io/categories/JDK/"/>
    
    
    <category term="线程" scheme="https://lswisdom.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Es简介</title>
    <link href="https://lswisdom.github.io/posts/221454123/"/>
    <id>https://lswisdom.github.io/posts/221454123/</id>
    <published>2021-08-18T16:09:14.000Z</published>
    <updated>2022-10-30T04:10:30.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elasticsearch的简介"><a href="#ElasticSearch的简介" class="headerlink" title="ElasticSearch的简介"></a>ElasticSearch的简介</h1><blockquote><p>注意： 本文及接下来的文章中,我使用的ElasticSearch是<code>7.12.0</code>  的版本，<code>ElasticSearch7</code> 和 <code>ElasticSearch6</code> 是有些区别的，没有了<code>type</code>的概念，语法使用上有一定的区别</p><p><code>7.12.0</code> 官方文档的地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.12/index.html</a></p><p><code>7.12.0</code> kibana<a href="https://www.elastic.co/guide/en/kibana/7.12/kuery-query.html">https://www.elastic.co/guide/en/kibana/7.12/kuery-query.html</a></p><p><code>Rest API </code>地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/rest-apis.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.12/rest-apis.html</a></p><p><code>springboot data elasticsearch</code> ： <a href="https://spring.io/projects/spring-data-elasticsearch">https://spring.io/projects/spring-data-elasticsearch</a></p></blockquote><h2 id="1elasticsearch基本概念"><a href="#1-ElasticSearch基本概念" class="headerlink" title="1.ElasticSearch基本概念"></a>1.ElasticSearch基本概念</h2><h3 id="11-elasticsearch-是什么"><a href="#1-1-ElasticSearch-是什么" class="headerlink" title="1.1 ElasticSearch 是什么"></a>1.1 ElasticSearch 是什么</h3><p><code>Elasticsearch</code>  是一个<code>分布式</code>、<code>RESTful 风格</code> 的<code>搜索和数据分析引</code>擎，能够解决不断涌现出的各种用例。 是 Elastic Stack 的核心。</p><p> <code>Logstash </code>和<code>Beats </code>有助于收集、聚合和丰富您的数据并将其存储在 Elasticsearch 中.</p><p><code>Kibana</code> 使您能够以交互方式探索、可视化和共享对数据的见解，并管理和监控堆栈。</p><p>Elasticsearch 为所有类型的数据提供近乎实时的搜索和分析。无论您拥有结构化或非结构化文本、数值数据还是地理空间数据，Elasticsearch 都可以以支持快速搜索的方式高效地存储和索引它</p><h3 id="12-elasticsearch-能用来干什么"><a href="#1-2-ElasticSearch-能用来干什么" class="headerlink" title="1.2 ElasticSearch 能用来干什么"></a>1.2 ElasticSearch 能用来干什么</h3><ul><li><p><strong>免费开放的日志监测</strong>。Elastic Stack（旧称 ELK Stack）是深受欢迎的免费开放日志平台。将您的数据索引到 Elasticsearch 中并在 Kibana 中进行可视化，分分钟搞定。</p></li><li><p><strong>Elastic Metrics</strong> ： 开源基础架构监测。</p></li><li><p><strong>APM</strong> :  精确查看您的应用程序都在哪里耗时了，然后便可快速修复问题，</p></li><li><p><strong>Elastic Uptime</strong> ：免费开源的运行状态监测</p></li><li><p><strong>Elastic Site Search</strong> ： 轻松爬取网站内容并实现搜索功能</p></li><li><p><strong>ELASTIC MAPS</strong>：使用 Elastic 地图分析您的地理空间数据。对多个索引进行可视化并将其作为单一视图中的特有图层，方便您查询并关联自己 Elasticsearch 中的全部数据。</p></li><li><p><strong>SIEM</strong> : 对不断变化的威胁进行检测、调查和响应。利用云规模级的所有数据源。在主机层实现更好的控制。实施现代化安全用例，并迅速扩展。通过免费且开放的 Elastic 安全提高运营成熟度。</p></li><li><p><strong>Elastic App Search</strong> : 轻松实现高级搜索</p></li><li><p><strong>Elastic Workplace Search</strong>: </p></li><li><p><strong>Endpoint security</strong> : Elastic 安全可阻止恶意软件和勒索软件，推动集中式搜寻和检测，并支持交互式响应。</p></li></ul><p>上面是官网介绍的一些功能,有兴趣同学，可以自己百度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;elasticsearch的简介&quot;&gt;&lt;a href=&quot;#ElasticSearch的简介&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch的简介&quot;&gt;&lt;/a&gt;ElasticSearch的简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;注</summary>
      
    
    
    
    <category term="搜索引擎" scheme="https://lswisdom.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="Es学习" scheme="https://lswisdom.github.io/tags/Es%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch索引学习</title>
    <link href="https://lswisdom.github.io/posts/221453123/"/>
    <id>https://lswisdom.github.io/posts/221453123/</id>
    <published>2021-08-18T16:09:14.000Z</published>
    <updated>2022-10-30T04:16:19.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="elasticsearch索引学习"><a href="#ElasticSearch索引学习" class="headerlink" title="ElasticSearch索引学习"></a>ElasticSearch索引学习</h1><p>作者：李帅</p><p>[TOC]</p><h2 id="1索引概念"><a href="#1-索引概念" class="headerlink" title="1.索引概念"></a>1.索引概念</h2><h2 id="2-索引基本操作"><a href="#2-索引基本操作" class="headerlink" title="2 索引基本操作"></a>2 索引基本操作</h2><blockquote><p>文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices.html?baymax=rec&amp;rogue=rec-1&amp;elektra=guide">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices.html?baymax=rec&amp;rogue=rec-1&amp;elektra=guide</a></p></blockquote><h3 id="21-创建索引"><a href="#2-1-创建索引" class="headerlink" title="2.1 创建索引"></a>2.1 创建索引</h3><p>Elasticsearch采用Rest风格API，因此其API就是一次http请求，你可以用任何工具发起http请求</p><p>请求分为 <code>PUT</code>  <code> POST</code>  <code> GET</code>  <code> DELETE</code> </p><ul><li><p><code>GET</code> : 查询数据</p></li><li><p><code>POST</code> : 插入数据,也可以实现查询,查询条件复杂时,参数可以使用json</p></li><li><p><code>PUT </code>: 更新数据,实际上很多情况下 es 不是很清晰你到底要作什么,所有有时候添加也需要使用 PUT 请求,如果错了,会告诉我请求方式不对</p></li><li><p><code>DELETE</code> : 删除数据</p></li></ul><hr><h4 id="211创建索引的请求格式"><a href="#2-1-1创建索引的请求格式" class="headerlink" title="2.1.1创建索引的请求格式"></a>2.1.1创建索引的请求格式</h4><ul><li><p>请求方式：<code>PUT</code></p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：json格式</p></li></ul><p><code>索引的格式要求</code></p><p>**<code>&lt;index&gt;</code>**（必需，字符串）要创建的索引的名称。</p><p>索引名称必须满足以下条件：</p><ul><li>仅小写</li><li>不能包含<code>\</code>, <code>/</code>, <code>*</code>, <code>?</code>, <code>&quot;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>|</code>, <code> </code>（空格字符）, <code>,</code>,<code>#</code></li><li>7.0 之前的索引可以包含冒号 ( <code>:</code>)，但它已被弃用并且在 7.0+ 中不受支持</li><li>不能以<code>-</code>, <code>_</code>,开头<code>+</code></li><li>不能是<code>.</code>或<code>..</code></li><li>不能超过 255 个字节（注意它是字节，因此多字节字符将更快地计入 255 个限制）</li><li><code>.</code>不推荐使用以 开头的名称，插件管理的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-hidden">隐藏索引</a>和内部索引 除外</li></ul><p><strong><code>mappings</code></strong></p><p>（可选，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">映射对象</a>）索引中字段的映射。如果指定，此映射可以包括：</p><ul><li>字段名称</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html">字段数据类型</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html">映射参数</a></li></ul><p>请参阅<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">映射</a>。</p><p><strong><code>settings</code></strong></p><p>（可选，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings">索引设置对象</a>）<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings">索引的</a>配置选项。请参阅<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings">索引设置</a>。</p><p>其他略</p><h4 id="212-创建索引的请求demo"><a href="#2-1-2-创建索引的请求Demo" class="headerlink" title="2.1.2 创建索引的请求Demo"></a>2.1.2 创建索引的请求Demo</h4><p><strong>直接创建索引</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引</span><br><span class="line">PUT /ls_person</span><br></pre></td></tr></table></figure><p>执行结果如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;acknowledged&quot; : true,    # 表示是否在集群中成功创建索引</span><br><span class="line">  &quot;shards_acknowledged&quot; : true,  # 表示是否在超时之前为索引中的每个分片启动了所需数量的分片副本</span><br><span class="line">  &quot;index&quot; : &quot;ls_person&quot;    # 索引的日志</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现如下,表示索引创建成功了</p><p><strong>创建索引时设置<code>settings</code></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引时添加setting 设置</span><br><span class="line">PUT /ls_person_two</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    &quot;index&quot;: &#123;   #  index 可以不写</span><br><span class="line">      &quot;number_of_replicas&quot;: 1,  # 默认的备份数,也是 1 </span><br><span class="line">      &quot;number_of_shards&quot;: 1   # 分片数默认为1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建索引时指定索引的结构<code>mapping</code></strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#创建索引的映射</span><br><span class="line">PUT /ls_person_three?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;birthday&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;format&quot;</span>: [<span class="string">&quot;yyyy-MM-dd&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在kibana中查看结构如下：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/01%E7%9A%84%E7%B4%A2%E5%BC%95%E6%98%A0%E5%B0%84%E7%BB%93%E6%9E%9C.png?versionId=CAEQHRiBgID29v2f4BciIDllNTBiZGMzOGFjYjRiM2Q5NGEyZGExY2IxYmRlZmJk" alt="索引映射结果"></p><p>**创建索引时允许提供<code>别名</code> **</p><h4 id="213-创建索引的java代码演示"><a href="#2-1-3-创建索引的Java代码演示" class="headerlink" title="2.1.3 创建索引的Java代码演示"></a>2.1.3 创建索引的Java代码演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESCreateIndexDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(ESCreateIndexDemo.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 索引名称 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String index = <span class="string">&quot;ls_person_five811&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引测试类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建ES高级客户端</span></span><br><span class="line">        HttpHost httpHost = <span class="keyword">new</span> HttpHost(<span class="string">&quot;192.168.154.129&quot;</span>, <span class="number">9200</span>);</span><br><span class="line">        RestClientBuilder restClientBuilder = RestClient.builder(httpHost);</span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建索引请求</span></span><br><span class="line">        CreateIndexRequest createIndexRequest = <span class="keyword">new</span> CreateIndexRequest(index);</span><br><span class="line">        <span class="comment">// 参数1表示创建索引的请求 .</span></span><br><span class="line">        CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 如果创建的索引存在,会抛出索引已经存在的异常</span></span><br><span class="line">        <span class="comment">// 结果为true 表示创建成功了</span></span><br><span class="line">        logger.debug(<span class="string">&quot;创建结果:&quot;</span> + response.isAcknowledged());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="22-删除索引"><a href="#2-2-删除索引" class="headerlink" title="2.2 删除索引"></a>2.2 删除索引</h3><p>删除索引使用<code>DELETE</code>请求</p><p><code>语法</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE &#x2F;索引库名</span><br></pre></td></tr></table></figure><p><code>注意</code>删除索引会删除其<code>文档</code>、<code>分片</code>和<code>元数据</code></p><p><strong><code>&lt;index&gt;</code></strong>  （必需，字符串）要删除的索引的逗号分隔列表。</p><p>要删除所有索引，请使用<code>_all</code>或<code>*</code>。要禁止删除带有<code>_all</code>或 通配符表达式的索引，请将 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-management-settings.html#action-destructive-requires-name"><code>action.destructive_requires_name</code></a>集群设置设置为<code>true</code>。</p><p>设置为<code>true</code>时，表示您必须指定索引名称才能<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-index.html">删除索引</a>。无法<code>_all</code>使用通配符删除所有索引。</p><h4 id="221-删除索引的请求demo"><a href="#2-2-1-删除索引的请求Demo" class="headerlink" title="2.2.1 删除索引的请求Demo"></a>2.2.1 删除索引的请求Demo</h4><p>如果要删除多个索引,中间使用都好隔开</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /ls_person_three,ls_person_five,ls_person_three</span><br></pre></td></tr></table></figure><p>如下图,可以看到刚才创建的索引已经删除了</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/02%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95.png"></p><h4 id="222-删除索引通过java代码方式"><a href="#2-2-2-删除索引通过Java代码方式" class="headerlink" title="2.2.2 删除索引通过Java代码方式"></a>2.2.2 删除索引通过Java代码方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndexTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建Rest高级客户端</span></span><br><span class="line">    HttpHost httpHost = <span class="keyword">new</span> HttpHost(<span class="string">&quot;192.168.154.129&quot;</span>, <span class="number">9200</span>);</span><br><span class="line">    RestClientBuilder restClientBuilder = RestClient.builder(httpHost);</span><br><span class="line">    RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.创建删除索引请求</span></span><br><span class="line">    DeleteIndexRequest deleteIndexRequest = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;ls_person&quot;</span>, <span class="string">&quot;person&quot;</span>);</span><br><span class="line">    AcknowledgedResponse response = client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 执行结果为Ture表示创建成功  如果索引不存在,会抛出异常ElasticsearchStatusException</span></span><br><span class="line">    logger.info(<span class="string">&quot;执行结果：&quot;</span> + response.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除后在控制台查看如下：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/03%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95.png"></p><p>由此,可以看到,索引已经删除成功了</p><h3 id="23-获取索引"><a href="#2-3-获取索引" class="headerlink" title="2.3 获取索引"></a>2.3 获取索引</h3><p><code>Get</code> 请求可以帮我们查看索引信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;索引名称</span><br></pre></td></tr></table></figure><p>支持查询多个，<code>索引</code>和<code>别名</code>的逗号分隔列表。支持通配符 <code>*</code>或<code>_all</code>。</p><h4 id="231-获取索引的请求demo"><a href="#2-3-1-获取索引的请求Demo" class="headerlink" title="2.3.1 获取索引的请求Demo"></a>2.3.1 获取索引的请求Demo</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 获取单个索引</span><br><span class="line">GET ls_person1</span><br><span class="line"></span><br><span class="line"># 获取多个索引,中间使用逗号隔开</span><br><span class="line">GET ls_person1,ls_person2</span><br><span class="line"></span><br><span class="line">#使用通配符获取索引</span><br><span class="line">GET user*</span><br><span class="line"></span><br><span class="line"># 获取全部索引</span><br><span class="line">GET _all</span><br></pre></td></tr></table></figure><h4 id="232-获取索引的代码实现"><a href="#2-3-2-获取索引的代码实现" class="headerlink" title="2.3.2 获取索引的代码实现"></a>2.3.2 获取索引的代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getIndexTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建Rest高级客户端</span></span><br><span class="line">    HttpHost httpHost = <span class="keyword">new</span> HttpHost(<span class="string">&quot;192.168.154.129&quot;</span>, <span class="number">9200</span>);</span><br><span class="line">    RestClientBuilder restClientBuilder = RestClient.builder(httpHost);</span><br><span class="line">    RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line">    GetIndexRequest getIndexRequest = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;ls_person1&quot;</span>,<span class="string">&quot;ls_person2&quot;</span>);</span><br><span class="line">    GetIndexResponse response = client.indices().get(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    String[] indices = response.getIndices();</span><br><span class="line">    <span class="keyword">for</span> (String indexName : indices) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;查询出的索引名称：&quot;</span> + indexName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="24-检查索引是否存在"><a href="#2-4-检查索引是否存在" class="headerlink" title="2.4 检查索引是否存在"></a>2.4 检查索引是否存在</h3><p>检查<code>数据</code>、<code>索引</code>或<code>别名</code>是否存在。多个之间使用逗号隔开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEAD &lt;target&gt; </span><br></pre></td></tr></table></figure><h4 id="241-检查索引是否存在的请求demo"><a href="#2-4-1-检查索引是否存在的请求Demo" class="headerlink" title="2.4.1 检查索引是否存在的请求Demo"></a>2.4.1 检查索引是否存在的请求Demo</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 检查索引是否存在</span><br><span class="line">HEAD ls_person1</span><br></pre></td></tr></table></figure><p>返回值为<code>200</code>  表示存在 <code>404</code>  表示不存在,返回值格式不一样 如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">200 - OK  # 存在</span><br><span class="line">&#123;&quot;statusCode&quot;:404,&quot;error&quot;:&quot;Not Found&quot;,&quot;message&quot;:&quot;404 - Not Found&quot;&#125;  # 不存在,如果是多个索引,有一个不存在,结果就是404</span><br></pre></td></tr></table></figure><h4 id="242-检查索引是否存在的请求java实现"><a href="#2-4-2-检查索引是否存在的请求JAVA实现" class="headerlink" title="2.4.2  检查索引是否存在的请求JAVA实现"></a>2.4.2  检查索引是否存在的请求JAVA实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查索引是否存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkIndexExist</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建Rest高级客户端</span></span><br><span class="line">    HttpHost httpHost = <span class="keyword">new</span> HttpHost(<span class="string">&quot;192.168.154.129&quot;</span>, <span class="number">9200</span>);</span><br><span class="line">    RestClientBuilder restClientBuilder = RestClient.builder(httpHost);</span><br><span class="line">    RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line">    GetIndexRequest getIndexRequest = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;ls_person1&quot;</span>, <span class="string">&quot;ls_person1&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> exists = client.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 结果为ture表示存在,为false表示不存在</span></span><br><span class="line">    logger.info(<span class="string">&quot;索引是否存在结果：&quot;</span> + exists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="25-关闭索引"><a href="#2-5-关闭索引" class="headerlink" title="2.5 关闭索引"></a>2.5 关闭索引</h3><p><code>API</code>:</p><p>作用：不允许被关闭的索引进行任何的查询或者写入操作。无法索引文档或在封闭索引中搜索文档。这允许封闭索引不必维护用于索引或搜索文档的内部数据结构，从而减少集群上的开销。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; my-index-000001 &#x2F; _close </span><br></pre></td></tr></table></figure><p>封闭索引会消耗大量磁盘空间，这可能会导致托管环境出现问题。关闭索引可以通过集群设置 API 设置<code>cluster.indices.close.enable</code>为来禁用<code>false</code>。默认值为<code>true</code>.</p><h3 id="26-打开索引"><a href="#2-6-打开索引" class="headerlink" title="2.6 打开索引"></a>2.6 打开索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; my-index-000001 &#x2F; _open </span><br></pre></td></tr></table></figure><p>关闭索引被阻止进行读/写操作，并且不允许打开索引允许的所有操作。无法索引文档或在封闭索引中搜索文档。这允许封闭索引不必维护用于索引或搜索文档的内部数据结构，从而减少集群上的开销。</p><p>在打开或关闭索引时，master 负责重新启动索引分片以反映索引的新状态。然后分片将经历正常的恢复过程。打开/关闭索引的数据由集群自动复制，以确保始终安全地保留足够的分片副本。</p><h3 id="27-其他操作"><a href="#2-7-其他操作" class="headerlink" title="2.7 其他操作"></a>2.7 其他操作</h3><p>关于索引官网上还有一些其他操作，有兴趣的可以自行查看<code>索引的API</code></p><blockquote><p>API地址如下：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices.html?baymax=rec&amp;rogue=rec-1&amp;elektra=guide">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices.html?baymax=rec&amp;rogue=rec-1&amp;elektra=guide</a></p></blockquote><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/04%E7%B4%A2%E5%BC%95%E7%9A%84API.png"></p><h2 id="3-索引字段映射"><a href="#3-索引字段映射" class="headerlink" title="3 索引字段映射"></a>3 索引字段映射</h2><h3 id="31-创建索引时指定字段映射"><a href="#3-1-创建索引时指定字段映射" class="headerlink" title="3.1 创建索引时指定字段映射"></a>3.1 创建索引时指定字段映射</h3><h4 id="311-创建索引映射demo"><a href="#3-1-1-创建索引映射Demo" class="headerlink" title="3.1.1 创建索引映射Demo"></a>3.1.1 创建索引映射Demo</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#创建索引的映射</span><br><span class="line">PUT /ls_person?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;birthday&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;format&quot;</span>: [<span class="string">&quot;yyyy-MM-dd&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="312-创建索引映射demo的java实现"><a href="#3-1-2-创建索引映射Demo的Java实现" class="headerlink" title="3.1.2 创建索引映射Demo的Java实现"></a>3.1.2 创建索引映射Demo的Java实现</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建索引和指定索引的映射</span></span><br><span class="line"><span class="comment"> * PUT /ls_person20?pretty</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *   &quot;settings&quot;: &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;number_of_shards&quot;: 1</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   &quot;mappings&quot;: &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;properties&quot;: &#123;</span></span><br><span class="line"><span class="comment"> *       &quot;name&quot;: &#123;</span></span><br><span class="line"><span class="comment"> *         &quot;type&quot;: &quot;text&quot;</span></span><br><span class="line"><span class="comment"> *       &#125;,</span></span><br><span class="line"><span class="comment"> *       &quot;age&quot;:&#123;</span></span><br><span class="line"><span class="comment"> *         &quot;type&quot;: &quot;integer&quot;</span></span><br><span class="line"><span class="comment"> *       &#125;,</span></span><br><span class="line"><span class="comment"> *       &quot;birthday&quot;:&#123;</span></span><br><span class="line"><span class="comment"> *         &quot;type&quot;: &quot;date&quot;,</span></span><br><span class="line"><span class="comment"> *         &quot;format&quot;: [&quot;yyyy-MM-dd&quot;]</span></span><br><span class="line"><span class="comment"> *       &#125;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void createIndexAndMapping() throws IOException &#123;</span><br><span class="line">    <span class="comment">//1.创建Rest高级客户端</span></span><br><span class="line">    HttpHost httpHost = new HttpHost(&quot;192.168.154.129&quot;, 9200);</span><br><span class="line">    RestClientBuilder restClientBuilder = RestClient.builder(httpHost);</span><br><span class="line">    RestHighLevelClient client = new RestHighLevelClient(restClientBuilder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.准备需要创建的索引的映射</span></span><br><span class="line">    Settings.Builder settings = Settings.builder().put(&quot;number_of_shards&quot;,1);</span><br><span class="line"></span><br><span class="line">    XContentBuilder xContentBuilder = JsonXContent.contentBuilder()</span><br><span class="line">            <span class="comment">// 字段需要一一映射，开始和结束。这里可以认为表示括号&#123;  endObject表示&#125;</span></span><br><span class="line">            .startObject()</span><br><span class="line">                  .startObject(&quot;properties&quot;)</span><br><span class="line">                        .startObject(&quot;name&quot;)</span><br><span class="line">                              .field(&quot;type&quot;, &quot;text&quot;)</span><br><span class="line">                         .endObject()</span><br><span class="line">                         .startObject(&quot;age&quot;)</span><br><span class="line">                              <span class="comment">// value的值不要写错了，否则会抛出 ElasticsearchException[Elasticsearch exception [type=mapper_parsing_exception, reason=No handler for type [Integer] declared on field [age]]];</span></span><br><span class="line">                              .field(&quot;type&quot;, &quot;integer&quot;)</span><br><span class="line">                         .endObject()</span><br><span class="line">                         .startObject(&quot;birthday&quot;)</span><br><span class="line">                             .field(&quot;type&quot;, &quot;date&quot;)</span><br><span class="line">                          .field(&quot;format&quot;, &quot;yyyy-MM-dd&quot;)</span><br><span class="line">                         .endObject()</span><br><span class="line">                 .endObject()</span><br><span class="line">            .endObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建索引</span></span><br><span class="line">    CreateIndexRequest createIndexRequest = new CreateIndexRequest(&quot;ls_person_mapping&quot;);</span><br><span class="line">    createIndexRequest.settings(settings)</span><br><span class="line">            .mapping(xContentBuilder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过客户端创建请求</span></span><br><span class="line">    CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    logger.info(&quot;索引创建结果：&quot; + response.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kibana运行截图如下：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/05%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E6%98%A0%E5%B0%84.png"></p><p>由此，可见，索引的映射创建成功了</p><h3 id="32-获取索引字段映射"><a href="#3-2-获取索引字段映射" class="headerlink" title="3.2 获取索引字段映射"></a>3.2 获取索引字段映射</h3><h4 id="321-获取索引映射请求"><a href="#3-2-1-获取索引映射请求" class="headerlink" title="3.2.1 获取索引映射请求"></a>3.2.1 获取索引映射请求</h4><p><code>语法</code> 获取<code>一个</code>或者<code>多个</code>索引的映射信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /&lt;target&gt;/_mapping</span><br><span class="line">GET /索引名称(多个之间使用逗号隔开)/_mapping</span><br><span class="line"># 获取多个索引,中间使用逗号隔开</span><br><span class="line">GET /ls_person,ls_person20/_mapping</span><br><span class="line"># 所有的索引映射</span><br><span class="line">GET /*/_mapping</span><br><span class="line"># 所有的索引映射</span><br><span class="line">GET /_all/_mapping </span><br><span class="line"># 所有的索引映射</span><br><span class="line">GET /_mapping </span><br></pre></td></tr></table></figure><p><strong><code>&lt;target&gt;</code></strong></p><p>（可选，字符串）用于限制请求的<code>数据流</code>、<code>索引</code>和<code>别名</code>的逗号分隔列表。支持通配符 <code>*</code>或<code>_all</code>。</p><p>执行结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ls_person20&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;age&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;birthday&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;date&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span> : <span class="string">&quot;[yyyy-MM-dd]&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;ls_person&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;age&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;birthday&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;date&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;format&quot;</span> : <span class="string">&quot;[yyyy-MM-dd]&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="322-获取索引映射java代码实现"><a href="#3-2-2-获取索引映射Java代码实现" class="headerlink" title="3.2.2 获取索引映射Java代码实现"></a>3.2.2 获取索引映射Java代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取索引映射的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getIndexMappingTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建Rest高级客户端</span></span><br><span class="line">    HttpHost httpHost = <span class="keyword">new</span> HttpHost(<span class="string">&quot;192.168.154.129&quot;</span>, <span class="number">9200</span>);</span><br><span class="line">    RestClientBuilder restClientBuilder = RestClient.builder(httpHost);</span><br><span class="line">    RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line">    GetIndexRequest getIndexRequest = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;ls_person_mapping&quot;</span>);</span><br><span class="line">    GetIndexResponse response = client.indices().get(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    String indexName = <span class="string">&quot;ls_person_mapping&quot;</span>;</span><br><span class="line">    MappingMetadata metaData = response.getMappings().get(indexName);</span><br><span class="line">    logger.info(<span class="string">&quot;索引名称：&quot;</span> + indexName);</span><br><span class="line">    logger.info(<span class="string">&quot;索引映射数据&quot;</span> + metaData.getSourceAsMap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">索引名称：ls_person_mapping</span><br><span class="line">索引映射数据&#123;properties&#x3D;&#123;birthday&#x3D;&#123;format&#x3D;yyyy-MM-dd, type&#x3D;date&#125;, name&#x3D;&#123;type&#x3D;text&#125;, age&#x3D;&#123;type&#x3D;integer&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="33-获取索引mappping字段映射"><a href="#3-3-获取索引Mappping字段映射" class="headerlink" title="3.3 获取索引Mappping字段映射"></a>3.3 获取索引Mappping字段映射</h3><h4 id="331-获取索引mapping的字段映射demo"><a href="#3-3-1-获取索引Mapping的字段映射Demo" class="headerlink" title="3.3.1  获取索引Mapping的字段映射Demo"></a>3.3.1  获取索引Mapping的字段映射Demo</h4><p><code>定义</code> 检索一个或多个字段的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">映射定义</a>。对于数据流，API 检索流的支持索引的字段映射。</p><p><code>语法</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_mapping&#x2F;field&#x2F;&lt;field&gt;</span><br><span class="line"></span><br><span class="line">GET &#x2F;&lt;target&gt;&#x2F;_mapping&#x2F;field&#x2F;&lt;field&gt;</span><br><span class="line">&lt;target&gt;</span><br><span class="line">（可选，字符串）用于限制请求的数据流、索引和别名的逗号分隔列表。支持通配符 ( *)。要定位所有数据流和索引，请省略此参数或使用*或_all。</span><br><span class="line">&lt;field&gt;</span><br><span class="line">（可选，字符串）用于限制返回信息的字段的逗号分隔列表或通配符表达式</span><br></pre></td></tr></table></figure><p><strong><code>例子</code></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">PUT /publications?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;abstract&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;author&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#获取索引Mapping的字段映射</span><br><span class="line">GET ls_person20/_mapping/field/birthday</span><br><span class="line"></span><br><span class="line"># get mapping API 允许您指定以逗号分隔的字段列表。</span><br><span class="line">GET /publications/_mapping/field/author.id,abstract,name?pretty</span><br><span class="line"></span><br><span class="line"># 使用通配符形式的字段映射</span><br><span class="line">GET publications/_mapping/field/a*</span><br><span class="line"></span><br><span class="line"># 上述&lt;target&gt;和&lt;field&gt;请求路径参数都支持逗号分隔的列表和通配符表达式。  这里的ls_person是我上文中创建的索引对象</span><br><span class="line">GET ls_person,ls_person20/_mapping/field/name,birthday</span><br></pre></td></tr></table></figure><h4 id="332-获取索引mapping的字段映射java实现"><a href="#3-3-2-获取索引Mapping的字段映射Java实现" class="headerlink" title="3.3.2  获取索引Mapping的字段映射Java实现"></a>3.3.2  获取索引Mapping的字段映射Java实现</h4><h3 id="34-更新索引mapping映射"><a href="#3-4-更新索引Mapping映射" class="headerlink" title="3.4 更新索引Mapping映射"></a>3.4 更新索引Mapping映射</h3><p><code>定义 </code>：向现有数据流或索引添加新字段</p><p><code>语法</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;&lt;target&gt;&#x2F;_mapping</span><br><span class="line">&lt;target&gt;</span><br><span class="line">（必需，字符串）用于限制请求的数据流、索引和别名的逗号分隔列表。支持通配符 ( *)。要定位所有数据流和索引，请省略此参数或使用*或_all。</span><br></pre></td></tr></table></figure><h4 id="341-更新索引mapping映射demo"><a href="#3-4-1-更新索引Mapping映射DEMO" class="headerlink" title="3.4.1 更新索引Mapping映射DEMO"></a>3.4.1 更新索引Mapping映射DEMO</h4><p><code>单个索引属性更新</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引</span><br><span class="line">PUT /ls_person30</span><br><span class="line"></span><br><span class="line"># 更新索引字段映射</span><br><span class="line">PUT /ls_person30/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>多个索引更新</code></p><p>更新映射 API 可以通过单个请求应用于多个索引</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Create the two indices</span><br><span class="line">PUT /ls_person40</span><br><span class="line">PUT /ls_person41</span><br><span class="line"></span><br><span class="line"># Update both mappings</span><br><span class="line">PUT /ls_person40,ls_person41/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET ls_person40,ls_person41/_mapping</span><br></pre></td></tr></table></figure><p><code>向现有的字段对象中添加新的属性</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PUT &#x2F;ls_person50?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;first&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get ls_person50</span><br><span class="line"># 向name字段中添加新的字段last</span><br><span class="line">PUT &#x2F;ls_person50&#x2F;_mapping?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;last&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>将多字段添加到现有字段中</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT /ls_person60?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;city&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get ls_person60</span><br><span class="line">PUT /ls_person60/_mapping?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;raw&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="342-更新索引mapping映射java实现"><a href="#3-4-2-更新索引Mapping映射Java实现" class="headerlink" title="3.4.2 更新索引Mapping映射Java实现"></a>3.4.2 更新索引Mapping映射Java实现</h4><p>略</p><h3 id="35-检查索引类型是否存在"><a href="#3-5-检查索引类型是否存在" class="headerlink" title="3.5 检查索引类型是否存在"></a>3.5 检查索引类型是否存在</h3><blockquote><p>ElasticSearch7.0 之后，索引类型就已经弃用了</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-types-exists.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-types-exists.html</a></p></blockquote><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/06%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%E5%BC%83%E7%94%A8.png"></p><h3 id="36-索引使用情况的api"><a href="#3-6-索引使用情况的API" class="headerlink" title="3.6 索引使用情况的API"></a>3.6 索引使用情况的API</h3><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-disk-usage.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-disk-usage.html</a></p></blockquote><p><code>定义</code>：分析索引或数据流的每个字段的磁盘使用情况</p><p><code>语法</code> :   有一些可选参数。实际测试没有得到我想要的结果，有兴趣的同学可以在上面的官网中查看和学习</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;&lt;target&gt;&#x2F;_disk_usage</span><br></pre></td></tr></table></figure><h2 id="4索引设置"><a href="#4-索引设置" class="headerlink" title="4.索引设置"></a>4.索引设置</h2><h3 id="41-获取索引设置"><a href="#4-1-获取索引设置" class="headerlink" title="4.1 获取索引设置"></a>4.1 获取索引设置</h3><p><code>作用</code> ： 返回一个或多个索引的设置信息.</p><p><code>格式</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;&lt;target&gt;&#x2F;_settings</span><br><span class="line"></span><br><span class="line">GET &#x2F;&lt;target&gt;&#x2F;_settings&#x2F;&lt;setting&gt;</span><br></pre></td></tr></table></figure><p>要获取集群中所有索引的设置.可以使用<code>_all</code>或<code>*</code>for <code>&lt;target&gt;</code>。还支持通配符表达式</p><p>例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 中间不要有空格,否则会提示 illegal_argument_exception request [GET /ls_person50,ls_person40] does not support having a body</span><br><span class="line">GET /ls_person50,ls_person40/_settings</span><br><span class="line">GET /_all/_settings </span><br><span class="line">GET /ls_person*/_settings</span><br></pre></td></tr></table></figure><h3 id="42-索引分析文本"><a href="#4-2-索引分析文本" class="headerlink" title="4.2 索引分析文本"></a>4.2 索引分析文本</h3><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html</a></p></blockquote><p><code>作用</code>：对文本字符串执行<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html">分析</a>并返回结果标记。</p><p><code>格式</code>： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_analyze</span><br><span class="line"></span><br><span class="line">POST &#x2F;_analyze</span><br><span class="line"></span><br><span class="line">GET &#x2F;&lt;index&gt;&#x2F;_analyze</span><br><span class="line"></span><br><span class="line">POST &#x2F;&lt;index&gt;&#x2F;_analyze</span><br></pre></td></tr></table></figure><p><code>执行例子</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 索引分析操作  standard如果没有指定，分析器是默认的分析器。</span><br><span class="line">GET /_analyze?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;小河流水哗啦啦&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 采用ik分词器的分词 需要自行安装</span><br><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;小河流水哗啦啦&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 文本字符串数组则将其作为多值字段进行分析</span><br><span class="line">GET /ls_person/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;小河流水哗啦啦&quot;</span>,</span><br><span class="line">    <span class="string">&quot;我和姐姐去彩花t&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong><code>analyzer</code></strong></p><p>应用于提供的<code>text</code>. 这可以是<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-analyzers.html">内置的分析器</a>，也可以是 在索引中配置的分析器。</p><p>如果未指定此参数，则分析 API 使用字段映射中定义的分析器。如果未指定字段，则分析 API 使用索引的默认分析器。</p><p>如果未指定索引，或者索引没有默认分析器，则分析 API 使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html">标准分析器</a> <code>standard</code>。</p><h3 id="43-ik分词器安装"><a href="#4-3-IK分词器安装" class="headerlink" title="4.3 IK分词器安装"></a>4.3 IK分词器安装</h3><p>Lucene的IK分词器的很早就不维护了，索引现在我们要使用的是在其基础上维护升级的版本。因为我所使用的<code>ElasticSearch</code>是<code>7.12.0</code>版本，所以我的IK分词器也下载对应的<code>7.12.0</code>的版本</p><blockquote><p>IK分词器安装地址:<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.12.0">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.12.0</a></p></blockquote><p>ik分词器，解压在<code>elasticsearch</code>的<code>plugin</code>目录下面。然后重新启动elasticsearch就可以使用了</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;software&#x2F;elasticsearch-7.12.0&#x2F;plugins</span><br></pre></td></tr></table></figure><h3 id="44-更新索引设置"><a href="#4-4-更新索引设置" class="headerlink" title="4.4 更新索引设置"></a>4.4 更新索引设置</h3><p><code>作用</code>：  实时更改<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings">动态索引设置</a>。</p><p><code>执行例子</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /ls_person/_settings?pretty</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6索引的别名管理"><a href="#6-索引的别名管理" class="headerlink" title="6.索引的别名管理"></a>6.索引的别名管理</h2><p>略</p><p>有兴趣的同学自行查看ES的API</p><h2 id="7-索引模板"><a href="#7-索引模板" class="headerlink" title="7. 索引模板"></a>7. 索引模板</h2><p>有兴趣的同学自行查看ES的API</p><h2 id="8-索引监控"><a href="#8-索引监控" class="headerlink" title="8. 索引监控"></a>8. 索引监控</h2><h3 id="81-索引统计"><a href="#8-1-索引统计" class="headerlink" title="8.1 索引统计"></a>8.1 索引统计</h3><p><code>定义</code> : 获取一个或多个数据流和索引的高级聚合和统计信息。</p><p><code>格式</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;&lt;target&gt;&#x2F;_stats&#x2F;&lt;index-metric&gt;</span><br><span class="line"></span><br><span class="line">GET &#x2F;&lt;target&gt;&#x2F;_stats</span><br><span class="line"></span><br><span class="line">GET &#x2F;_stats</span><br></pre></td></tr></table></figure><p>默认情况下，返回的统计信息是索引级别的<code>primaries</code>和<code>total</code>聚合。 <code>primaries</code>是仅主分片的值。 <code>total</code>是主分片和副本分片的累计值。</p><p>要获取分片级别的统计信息，请将<code>level</code>参数设置为<code>shards</code>。</p><p><code>执行例子</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 获取多个索引的统计信息 多个之间使用逗号隔开</span><br><span class="line">GET /ls_person,ls_person2/_stats </span><br><span class="line"></span><br><span class="line"># 获取集群中所有的索引的统计信息</span><br><span class="line">GET /_stats</span><br><span class="line">GET /_stats/merge,refresh?pretty</span><br><span class="line">GET /ls_person30/_stats/merge,refresh?pretty</span><br></pre></td></tr></table></figure><h3 id="82-索引字段统计"><a href="#8-2-索引字段统计" class="headerlink" title="8.2 索引字段统计"></a>8.2 索引字段统计</h3><p><code>定义</code> : 返回索引的每个分片和字段的字段使用信息。当查询在集群上运行时，会自动捕获字段使用统计信息。访问给定字段的分片级搜索请求，即使在该请求期间多次，也计为一次使用。</p><p><code>格式</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;&lt;index&gt;&#x2F;_field_usage_stats</span><br></pre></td></tr></table></figure><p><code>执行例子</code></p><p>略。<code>未来版本</code> 该功能可能会删除。官网提供的查询例子貌似有问题</p><h3 id="83-索引分片存储"><a href="#8-3-索引分片存储" class="headerlink" title="8.3 索引分片存储"></a>8.3 索引分片存储</h3><p>略</p><p><code>定义</code>： 一个或多个索引中检索有关副本分片的存储信息</p><p><code>格式</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;&lt;target&gt;&#x2F;_shard_stores</span><br><span class="line"></span><br><span class="line">GET &#x2F;_shard_stores</span><br></pre></td></tr></table></figure><h3 id="84-索引恢复"><a href="#8-4-索引恢复" class="headerlink" title="8.4 索引恢复"></a>8.4 索引恢复</h3><p>略</p><p><code>定义</code>：返回有关一个或多个索引的正在进行和已完成的分片恢复的信息</p><p><code>格式</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;&lt;target&gt;&#x2F;_recovery</span><br><span class="line"></span><br><span class="line">GET &#x2F;_recovery</span><br></pre></td></tr></table></figure><h2 id="9索引状态管理"><a href="#9-索引状态管理" class="headerlink" title="9.索引状态管理"></a>9.索引状态管理</h2><h3 id="91-清除索引的缓存"><a href="#9-1-清除索引的缓存" class="headerlink" title="9.1 清除索引的缓存"></a>9.1 清除索引的缓存</h3><p><code>定义</code>：清除一个或多个索引的缓存</p><p><code>格式</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;&lt;target&gt;&#x2F;_cache&#x2F;clear</span><br><span class="line"></span><br><span class="line">POST &#x2F;_cache&#x2F;clear</span><br></pre></td></tr></table></figure><p>支持通配符 ( <code>*</code>)。要定位所有数据流和索引，请省略此参数或使用<code>*</code>或<code>_all</code>。</p><p><code>清除特定缓存</code></p><p>默认情况下，清除缓存 API 会清除所有缓存。您可以通过将以下查询参数设置为来仅清除特定缓存<code>true</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 清除特定缓存</span><br><span class="line"># 仅清除字段缓存</span><br><span class="line">POST /ls_person/_cache/clear?fielddata=true&amp;pretty</span><br><span class="line"># 只清除查询缓存</span><br><span class="line">POST /ls_person/_cache/clear?query=true&amp;pretty</span><br><span class="line"># 只清除请求缓存</span><br><span class="line">POST /ls_person/_cache/clear?request=true&amp;pretty</span><br><span class="line"># 不指定索引清除所有的缓存</span><br><span class="line">POST /_cache/clear?pretty</span><br><span class="line"># 清除多个索引的缓存 多个之间使用逗号隔开</span><br><span class="line">POST /ls_person,ls_person2/_cache/clear?pretty</span><br></pre></td></tr></table></figure><h3 id="92-索引刷新"><a href="#9-2-索引刷新" class="headerlink" title="9.2 索引刷新"></a>9.2 索引刷新</h3><blockquote><p>近实时搜索：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/near-real-time.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/near-real-time.html</a></p></blockquote><p><code>定义</code>： 对一个或者多个索引进行刷新操作。可用于搜索</p><p>使用刷新 API 显式地使自上次刷新以来对<code>一个</code>或<code>多个索引</code> 执行的所有操作可用于搜索。</p><p>默认情况下，Elasticsearch<code> 每秒</code>都会定期刷新索引，但仅限于在过去 30 秒内收到一个或多个搜索请求的索引。</p><p>您可以使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-refresh-interval-setting"><code>index.refresh_interval</code></a>设置更改此默认间隔。</p><p>刷新请求是<code>同步</code>的，在刷新操作完成之前不会返回响应。</p><p><code>格式</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &lt;target&gt;&#x2F;_refresh</span><br><span class="line"></span><br><span class="line">GET &lt;target&gt;&#x2F;_refresh</span><br><span class="line"></span><br><span class="line">POST &#x2F;_refresh</span><br><span class="line"></span><br><span class="line">GET &#x2F;_refresh</span><br></pre></td></tr></table></figure><p><code>使用例子</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 刷新一个或者多个索引</span><br><span class="line">POST /ls_person,ls_person2/_refresh?pretty</span><br><span class="line"></span><br><span class="line"># 刷新所有的索引</span><br><span class="line">POST /_refresh</span><br></pre></td></tr></table></figure><p><code>注意</code></p><p>刷新是资源密集型的。为了确保良好的集群性能，我们建议尽可能等待 Elasticsearch 的<code>定期刷新</code>，而不是执行显式刷新。</p><h3 id="93-刷新"><a href="#9-3-刷新" class="headerlink" title="9.3 刷新"></a>9.3 刷新</h3><p><code>定义</code>： 刷新一个或多个索引</p><p>​    <code>刷新数据流</code>或索引是确保当前仅存储在<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-translog.html">事务日志</a>中的任何数据也<code>永久存储</code>在 Lucene 索引中的过程。</p><p>重新启动时，Elasticsearch 会将所有未刷新的操作从事务日志中重放到 Lucene 索引中，以将其恢复到重新启动前的状态。Elasticsearch 会根据需要自动触发刷新.</p><p>一旦每个操作被刷新，它就会永久存储在 Lucene 索引中。这可能意味着不需要在事务日志中维护它的额外副本，除非<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-translog.html#index-modules-translog-retention">它因某些其他原因被保留</a>。事务日志由多个文件组成，称为<code>generation</code>，一旦不再需要，Elasticsearch 将删除任何生成文件，从而释放磁盘空间。</p><p><code>格式</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;&lt;target&gt;&#x2F;_flush</span><br><span class="line"></span><br><span class="line">GET &#x2F;&lt;target&gt;&#x2F;_flush</span><br><span class="line"></span><br><span class="line">POST &#x2F;_flush</span><br><span class="line"></span><br><span class="line">GET &#x2F;_flush</span><br></pre></td></tr></table></figure><p><code>使用例子</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 刷新特定索引或者数据。支持多个,中间使用逗号隔开</span><br><span class="line">POST /ls_person,ls_person2/_flush?pretty</span><br><span class="line"></span><br><span class="line"># 刷新所有的索引和数据流</span><br><span class="line">POST /_flush </span><br></pre></td></tr></table></figure><h3 id="94-强制合并一个或多个索引的分片"><a href="#9-4-强制合并一个或多个索引的分片" class="headerlink" title="9.4 强制合并一个或多个索引的分片"></a>9.4 强制<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-merge.html">合并</a>一个或多个索引的分片</h3><p>略</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;elasticsearch索引学习&quot;&gt;&lt;a href=&quot;#ElasticSearch索引学习&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch索引学习&quot;&gt;&lt;/a&gt;ElasticSearch索引学习&lt;/h1&gt;&lt;p&gt;作者：李帅&lt;/p&gt;
</summary>
      
    
    
    
    <category term="搜索引擎" scheme="https://lswisdom.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="Es学习" scheme="https://lswisdom.github.io/tags/Es%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>HashMap简单讲解</title>
    <link href="https://lswisdom.github.io/posts/221454777/"/>
    <id>https://lswisdom.github.io/posts/221454777/</id>
    <published>2021-08-17T16:09:14.000Z</published>
    <updated>2022-10-30T03:04:44.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jdk17-hashmap"><a href="#JDK1-7-HashMap" class="headerlink" title="JDK1.7 HashMap"></a>JDK1.7 HashMap</h1><h1 id="jdk18-hashmap"><a href="#JDK1-8-HashMap" class="headerlink" title="JDK1.8 HashMap"></a>JDK1.8 HashMap</h1><h2 id="基本信息描述"><a href="#基本信息描述" class="headerlink" title="基本信息描述"></a>基本信息描述</h2><p>JDK1.7采用 <code>数组+链表</code> 的数据结构<br>JDK1.8的HashMap采用 <code>数组+链表+红黑树</code> 的数据结构。新增加红黑树的操作,是为了解决某些情况下,链表过长导致的查询效率问题。链表查询数据的时间复杂度为O(n),红黑树的时间复杂度为Olog(n).当数据量多的时候,红黑树的查询效率明显高于链表<br>数据结构如下：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E8%BD%AC%E6%8D%A2%E5%90%8E%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91%E7%BB%93%E6%9E%84.png?versionId=CAEQGxiBgIC2.fqw2hciIGI4M2M2ZTIzOTYzYTQ3ZjI4YzY5YjBhNzBjOGNhNDU5" alt="JDK1.8HashMap数据结构"></p><h2 id="基本字段属性"><a href="#基本字段属性" class="headerlink" title="基本字段属性"></a>基本字段属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合默认的容量是16,大小必须是2的幂次方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合的最大容量。初始化或者扩容时,防止溢出,必须是2次幂 &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数中未指定负载因子时,使用该值,默认是0.75,不建议修改,该值经过大量计算得出.遵循泊松分布</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶的树化阈值  当链表长度&gt;=8 时,将链表转换成红黑树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树还原回链表的阈值。当红黑树节点数量&lt;=6时,将红黑树转换为链表结构</span></span><br><span class="line"><span class="comment">     * 基于时间和空间的考虑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶树化的最小表容量： 当桶中的元素大于64时,且链表的容量&gt;=TREEIFY_THRESHOLD 时,才可以把链表转换为红黑树</span></span><br><span class="line"><span class="comment">     * 设置成64,是为了减少扩容的次数。当桶比较小的时候,桶中的元素达到一定的个数时,会频繁的扩容操作。浪费性能</span></span><br><span class="line"><span class="comment">     * 也是时间和空间的一种考虑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Fields -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一次使用时进行初始化操作。长度是2的幂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  缓存字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * table中元素的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hashmap改变的次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 库容的阈值,大小等于 =  (capacity * load factor).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负载因子,默认是0.75</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>   <code>TREEIFY_THRESHOLD=8</code> 和 <code>UNTREEIFY_THRESHOLD=6</code> 是链表转红黑树和红黑树退化成链表的阈值。因为桶中链表的数量在计算hash值的时候,遵循泊松分布。当链表的长度为8时的概率为 8:    0.00000006 而当链表的长度为6时的概率为 6:    0.00001316  概率差了1000多倍。为了避免频繁的树化和解除树化的操作</p><h2 id="桶中元素结构体"><a href="#桶中元素结构体" class="headerlink" title="桶中元素结构体"></a>桶中元素结构体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> hash; <span class="comment">// hash值</span></span><br><span class="line">     <span class="keyword">final</span> K key; <span class="comment">// key值</span></span><br><span class="line">     V value; <span class="comment">// 桶中元素的value值</span></span><br><span class="line">     Node&lt;K,V&gt; next;  <span class="comment">// 桶中下一个元素的指针</span></span><br><span class="line"></span><br><span class="line">     Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">         <span class="keyword">this</span>.hash = hash;</span><br><span class="line">         <span class="keyword">this</span>.key = key;</span><br><span class="line">         <span class="keyword">this</span>.value = value;</span><br><span class="line">         <span class="keyword">this</span>.next = next;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="链表树化结构体"><a href="#链表树化结构体" class="headerlink" title="链表树化结构体"></a>链表树化结构体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="keyword">boolean</span> red;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  initialCapacity 初始容量</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  loadFactor      负载因子</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative</span></span><br><span class="line"><span class="comment">  *         or the load factor is nonpositive</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                            initialCapacity);</span><br><span class="line">     <span class="comment">// 如果初始容量大于最大容量2^30,赋值为最大容量。防止溢出                                       </span></span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">         initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">     <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                            loadFactor);</span><br><span class="line">     <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">     <span class="comment">// threshold hashmap扩容阈值,注意这个值会发生变化,如果initialCapacity是2的幂,返回原值。如果不是2的幂,返回大于该值的最小的2的幂次方</span></span><br><span class="line">     <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 指定集合容量大小,默认负载因子是0.75</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用默认属性</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">     putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>注意：</code> 集合容量设置过小,会造成频繁的扩容操作。设置容量过大,会导致空间上浪费。如果我们确切的知道我们有多少键值对需要存储,那么我们在初始化HashMap的时候就应该指定它的容量,防止HashMap自动扩容,影响使用效率。 <code>initialCapacity = (需要存储的元素个数 / 负载因子) + 1</code></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="确定桶的位置"><a href="#确定桶的位置" class="headerlink" title="确定桶的位置"></a>确定桶的位置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tab[i = (n - <span class="number">1</span>) &amp; hash</span><br></pre></td></tr></table></figure><h3 id="hash方法"><a href="#hash方法" class="headerlink" title="hash方法"></a>hash方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算 key.hashCode() 并将散列的较高位（异或）传播到较低位。这个怎么理解呢?<br>这个哈希方法首先计算出key的hashCode,然后赋值给h,然后与h无符号右移16位后的二进制进行按位异或得到最后的hash值(hashCode()计算方法,得出的是一个int类型数,转换为二进制也就是32位)。hash值计算完成后,需要用来计算元素在桶中的位置,计算公式:<code>tab[i = (n - 1) &amp; hash</code> 如果当桶很小时,假设是默认的16的话,这样的值和hashCode()直接做按位与操作,实际上只使用了哈希值的后4位。如果当哈希值的高位变化很大,低位变化很小,这样就很容易造成哈希冲突了,所以这里把高低位都利用起来,从而解决了这个问题。<code>也是一种为了降低hash冲突的优化手段</code>。举个例子如下：</p><ul><li>&amp; (按位与运算) : 运算规则:相同的二进制数位上,都是1的时候,结果为1,否则为零。</li><li>^ (按位异或运算) :运算规则:相同的二进制数位上,数字相同,结果为0,不同为1.</li></ul><p>代码中通过这个hash &amp; (n-1) 得到存储元素的位置,假设这里的h = key.hashCode()得到的值为,分别进行桶中元素位置计算,看看新老hash算法差异<br>key1 = 0000 0000 0001 0000 1111 1111 0000 0000<br>key2 = 0000 1111 1111 1111 1111 1111 0000 0000   高位变化较大   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">使用h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span> 获取hash值</span><br><span class="line">key1的计算如下：</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>    h</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span>    h &gt;&gt;&gt; <span class="number">16</span></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0001</span> <span class="number">0000</span>   按位异或运算后得到的hash值  h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">此时数据长度n假设为默认的<span class="number">16</span>,那么这个key存放在table中位置为i = (n - <span class="number">1</span>) &amp; hash</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0001</span> <span class="number">0000</span>      hash</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算</span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>     索引位置为<span class="number">0</span></span><br><span class="line">key2的计算：</span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>    h</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    h &gt;&gt;&gt; <span class="number">16</span></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span>    按位异或运算后得到的hash值  h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span>    </span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>    索引位置是<span class="number">15</span></span><br><span class="line">  </span><br><span class="line">反例： (key.hashCode()) &amp; (n-<span class="number">1</span>)</span><br><span class="line">key1:</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>      hash值(重新获取一个hash值,直接进行按位与操作)</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>      索引位置为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">key2:</span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>      hash值  高位变化较大的hash值,低位保持不变</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算 </span><br><span class="line">---------------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>      索引位置为<span class="number">0</span></span><br></pre></td></tr></table></figure><p>由此可见,同样的两个hashcode,经过<code>移位和异或</code>操作后,能够使hashcode更加复杂,同时也把哈希值的高位移动到了低位,降低了hash冲突的概率。实际上hashMap的hash算法做的非常好,进过我的测试,默认负载因子为0.75的时候如果把hashmap加入4000w个数据的时候。依然没有链表转红黑树的操作,都是不断扩容的操作.有兴趣的朋友,可以自己测试一下hash算法的性能。</p><h3 id="扩容resize"><a href="#扩容resize" class="headerlink" title="扩容resize()"></a>扩容resize()</h3><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment">     * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment">     * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment">     * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment">     * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment">     * 初始化或者扩容表的长度为2倍</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        <span class="comment">// 旧表,第一次执行时,oldTabl为空</span></span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="comment">// 旧表的容量</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="comment">// 旧的扩容阈值</span></span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// oldCap大于0说明是对数组进行扩容操作</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果扩容前旧表的容量大于阈值,就设置为Integer的最大值</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;  <span class="comment">// 如果旧表的长度左移一位还小于表的最大容量,就扩容表的长度为旧表的一倍,域值也为原来的一倍</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            <span class="comment">// HashMap的构造方法中会对threshold进行初始化操作</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;   </span><br><span class="line">            <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            <span class="comment">// 初始化新容器的大小,必须是2的幂,默认是16。表刚创建的时候,会执行到这里</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            <span class="comment">// 默认的阈值是12 负载因子0.75* 默认的初始化容量16</span></span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新的阈值为0时,按照阈值公式计算阈值</span></span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新table表扩容时的的阈值</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        <span class="comment">// 用扩容后的容量创建新的数组然后返回数据</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="comment">// 如果是初始化数组,下面的部分不会执行,下面的部分涉及到数组中元素的移动</span></span><br><span class="line">        <span class="comment">// 扩容,进行数据迁移</span></span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 移动旧表的数据到新表中,移动的扩容中,需要重新的进行hash操作</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="comment">// 如果数组中只有一个元素,直接移动即可</span></span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        <span class="comment">// 如果是红黑树,需要对红黑树进行拆分</span></span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order  维持相对顺序</span></span><br><span class="line">                        <span class="comment">// 链表节点的处理  head是头节点  tail是尾部节点</span></span><br><span class="line">                        <span class="comment">// loHead是低位链表  hiHead是高位链表</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                         <span class="comment">// 获取当前节点的下一个节点,每一次循环e值会更新</span></span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="comment">// 遍历链表,将链表按照计算后的位置进行分组</span></span><br><span class="line">                            <span class="comment">// 没有再次hash的操作,而是按照扩容后新增加的那个bit是0还是1进行分组</span></span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                            </span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">// 分组完成后,将链表映射到桶中</span></span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 扩容后的链表的存储位置</span></span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回扩容后新表的长度</span></span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码流程介绍：<br>    1. 判断是初始化或者扩容操作,计算相应的新数组容量newCap 和 新的阈值大小newThr<br>    2. 初始化新的数组容量newCap<br>    3. 如果是扩容操作,还需要进行一个元素移动的操作。在移动的过程中,分为三种操作：<br>        3.1 如果原数组中只有一个元素,并且next指针为空,直接移动即可 newTab[e.hash &amp; (newCap - 1)] = e;<br>        3.2 如果原数组中的元素是树节点。需要将元素进行拆分,然后映射存储位置<br>        3.3 对于链表元素,需要将元素进行拆分。拆分为2个链表。可以理解为低位链表和高位链表,低位链表存储在扩容后的数组原来的位置,高位链表存储在扩容后数组原来的位置+旧数组容量的位置</p><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据key获取其所对应的value值</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">     Node&lt;K,V&gt; e;</span><br><span class="line">     <span class="comment">// 计算key值的hashcode。目的是为了通过(n - 1) &amp; hash 计算出当前key值在hash表中的位置</span></span><br><span class="line">     <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * HashMap根据key值和和key的HashCode值查找元素</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> hash 当前key的hash值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 当前key元素</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">     Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">     <span class="comment">// 如果数组中有元素同时根据hash值计算出当前key值所在的位置不为空</span></span><br><span class="line">     <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">         (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 检查数组中的元素。判断头结点是否就是需要获取的元素    </span></span><br><span class="line">         <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">             ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">             <span class="keyword">return</span> first;</span><br><span class="line">         <span class="comment">// 如果头节点中没有,从头结点的下一个节点开始查找    </span></span><br><span class="line">         <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">// 如果头节点是红黑树。则从红黑树中查找</span></span><br><span class="line">             <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                 <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">             <span class="keyword">do</span> &#123;</span><br><span class="line">                 <span class="comment">// 如果下一个节点不是红黑树。就只能是链表节点。在链表节点中查找元素</span></span><br><span class="line">                 <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                     ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                     <span class="keyword">return</span> e;</span><br><span class="line">             &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>get方法整体上比较简单,就是根据key的hash值,查找元素在数组的位置,找到之后判断是链表还是红黑树。如果是红黑树,就从红黑树的节点中去寻找。如果是链表节点,就遍历链表去查找相应的key所对应的value的值</p><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><p>put方法相对复杂一些,其实也还好,如果熟悉红黑树这种数据结构的话,看起来也不是很复杂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过高16位和低16位的异或运算的到一个hash值</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真正的添加元素方法。尾插法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value  是否进行元素的替换,用于插入相同key的时候,是否替换值,默认值为false,替换相应的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// hashmap的table表的初始化操作,是在这里进行的。第一次执行的时候,会先在这里进行初始化操作</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过hash值和数组长度进行按位与运算,得到元素的存储位置,如果table表的位置为空,就直接新建一个Node节点进行存储操作    </span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// key映射的数组桶位置有元素,也就是产生了hash碰撞(hashmap采用链地址法解决hash冲突。),走下述代码</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在该位置的第一个数据的key值和插入的元素的key值相等。需要进行下面的if (!onlyIfAbsent || oldValue == null) 的替换操作</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 如果桶中的元素是红黑树节点。就在红黑树中新插入节点,插入完成后,然后调整红黑树 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在链表中插入节点。这里先对链表进行遍历操作</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">//  遍历链表时,取下一个位置存放新增的元素,这里采用的是尾插法(链表中不包含要插入键值对节点)</span></span><br><span class="line">                <span class="comment">//  a.横竖都要遍历链表的长度是否大于树化的阈值,所以遍历的过程中,就直接插入元素了</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//如果链表的长度大于8个时,就进行链表转红黑树的操作</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果在链表中找到了相同的key值。直接break操作。那么e节点此时就是与链表要插入的新值key相同的Node节点</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  key值存在,就替换value值。新插入的元素的value值,替换原来这个key的value值,注意onlyIfAbsent 这个值</span></span><br><span class="line">        <span class="comment">//  这个值表示是否仅在oldValue==null 的时候,更新键值对的值。key相同会进行值覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 增加修改次数</span></span><br><span class="line">    ++modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果hashmap中元素的值超过了阈值,就会进行扩容操作</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>put方法小结：<br>1.当桶中的元素为空值,通过扩容的方式进行初始化table<br>2.对key进行hash运算。得到需要存储在桶中的位置。如果桶中位置为空,直接在桶中放入元素即可。<br>3.如果桶中的元素不为空。需要先查找插入的key值,是否已经存在,如果已经存在,则需要使用新值替换旧值,<br>4.如果不存在,则将新插入的key值插入在链表的尾部或者红黑树中。其中插入到链表尾部的过程中还会判断链表的长度是否大于树化的阈值。如果大于阈值,就会进行链表转红黑树的操作<br>5.最后判断数组中的数量是否大于扩容阈值,如果大于,会进行数组的扩容操作</p><p>转换后的形态,可能如下图所示,我主要为了展示大体的数据结构,不要纠结于元素的值<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/Jdk1.8%E6%9C%AA%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%BA%A2%E9%BB%91%E6%A0%91%E4%B9%8B%E5%89%8D%E7%9A%84%E5%BD%A2%E6%80%81.png?versionId=CAEQGxiBgMDP.fqw2hciIDQzYmNkYTQzZTNhMDQ4MmZhZDQyNjI1ZjZjYjJiOGRm"></p><h3 id="链表树化"><a href="#链表树化" class="headerlink" title="链表树化"></a>链表树化</h3><p>JDK1.8 对hashmap进行了改进。采用的数组+链表+红黑树的存储结构。链表转红黑树的操作,主要是为了防止由于hashcode算法性能不佳等原因,造成链表长度过长,查询缓慢的问题,我们元素多的情况下,红黑树是指数级的时间复杂度,在性能上远高于链表的时间复杂度。虽然会有一些额外的空间的消耗,但是时间上能大幅度提升。下面我将介绍 <code>链表树化</code> 、<code>红黑树自平衡</code>、<code>红黑树的基本性质</code></p><h4 id="node转红黑树节点treeifybin"><a href="#Node转红黑树节点TreeifyBin" class="headerlink" title="Node转红黑树节点TreeifyBin()"></a>Node转红黑树节点TreeifyBin()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment"> * table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment"> 替换指定哈希表的索引桶中所有的连接节点,除非表太小,否则将修改大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     *    如果元素数组为空 或者 数组长度小于 树结构化的最小阈值（MIN_TREEIFY_CAPACITY=64） ,就进行扩容操作.对于这个值可以理解为：如果元素数组长度小于这个值,没有必要去进行结构转换.目的是</span></span><br><span class="line"><span class="comment">     *  如果数组很小,那么转红黑树,遍历效率要低一些,这时进行扩容操作,重新计算哈希值,链表的长度有可能就变短了。数据会放入到数组中,这样相对来说效率会高一些</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">        <span class="comment">//如果元素数组长度已经大于等于了 MIN_TREEIFY_CAPACITY,那么就有必要进行结构转换了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出数组对应位置的头节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//定义几个变量,hd(head)代表头节点,tl代表尾节点(tail) 算法中常用变量</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="comment">//先把普通Node节点转成TreeNode类型,并赋值给p</span></span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//用新生成的双向链表替代旧的单向链表,其实就是把这个数组对应的位置重新赋值成新双向链表的首节点  hd是index对应的桶的首节点</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For treeifyBin</span></span><br><span class="line"><span class="function">TreeNode&lt;K,V&gt; <span class="title">replacementTreeNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>treeifyBin()方法总结</p><ul><li>链表转红黑树的条件：<ul><li>链表长度大于等于树化阈值 <code>TREEIFY_THRESHOLD = 8</code></li><li>数组长度大于等于<code>MIN_TREEIFY_CAPACITY=64 </code></li></ul></li><li>方法执行步骤：<ul><li>如果元素数组长度已经大于等于了 MIN_TREEIFY_CAPACITY,就进行结构转换,具体为Node转换为TreeNode节点。否则进行扩容操作</li><li>TreeNode节点间接继承自Node节点,所以TreeNode节点包含next引用。原链表顺序最终通过next引用被保存下来</li><li>最后一行,调用<code>treeify</code> 将链表转换为红黑树<br>转换后的元素结构,可能是这么一种形态<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/TreeifBean%E5%90%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png?versionId=CAEQGxiBgIDozMO02xciIDY0ZTNhMzM3NDgyZTRmNDdiY2JjMmNiYzc3ODAxOWI3"></li></ul></li></ul><h4 id="treenode转红黑树treeify"><a href="#TreeNode转红黑树treeify" class="headerlink" title="TreeNode转红黑树treeify()"></a>TreeNode转红黑树treeify()</h4><p>下面就是链表转红黑树的核心逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将树形链表转换为红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义树的根节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//  遍历链表,x指向当前节点、next指向下一个节点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">        <span class="comment">// 记录x的下一个节点</span></span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">        x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果根节点为空,则把当前节点当做根节点。根据红黑树性质,根节点一定为黑色。</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.parent = <span class="keyword">null</span>;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            root = x;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根节点已经存在的情况</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 取得当前遍历的树形节点的 key 和 hash</span></span><br><span class="line">            K k = x.key;</span><br><span class="line">            <span class="keyword">int</span> h = x.hash;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO : 循环开始位置</span></span><br><span class="line">            <span class="comment">// 从根节点遍历。这一步主要就是为了判断当前节点应该在树的左侧还是右侧,为节点x找到空位置并插入元素</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="comment">// dir代表方向(左边或者右边)  ph表示树节点的hash值。</span></span><br><span class="line">                <span class="keyword">int</span> dir, ph;  </span><br><span class="line">                K pk = p.key;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 比较hash值大小,判断当前节点插入到左边还是右边,并记录dir的值</span></span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h) </span><br><span class="line">                    dir = -<span class="number">1</span>;  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 根据比较器判断大小     Comparable 接⼝判断</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    <span class="comment">// 通过key的类名比较    </span></span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 保存当前遍历的树节点,就是x节点要插入的位置的父节点</span></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="comment">// 判断如果dir&lt;=0 说明当前节点的hash值小于当前树节点的hash值。需要把当前节点放置在当前树节点的左侧</span></span><br><span class="line">                <span class="comment">// 判断如果dir&gt;0 说明当前节点的hash值大于当前树节点的hash值。 需要把当前节点放置在当前树节点的右侧</span></span><br><span class="line">                <span class="comment">// p的左右节点存在不为空的情况,p节点就是当前遍历的树节点,说明该节点还有子节点。继续循环查找当前节点x的应该在哪个爸爸节点下面插入元素</span></span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// x 节点找到了父节点,并将x节点放入到父节点下面</span></span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    <span class="comment">// 元素插入之后,需要进行红黑树的自平衡操作,重新确定根节点的值</span></span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保根节点作为第一个节点</span></span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>treeify() 方法执行小结：</p><ul><li>遍历第⼀个节点时,此时红⿊树不存在,以第⼀个节点作为红⿊树根节点,并转换为黑节点</li><li>有了红⿊树后,此后遍历双链表的每个节点时,都要根据红黑树性质从根节点开始寻找要插⼊当前节点的位置,也就是找到⼀个⽗节点,将当前节点作为其左节点或右节点。</li><li>插⼊节点后,可能会导致红⿊树特性被破坏,因此每次插⼊节点后要尝试重新调整红⿊树</li><li>红黑树调整完成后,要确保根节点就是table桶中的第一个节点</li></ul><h4 id="红黑树的自平衡"><a href="#红黑树的自平衡" class="headerlink" title="红黑树的自平衡"></a>红黑树的自平衡</h4><p>下面我将介绍红黑树的<code>自平衡操作</code> 这部分代码纯粹就是红黑树的操作了,根hashmap没有多个的关系,有一定数据结构基础的同学,看起来应该没什么难度,对于不了解红黑树的同学,我将在下面代码的下面讲解红黑树的基本操作,帮助你理解如下代码。或者你可以看看我的另一篇文章《红黑树的简单介绍》 </p><pre><code> * 红黑树插入节点后,需要进行平衡操作 *       情景1： 红黑树为空树时,将根节点染成黑色 *       情景2： 插入的节点在红黑树已经存在,不需要处理 *       情景3： 插入节点的父节点为黑色,因为所插入的路径,黑色节点没有发生变化,所以红黑树依然平衡,所以不需要处理 *       情景4： 插入节点的父节点为红色 *              情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点) 根据红黑树性质4.红色节点不能直接相连,由此可知必然存在爷爷节点,且爷爷节点必定为黑节点 *                          由此可以 a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理 *              情景4.2  叔叔节点不存在或者为黑色节点,父节点为爷爷节点的左子树 *                      情景4.2.1 插入节点为其父节点的左子节点(LL情况) a.将爸爸节点染成黑色 b.将爷爷染成红色 c.然后以爷爷节点进行右旋操作 *                      情景4.2.2 插入节点为其父节点的右子节点(LR情况) a.已爸爸为节点进行一次左旋操作,得到(LL双红的情况 4.2.1) 然后指定爸爸节点为当前节点,执行下一轮的操作 *              情景4.3  叔叔节点不存在,或者为黑色节点,父节点为爷爷节点的右子树 *                      情景4.3.1 插入节点为其父节点的右子节点(RR情况) a.将爸爸染成黑色节点  b.将爷爷染成红色 c.然后以爷爷节点进行左旋操作 *                      情景4.3.2 插入节点为其父节点的左子节点(RL情况) a.以爸爸节点进行一次右旋,得到RR双红的场景( RR情况 4.3.1).然后指定爸爸节点为当前节点,进行下一轮的操作</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认插入节点为红色</span></span><br><span class="line">    x.red = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// xp为父节点  xpp：为爷爷节点   xxpl是爷爷的左节点(左叔叔节点)  xppr：是爷爷节点的右节点(右叔叔节点)</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情景1:当前节点的父节点不存在,当前节点就是根节点,根据红黑色性质,根节点为黑色,直接变色就可以了</span></span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情景2 和情景3：插入节点的父节点为黑色,因为所插入的路径,黑色节点没有发生变化,所以红黑树依然平衡,所以不需要处理。 爷节为空,说明x节点的父节点为根节点,可以直接插入节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情景4：如果父节点为红色,同时是父节点是爷爷节点的左节点,这样就遇到了两个红色节点相连的情况,需要进行处理。根据上述公式分为两种情况</span></span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">            <span class="comment">//  如果爷爷节点的右节点不为空,同时是红节点(也就是右叔叔节点不为空,且为红色.父叔双红)</span></span><br><span class="line">            <span class="comment">//  情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点)  a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line">            <span class="comment">//  因为有小伙伴有疑问：这个下一轮处理就是指(xpp节点变成红色后,可能会和xpp节点的父节点发生冲突,也就是两个连续的红色节点,所以需要继续处理) </span></span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  情景4.2  叔叔节点不存在或者为黑色节点,父节点为爷爷节点的左子树。分为两种情况</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">// 这些变化操作,你画画图就明白了,单纯的看比较抽象</span></span><br><span class="line">                 <span class="comment">// 情景4.2.2 插入节点为其父节点的右子节点(LR双红情况) a.以爸爸为节点进行一次左旋操作,得到(LL双红的情况 4.2.1) 然后指定爸爸节点为当前节点,执行下一轮的操作</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                    root = rotateLeft(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 情景4.2.1 插入节点为其父节点的左子节点(LL情况) a.将爸爸节点染成黑色 b.将爷爷染成红色 c.然后以爷爷节点进行右旋操作</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点) 此时爸爸节点为爷爷节点的右节点和上述情况相反</span></span><br><span class="line">            <span class="comment">// a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理(xpp节点变成红色后,可能会和xpp节点的父节点发生冲突,也就是两个连续的红色节点,所以需要继续处理)</span></span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果爷爷节点的左节点是黑色或者为空(左叔叔节点) 。那么可能有两种情况：</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 情景4.3.2 插入节点为其父节点的左子节点(RL情况)  a.以爸爸节点进行一次右旋,得到RR双红的场景( RR情况 4.3.1).然后指定爸爸节点为当前节点,进行下一轮的操作</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    <span class="comment">// 平衡过后,重新定义爷爷节点的变量值</span></span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 情景4.3.1 插入节点为其父节点的右子节点(RR情况) a.将爸爸染成黑色节点  b.将爷爷染成红色 c.然后以爷爷节点进行左旋操作</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123; </span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>纯粹就是红黑树的操作了,这没什么可说的。红黑树需要考虑的场景,我已经在方法上面标注过了,并在代码中给了提示,相信各位同学能很清楚的看明白</p><h4 id="红黑树的左旋"><a href="#红黑树的左旋" class="headerlink" title="红黑树的左旋"></a>红黑树的左旋</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line"><span class="comment">// Red-black tree methods, all adapted from CLR</span></span><br><span class="line"><span class="comment">// 红黑树的左旋的过程</span></span><br><span class="line"><span class="comment">// 1 将节点 p 旋转为其右节点的左节点,即将节点 p 挂到其右节点的左边</span></span><br><span class="line"><span class="comment">// 2 其右节点的左节点成为节点p 的右节点</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// r -&gt;  节点 p 的右节点</span></span><br><span class="line">    <span class="comment">// rl -&gt; 节点 p 的右节点的左节点</span></span><br><span class="line">    <span class="comment">// pp -&gt; 节点 p 的⽗节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// p 不为空且右节点不为空</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 1 将 p 的右节点的左节点挂到 p 的右节点,这有两个信息</span></span><br><span class="line">        <span class="comment">// a. 断开 p 与其右节点 r 的连接</span></span><br><span class="line">        <span class="comment">// b. 因为 p 要挂到其右节点 r 的左边,因此要把节点 r 原来的左节点挂到 p 的右边</span></span><br><span class="line">        <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// r 节点的左节点的⽗节点重置为 p</span></span><br><span class="line">            rl.parent = p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 将 p 的⽗节点设置为 p 的右节点的⽗节点</span></span><br><span class="line">        <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">             <span class="comment">// 如果 p 为 root 节点,那么直接将其右节点设置为 root</span></span><br><span class="line">            (root = r).red = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3 确定 r 节点应该挂在 p 的⽗节点的左边还是右边。这个根据 p 的位置决定。原来在左边,现在就还在左边</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">            pp.left = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = r;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4 将 p 设置为其右节点的左边</span></span><br><span class="line">        </span><br><span class="line">        r.left = p;</span><br><span class="line">        <span class="comment">// 5 将 p 的右节点指为其⽗节点</span></span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回根节点</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单独看上面的左旋方法,可能很抽象,根据节点名称,我画了一个草图帮助你们理解,这个图我已经画的很详细了</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%B7%A6%E6%97%8B%E4%BB%A3%E7%A0%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png?versionId=CAEQGxiBgMDjvPS22xciIGZkMTE0MTNiYzg2ZjQ4OTRhNmIxZDM5ZWZiNTEzZGM0"></p><h4 id="红黑树的右旋"><a href="#红黑树的右旋" class="headerlink" title="红黑树的右旋"></a>红黑树的右旋</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 红黑树右旋：</span></span><br><span class="line"><span class="comment">* 1 将节点 p 旋转为其左节点的右节点,即将节点 p 挂到其左节点的右边</span></span><br><span class="line"><span class="comment">* 2 其左节点的右节点成为节点 p 的左节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  l -&gt; 节点 P 的左节点</span></span><br><span class="line">    <span class="comment">// pp -&gt; 节点 p 的⽗节点</span></span><br><span class="line">    <span class="comment">// lr -&gt; 节点 p 的左节点的右孩⼦</span></span><br><span class="line">    TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 节点 p 和 其左节点不为空</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 将 p 的左节点的右孩⼦挂到 p 的左边</span></span><br><span class="line">        <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 p 指定为 lr 的⽗节点</span></span><br><span class="line">            lr.parent = p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  2 将 p 的⽗节点指定为其右节点的⽗节点     </span></span><br><span class="line">        <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">// 将l节点设置为root节点,并调整为黑色.</span></span><br><span class="line">            (root = l).red = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1 确定 p 的右节点应该挂在 p的⽗节点左边还是右边.这个根据 p 的位置决定。原来在左边,现在就还在左边</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">            pp.right = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.left = l;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 p 设置为其左节点的右孩⼦    </span></span><br><span class="line">        l.right = p;</span><br><span class="line">        <span class="comment">// 将 p 的⽗节点指定为其左节点</span></span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回根节点</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了帮助理解,同样的,下面增加了红黑树的右旋代码示意图</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%8F%B3%E6%97%8B%E4%BB%A3%E7%A0%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png?versionId=CAEQGxiBgICkk5W32xciIDgwNjlhNzU3MzczMTRlOGZhNTMwMjUwYjkwNGRjMjk5"></p><h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h2><ul><li>红黑树性质<ul><li>性质1: 每个节点要么是黑色,要么是红色。</li><li>性质2: 根节点是黑色。</li><li>性质3: 每个叶子节点(NIL) 是黑色。</li><li>性质4: 每个红色节点的两个子节点一定都是黑色。</li><li>性质5: 任意节点到每个叶子节 点的路径都包含数量相同的黑结点。从性质5又可以推出:</li><li>性质5.1:如果一个节点存在黑子节点, 那么该结点肯定有两个子节点</li></ul></li></ul><h2 id="红黑树的场景"><a href="#红黑树的场景" class="headerlink" title="红黑树的场景"></a>红黑树的场景</h2><p>插入场景：</p><h3 id="情景1插入的节点为空树"><a href="#情景1：插入的节点为空树" class="headerlink" title="情景1：插入的节点为空树"></a>情景1：插入的节点为空树</h3><p>直接把插入的节点作为根节点就可以了,并且把根节点变成黑色,如下图所示：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%83%85%E6%99%AF1.png?versionId=CAEQGxiBgIDA6J632xciIDQ4ODk5ODc2NzBlMTQ2NTQ5MDRiMTJiYmM3YWZiOGY5"></p><h3 id="情景2插入节点的key已存在"><a href="#情景2：插入节点的Key已存在" class="headerlink" title="情景2：插入节点的Key已存在"></a>情景2：插入节点的Key已存在</h3><p>处理：更新当前节点的值,为插入节点的值</p><h3 id="情景3-插入结点的父结点为黑结点"><a href="#情景3-插入结点的父结点为黑结点" class="headerlink" title="情景3   插入结点的父结点为黑结点"></a>情景3   插入结点的父结点为黑结点</h3><p>由于插入的结点是红色的,并不会影响红黑树的平衡,直接插入即可,无需做自平衡。如图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E6%99%AF3.png?versionId=CAEQGxiBgIDXhJax2hciIDU4NTU3MTA5ODQ3OTRhMGQ4MDNmNmUxNWUyZTg1NWI3"></p><h3 id="情景4插入节点的父节点为红色"><a href="#情景4：插入节点的父节点为红色" class="headerlink" title="情景4：插入节点的父节点为红色"></a>情景4：插入节点的父节点为红色</h3><p>红黑树的性质2:  根结点是黑色,如果插入节点的父结点为红结点,那么该父结点不可能为根结点,所以插入结点总是存在祖父结点。</p><p>分为两种情况,如下图所示</p><ul><li>一种是爸爸节点为红色,叔叔节点也是红色</li><li>一种是爸爸节点为红色,叔叔节点为黑色或者不存在</li></ul><h4 id="情景41"><a href="#情景4-1" class="headerlink" title="情景4.1"></a>情景4.1</h4><p><strong>叔叔结点存在并且为红结点</strong></p><p>依据红黑树<strong>性质4</strong> 可知,红色节点不能相连==&gt;祖父结点肯定为黑结点。因为<code>不可以同时存在两个相连的红结点</code>。那么此时该插入子树的红黑层数的情况是<code>黑红红</code>。显然最简单的处理方式是把其改为<code>红黑红</code><br>处理:</p><ul><li>1  将爸爸节点(P)和叔叔节点(U)节点改为黑色</li><li>2  将爷爷PP改为红色</li><li>3  将爷爷PP设置为当前节点,进行后续处理.注意但需要注意的是 PP 变为红⾊后,可能会和它的⽗节点形成连续的红⾊节点,此时需要递归向上调整,也就将 PP 看作新插⼊节点继续尝试调整。</li></ul><p>如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E6%99%AF4.1%E5%8F%98%E6%8D%A2%E5%89%8D%E5%90%8E.png?versionId=CAEQGxiBgMDXhJax2hciIGJlMzQyNmM3YWQ4NzQ1Mzc4M2EyMTAzYzU2MzAwNDgz"></p><p>可以看到,我们把PP结点设为红色了,如果PP的父结点是黑色,那么无需再做任何处理;但如果PP的父结点是红色,则违反了红黑树的性质.所以需要将PP设置为当前节点,继续做插入操作自平衡处理,真到平衡为为止.</p><h4 id="插入情景42"><a href="#插入情景4-2" class="headerlink" title="插入情景4.2"></a>插入情景4.2</h4><p><strong>叔叔结点不存在或为黑结点,并且插入结点的父亲结点是祖父结点的左子结点</strong></p><p>注意:单纯从插入前来看,叔叔节点非红即空(NIL节点) ,否则的话破坏了红黑树性质5,此路径会比其它路径多一个黑色节点。</p><p>新插入节点,可能为P节点的左子节点,也可能是P节点的右子节点,所以分为两种情况分别处理</p><h5 id="ll红色情况"><a href="#LL红色情况" class="headerlink" title="LL红色情况"></a>LL红色情况</h5><p><strong>4.2.1 新插入节点,为其父节点的左子节点</strong><br>处理:</p><ol><li>将P设置 为黑色,将PP设置为红色 ,然后以爷爷节点为当前节点</li><li>对PP节点进行右旋</li></ol><p>处理结果如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/LL%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86.png?versionId=CAEQGxiCgICihpax2hciIDViZDcwNjZiZTYyODQ0ZmM5MmZlNTRiZDNjYThhMzVk"></p><h5 id="lr红色情况"><a href="#LR红色情况" class="headerlink" title="LR红色情况"></a>LR红色情况</h5><p><strong>4.2.2 新插入节点,为其父节点的右子节点(LR红色情况)</strong><br>处理:</p><ul><li>对P进行左旋  </li><li>将P设置为当前节点,得到LL红色情况 </li><li>按照LL红色情况处理(1.变颜色2.右旋PP)</li></ul><p>操作过程如下图所示：</p><p>第一步</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/LR%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86%E7%AC%AC%E4%B8%80%E6%AD%A5.png?versionId=CAEQGxiBgMCl1I242xciIGZhMWY2ZWIyZTNiYjRhMDU4ZTlkOTQ0MDc0OTllYzI2"></p><p>第二步<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/LR%E5%A4%84%E7%90%861.png?versionId=CAEQGxiBgMCixc252xciIDJkYmFjM2MzNzlkODQ4NTlhZmIzZDdmNmI1MzlmZDg2"></p><h4 id="情况43"><a href="#情况4-3" class="headerlink" title="情况4.3"></a>情况4.3</h4><p><strong>叔叔结点不存在或为黑结点,并且插入结点的父亲结点是祖父结点的右子结点</strong> 和上述操作4.2 相反图,如下所示：</p><h5 id="rr红色情况"><a href="#RR红色情况" class="headerlink" title="RR红色情况"></a>RR红色情况</h5><p><strong>4.3.1新插入节点,为其父节点的右子节点(RR红色情况)</strong></p><p>处理操作：</p><ol><li>将P设置为黑色,将PP设置为红色</li><li>对PP节点进行左旋 </li></ol><p>旋转过程如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.3.1RR%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86.png?versionId=CAEQGxiBgMCmhpax2hciIGJiNGJjNTZkMmRjNDRlZWE4ODY2ZWI0Njc1OTYxMjE5"></p><h5 id="rl红色情况"><a href="#RL红色情况" class="headerlink" title="RL红色情况"></a>RL红色情况</h5><p><strong>4.3.2 新插入节点,为其父节点的左子节点(RL红色情况)</strong></p><p>处理:<br>1.对P进行右旋<br>2.将P设置为当前节点,得到RR红色情况<br>3.按照RR红色情况处理(1.变颜色2.左旋PP)</p><p>第一步对P节点进行右旋操作   如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E5%86%B54.3.2%E7%AC%AC%E4%B8%80%E6%AD%A5.png?versionId=CAEQGxiCgIDngpax2hciIDViYTc2MTAxZTdmYTRmZDFiNjNiY2E3NjdlMzIwMTMx"></p><p>第二步：变色+旋转,如下图所示</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/RL%E6%83%85%E5%86%B5%E7%AC%AC2%E6%AD%A5.png?versionId=CAEQGxiBgID5u..52xciIGM0YTE1NjA5NTE0YjQ2ZGFhZTU5NjM1M2Y1MjcwZjlk"></p><h3 id="红黑树链化"><a href="#红黑树链化" class="headerlink" title="红黑树链化"></a>红黑树链化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a list of non-TreeNodes replacing those linked from</span></span><br><span class="line"><span class="comment">     * this node.</span></span><br><span class="line"><span class="comment">     * 红⿊树中仍然保留了原链表节点顺序。有个这个特点,再将红⿊树转成链表就简单多了,仅需将TreeNode 链表转成 Node 类型的链表即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">untreeify</span><span class="params">(HashMap&lt;K,V&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ⽤于组织链表的头、尾指针</span></span><br><span class="line">        Node&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历 TreeNode 链表,并⽤ Node 替换</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt; q = <span class="keyword">this</span>; q != <span class="keyword">null</span>; q = q.next) &#123;</span><br><span class="line">            Node&lt;K,V&gt; p = map.replacementNode(q, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tl.next = p;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For conversion from TreeNodes to plain nodes</span></span><br><span class="line"><span class="function">Node&lt;K,V&gt; <span class="title">replacementNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码链画的过程,相当简单,没什么可说的</p><h3 id="红黑树的拆分"><a href="#红黑树的拆分" class="headerlink" title="红黑树的拆分"></a>红黑树的拆分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Splits nodes in a tree bin into lower and upper tree bins,</span></span><br><span class="line"><span class="comment"> * or untreeifies if now too small. Called only from resize;</span></span><br><span class="line"><span class="comment"> * see above discussion about split bits and indices.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map the map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tab the table for recording bin heads</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index the index of the table being split</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bit the bit of hash to split on</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> bit)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; b = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">//  重新链接到 lo 和 hi 列表,保持顺序</span></span><br><span class="line">    TreeNode&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 红⿊树节点仍然保留了 next 引⽤,因此仍可以按链表⽅式遍历红⿊树。下⾯的循环是对红⿊树节点进⾏分组,与普通链表操作类似</span></span><br><span class="line"><span class="comment">      * 下面这个循环进行的事链表的分组曹组</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="keyword">null</span>; e = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">        e.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">            loTail = e;</span><br><span class="line">            ++lc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">            hiTail = e;</span><br><span class="line">            ++hc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (loHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 loHead 不为空,且链表⻓度⼩于等于 6,则将红⿊树转成链表</span></span><br><span class="line">        <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index] = loHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index] = loHead;</span><br><span class="line">            <span class="comment">// hiHead == null 时,表明扩容后,所有节点仍在原位置,树结构不变,⽆需重新树化,否则,将 TreeNode 链表重新树化</span></span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                loHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index + bit] = hiHead;</span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="keyword">null</span>)</span><br><span class="line">                hiHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>这段逻辑发生在数据扩容的时候,对于红黑树节点的处理。<br>红黑树的扩容逻辑和链表的扩容逻辑整体上类似。唯一不同的是,除了这段逻辑将红黑树分组后,会判断链表的长度,如果小于UNTREEIFY_THRESHOLD ,会进行红黑树转链表的操作。否则根据条件,将链表树化为红黑树</p><h2 id="问题答疑"><a href="#问题答疑：" class="headerlink" title="问题答疑："></a>问题答疑：</h2><h3 id="问题1"><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h3><p><strong>问题：为什么集合的初始容量必须是2的n次幂?如果输入值不是2的幂,比如17会怎么样?</strong></p><p>这样做是为了<code>减少</code>hash碰撞的次数, 2的n次方实际就是1后面n个0,2的n次方减1二进制表示时实际就是n个1</p><blockquote><p><strong>按位与运算</strong> : 相同的二进制数位上,都是1的时候,结果为1,否则为零。</p></blockquote><blockquote><p><strong>按位或运算</strong> ： 相同的二进制数位上,都是0的时候,结果为0,否则为1。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">hash计算存放位置的时候,是通过 hash &amp; (length-1)</span><br><span class="line">例如1：</span><br><span class="line">hash值如果为3,hashmap默认容量为16  ,即 3 &amp; (16-1)</span><br><span class="line">0000 0011    3</span><br><span class="line">0000 1111    15</span><br><span class="line">------------------</span><br><span class="line">0000 0011    3  索引值为3</span><br><span class="line"></span><br><span class="line">例如2：</span><br><span class="line">hash值如果为5,hashmap默认容量为16  ,即 5 &amp; (16-1)</span><br><span class="line">0000 0101    5</span><br><span class="line">0000 1111    15</span><br><span class="line">------------------</span><br><span class="line">0000 0101    5  索引值为5</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line">如果不是2的n次幂</span><br><span class="line">hash值如果为3,hashmap容量设置为17  ,即 3 &amp; (17-1)</span><br><span class="line">0000 0011    3  </span><br><span class="line">0001 0000    16</span><br><span class="line">------------------</span><br><span class="line">0000 0000    0 索引位置为0</span><br><span class="line"></span><br><span class="line">hash值如果为7,hashmap容量设置为17  ,即 7 &amp; (17-1)</span><br><span class="line">0000 0111    7</span><br><span class="line">0001 0000    16</span><br><span class="line">------------------</span><br><span class="line">0000 0000    0 索引位置为0</span><br><span class="line"></span><br><span class="line">hash值如果为9,hashmap容量设置为17  ,即 7 &amp; (17-1)</span><br><span class="line">0000 1001    9</span><br><span class="line">0001 0000    16</span><br><span class="line">------------------</span><br><span class="line">0000 0000    0 索引位置为0</span><br></pre></td></tr></table></figure><p>由上面可以看出,当我们根据key的hash确定其在数组的位置时, 如果n为2的幂次方,可以保证数据的均匀插入,如果n不是2的幂次方,可能数组的一些位置永远不会插入数据,浪费数组的空间,加大hash冲突。因此,HashMap 容量为2次幂的原因,就是为了数据的的均匀分布,减少hash冲突,毕竟hash冲突越大, 代表数组中一个链的长度越大,这样的话会降低hashmap的性能</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p><strong>如果初始hashmap的容量不是2的n次幂,会做哪些操作</strong><br>如果创建HashMap对象时,输入的数组长度是17,不是2的幂,HashMap通过<code>移位运算</code>和<code>或运算</code>得到比那个数大且最近的二次幂数字。例如如果容量是17,初始化容量就是返回32</p><p>jdk1.8 表改变大小的源码操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回给定目标容量的2次幂大小。  </span></span><br><span class="line"><span class="comment">     * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再次强调一下：</p><blockquote><p><strong>按位与运算</strong> : 相同的二进制数位上,都是1的时候,结果为1,否则为零。</p></blockquote><blockquote><p><strong>按位或运算</strong> ： 相同的二进制数位上,都是0的时候,结果为0,否则为1。<br>1是负数  0正数</p></blockquote><p>下面看看这几个无符号右移操作是干什么的  </p><p><strong>第一种情况,容量传递的是0</strong></p><p>如果n这时为0了(经过了cap-1之后) , 则经过后面的几次无符号右移依然是0,最后返回的capacity是1 </p><p><strong>第二种情况,n不等于0</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">HashMap &lt;String,Object&gt; hashmap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">17</span>);</span><br><span class="line">cap = <span class="number">17</span></span><br><span class="line"><span class="keyword">int</span> n = cap - <span class="number">1</span> = <span class="number">16</span>;</span><br><span class="line">第一次无符号右移一位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">0000</span>    n=<span class="number">16</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">1000</span>    n &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1000</span>    <span class="number">24</span> ===&gt;n</span><br><span class="line"></span><br><span class="line">第二次无符号右移<span class="number">2</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1000</span>    n=<span class="number">24</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0110</span>    n &gt;&gt;&gt; <span class="number">2</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1110</span>    n = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">第三次无符号右移<span class="number">4</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1110</span>    n = <span class="number">30</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0001</span>    n &gt;&gt;&gt; <span class="number">4</span></span><br><span class="line">------------------------------------------------------ </span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n = <span class="number">31</span></span><br><span class="line"></span><br><span class="line">第四次无符号右移<span class="number">8</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>    n &gt;&gt;&gt; <span class="number">8</span></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"></span><br><span class="line">第五次无符号右移<span class="number">16</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>    n &gt;&gt;&gt; <span class="number">16</span></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line">执行最后一行代码操作,n&gt;<span class="number">0</span>且小于最大容量,返回<span class="number">31</span>+<span class="number">1</span> = <span class="number">32</span></span><br><span class="line"><span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>第三种情况Hashmap最大容量的移动位置操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0010</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">2</span>^<span class="number">30</span></span><br><span class="line"><span class="keyword">int</span> n = cap-<span class="number">1</span>;</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n=<span class="number">2</span>^<span class="number">30</span> -<span class="number">1</span>   </span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n&gt;&gt;&gt;<span class="number">2</span></span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">最后得到的值一定为</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line">加一操作后为</span><br><span class="line"><span class="number">0010</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>    <span class="number">2</span>^<span class="number">30</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong> ：如果容量大于MAXIMUM_CAPACITY  则取最大容量。不到2^30 的容量,通过移位操作后,会得到大于值的最小2的幂。如果当前值就是2的幂次方,返回当前值</p><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p><strong>为什么Map桶中的节点个数要超过8才转红黑树</strong><br>因为树节点的大小大约是普通节点的两倍,所以我们只在链表中包含足够的节点时才使用树节点(参见TREEIFY_THRESHOLD)。当它们变得太小(由于删除或调整大小)时,就会被转换回普通的桶。在使用分布良好的用户hashcode时,很少使用树箱。理想情况下,在随机哈希码下,箱子中节点的频率服从泊松分布,默认调整阈值为0.75,平均参数约为0.5,尽管由于调整粒度的差异很大。忽略方差,列表大小k的预期出现次数是(exp(-0.5)*pow(0.5,k)/factorial(k)).<br>     *<br>     * 0:    0.60653066<br>     * 1:    0.30326533<br>     * 2:    0.07581633<br>     * 3:    0.01263606<br>     * 4:    0.00157952<br>     * 5:    0.00015795<br>     * 6:    0.00001316<br>     * 7:    0.00000094<br>     * 8:    0.00000006<br>     * more: less than 1 in ten million<br>1.TreeNodes占用空间是普通Nodes的两倍,所以只有当链表中包含足够多的节点时才会转成TreeNodes,而是否足够多就是由TREEIFY_THRESHOLD（8）的值决定的。<br>当链表中节点数变少时, 红黑树又会转成普通的链表。并且我们查看源码的时候发现,链表长度达到8(桶的数量要大于64)就转成红黑树,当长度降到6就转成普通链表<br>这样就解释了为什么不是一开始就将其转换为TreeNodes, 而是需要一定节点数才转为TreeNodes, 说白了就是权衡,空间和时间的权衡。</p><p>2.当hashCode离散性很好的时候,树型节点用到的概率非常小,因为数据均匀分布在每个桶中,几乎不会有桶中链表长度会达到阈值。但是在随机hashCode下,离散性可能会变差,然而JDK又不能阻止用户实现这种不好的hash算法,因此就可能导致不均匀的数据分布。不过<strong>理想情况</strong>下随机hashCode算法下所有桶中节点的分布频率会遵循<strong>泊松分布</strong>,我们可以看到,一个桶中链表长度达到8个元素的概率为0.00000006. 几乎是不可能事件。所以,之所以选择8,不是随便决定的,而是根据概率统计决定的。</p><p>下面是我找的一个<code>泊松分布</code> 示意图<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83.png?versionId=CAEQGxiBgIDF.fqw2hciIGMxZjNiNzhmMDM0NzQyZjQ5OGE0MWY2OGM5MTg5MzZi"></p><p>图片原来链接：<a href="http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html">http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html</a><br>可以参考看下</p><h4 id="问题4"><a href="#问题4：" class="headerlink" title="问题4："></a>问题4：</h4><p><strong>基于JDK1.8,hashmap引入了红黑树,为什么一开始不按照红黑树存储。非要等到链表长度大于8才转换</strong></p><p>1.JDK 1.8以前HashMap的实现是<code>数组+链表</code>,即使哈希函数取得再好,也很难达到元素百分百均匀分布。当HashMap中有大量的元素都存放到同一个桶中时,这个桶下有一条长长的链表, 这个时候HashMap就相当于一个单链表,假如单链表有n个元素,遍历的时间复杂度就是O(n),完全失去了它的优势。针对这种情况,JDK 1.8中引入了红黑树(查找时间复杂度为O(logn))来优化这个问题。当链表长度很小的时候, 即使遍历,速度也非常快,但是当链表长度不断变长,肯定会对查询性能有一定的影响, 所以才需要转成树。</p><p>2.TreeNodes占用空间是普通Nodes的两倍,当元素较少时,增加多余的开销</p><h4 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h4><p><strong>问题：为什么不使用AVL树而使用红黑树</strong><br>红黑树和AVL树都是最常用的平衡二叉搜索树，它们的查找、删除、修改都是O(lgn) time</p><p>AVL树和红黑树有几点比较和区别：<br>（1）AVL树是更加严格的平衡，因此可以提供更快的查找速度，一般读取查找密集型任务，适用AVL树。<br>（2）红黑树更适合于插入修改密集型任务。<br>（3）通常，AVL树的旋转比红黑树的旋转更加难以平衡和调试。<br>原文链接：<a href="https://blog.csdn.net/21aspnet/article/details/88939297">https://blog.csdn.net/21aspnet/article/details/88939297</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最后提供一个红黑树的学习地址,里面包含的各种数据结构,便于学习和理解数据结构<br><a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">https://www.cs.usfca.edu/~galles/visualization/RedBlack.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jdk17-hashmap&quot;&gt;&lt;a href=&quot;#JDK1-7-HashMap&quot; class=&quot;headerlink&quot; title=&quot;JDK1.7 HashMap&quot;&gt;&lt;/a&gt;JDK1.7 HashMap&lt;/h1&gt;&lt;h1 id=&quot;jdk18-hashmap&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="JDK" scheme="https://lswisdom.github.io/categories/JDK/"/>
    
    
    <category term="Java集合" scheme="https://lswisdom.github.io/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="https://lswisdom.github.io/posts/2388768520/"/>
    <id>https://lswisdom.github.io/posts/2388768520/</id>
    <published>2021-08-16T00:07:45.000Z</published>
    <updated>2022-10-30T03:03:15.998Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="红黑树基本讲解"><a href="#红黑树基本讲解" class="headerlink" title="红黑树基本讲解"></a>红黑树基本讲解</h1><h2 id="1-基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><p> R-B Tree，全称是Red-Black Tree，又称为“红黑树”，它一种特殊的二叉查找树。红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。</p><p><strong>红黑树的特性</strong>:</p><h3 id="11-性质"><a href="#1-1-性质" class="headerlink" title="1.1 性质"></a>1.1 性质</h3><ul><li>性质1: 每个节点要么是黑色，要么是红色。</li><li>性质2: 根节点是黑色。</li><li>性质3: 每个叶子节点(NIL) 是黑色。</li><li>性质4: 每个红色节点的两个子节点一定都是黑色。</li><li>性质5: 任意节点到每个叶子节 点的路径都包含数量相同的黑结点。从性质5又可以推出:<br>性质5.1:如果一个节点存在黑子节点， 那么该结点肯定有两个子节点</li></ul><p>如图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/01%E7%BA%A2%E9%BB%91%E6%A0%91.png?versionId=CAEQGxiBgMDfgpax2hciIDA3YmY1NDIwZWI3ODRhOGJhMmVmY2Q4MTQxOGExYzY1"></p><p><strong>红黑树</strong> 并不是一个完美平衡二叉查找树，从图上可以看到，根结点<strong>100</strong> 的左子树显然比右子树高，但左子树和右子树的黑结点的层数是相等的，也即任意一个结点到到每 个叶子结点的路径都包含数量相同的黑结点(性质5)。<br>所以我们叫红黑树这种平衡为黑色完美平衡。</p><h3 id="12-自平衡操作"><a href="#1-2-自平衡操作" class="headerlink" title="1.2 自平衡操作"></a>1.2 自平衡操作</h3><ul><li><strong>变色</strong> : 结点的颜色由红变黑或由黑变红</li><li>**左旋 **: 以某个结点作为支点(旋转结点)，其右子结点变为旋转结点的父结点,右子结点的左子结点变为旋转结点的右子结点，左子结点保持不变</li><li><strong>右旋</strong> : 以某个结点作为支点(旋转结点),   其左子结点变为旋转结点的父结点，左子结点的右子结点变为旋转结点的左子结点，右子结点保持不变</li></ul><p>红黑树<strong>右旋</strong>操作如下所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/02%20%E7%BA%A2%E9%BB%91%E6%A0%91%E5%8F%B3%E6%97%8B%E6%93%8D%E4%BD%9C.png?versionId=CAEQGxiBgMDpgpax2hciIDhmMjExMWQ2ZjU4ZjQ2ODU4M2ZkYzc4MmQ4MjVlN2Fh"></p><p>红黑树<strong>左旋</strong> 操作</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/03%E7%BA%A2%E9%BB%91%E6%A0%91%E5%B7%A6%E6%97%8B%E6%93%8D%E4%BD%9C.png?versionId=CAEQGxiBgMDogpax2hciIGQ0NmQ2NDZhYmEzZjQ2NjRiNGU3Y2I1ODliN2ZkYzUz"></p><h3 id="13-红黑树的查找"><a href="#1-3-红黑树的查找" class="headerlink" title="1.3 红黑树的查找"></a>1.3 红黑树的查找</h3><p>红黑树的查找和二叉树的查找操作类似</p><h3 id="14-红黑树的插入"><a href="#1-4-红黑树的插入" class="headerlink" title="1.4 红黑树的插入"></a>1.4 红黑树的插入</h3><p>插入操作包括两部分：1.查找要插入节点的父节点  2.插入后进行树的平衡操作</p><p><strong>注意</strong>: 插入节点,必须为红色，理由很简单,红色的父节点(如果存在)为黑色节点时，红黑树的黑色平衡没被破坏，不需要做自平衡操作。但如果插入结点是黑色，那么插入位置所在的子树黑色结点总是多1,必须做自平衡。</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E8%8A%82%E7%82%B9%E4%BB%8B%E7%BB%8D.png?versionId=CAEQGxiBgMDShJax2hciIDA2NjY3OTMzODlhMDQ0NmZhZThmOWUwNWZjN2Q0NzEw"></p><h2 id="2红黑树的插入情景分析"><a href="#2-红黑树的插入情景分析" class="headerlink" title="2.红黑树的插入情景分析"></a>2.红黑树的插入情景分析</h2><h3 id="情景1插入的节点为空树"><a href="#情景1：插入的节点为空树" class="headerlink" title="情景1：插入的节点为空树"></a>情景1：插入的节点为空树</h3><p>直接把插入的节点作为根节点就可以了，并且把根节点变成黑色</p><h3 id="情景2插入节点的key已存在"><a href="#情景2：插入节点的Key已存在" class="headerlink" title="情景2：插入节点的Key已存在"></a>情景2：插入节点的Key已存在</h3><p>处理：更新当前节点的值，为插入节点的值</p><h3 id="情景3-插入结点的父结点为黑结点"><a href="#情景3-插入结点的父结点为黑结点" class="headerlink" title="情景3   插入结点的父结点为黑结点"></a>情景3   插入结点的父结点为黑结点</h3><p>由于插入的结点是红色的，并不会影响红黑树的平衡，直接插入即可，无需做自平衡。如图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E6%99%AF3.png?versionId=CAEQGxiBgIDXhJax2hciIDU4NTU3MTA5ODQ3OTRhMGQ4MDNmNmUxNWUyZTg1NWI3"></p><h3 id="情景4插入节点的父节点为红色"><a href="#情景4：插入节点的父节点为红色" class="headerlink" title="情景4：插入节点的父节点为红色"></a>情景4：插入节点的父节点为红色</h3><p>红黑树的性质2:  根结点是黑色，如果插入节点的父结点为红结点，那么该父结点不可能为根结点，所以插入结点总是存在祖父结点。</p><p>分为两种情况，如下图所示</p><ul><li>一种是爸爸节点为红色，叔叔节点也是红色</li><li>一种是爸爸节点为红色，叔叔节点为黑色或者不存在</li></ul><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E7%88%B8%E7%88%B8%E8%8A%82%E7%82%B9%E5%92%8C%E5%8F%94%E5%8F%94%E8%8A%82%E7%82%B9%E6%98%AF%E7%BA%A2%E8%89%B2.png?versionId=CAEQGxiBgIDqhJax2hciIDMwYWJiMWE2OTFiNjRjYWVhZjkzYTk1NTY4YmMxNGVi"></p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E7%88%B8%E7%88%B8%E4%B8%BA%E7%BA%A2%E8%89%B2%E5%90%8C%E6%97%B6%E5%8F%94%E5%8F%94%E4%B8%BA%E9%BB%91%E8%89%B2%E6%88%96%E8%80%85%E7%A9%BA.png?versionId=CAEQGxiBgMDnhJax2hciIDcyMjBiNDIyMDA1NzQ2Zjg5Yzg1N2YxYjcyZDhlZWUy"></p><h4 id="情景41-叔叔结点存在并且为红结点"><a href="#情景4-1-叔叔结点存在并且为红结点" class="headerlink" title="情景4.1  叔叔结点存在并且为红结点"></a>情景4.1  叔叔结点存在并且为红结点</h4><p>依据红黑树<strong>性质4</strong> 可知，红色节点不能相连==&gt;祖父结点肯定为黑结点。因为不可以同时存在两个相连的红结点。那么此时该插入子树的红黑层数的情况是:黑红红。显然最简单的处理方式是把其改为:红黑红<br>处理:<br>        1  将爸爸节点(P)和叔叔节点(U)节点改为黑色<br>        2  将爷爷PP改为红色<br>        3  将爷爷PP设置为当前节点，进行后续处理</p><p>如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E6%99%AF4.1%E5%8F%98%E6%8D%A2%E5%89%8D%E5%90%8E.png?versionId=CAEQGxiBgMDXhJax2hciIGJlMzQyNmM3YWQ4NzQ1Mzc4M2EyMTAzYzU2MzAwNDgz"></p><p>可以看到，我们把PP结点设为红色了，如果PP的父结点是黑色，那么无需再做任何处理;但如果PP的父结点是红色，则违反了红黑树的性质.所以需要将PP设置为当前节点，继续做插入操作自平衡处理，真到平衡为为止.</p><h4 id="插入情景42-叔叔结点不存在或为黑结点并且插入结点的父亲结点是祖父结点的左子结点"><a href="#插入情景4-2-叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的左子结点" class="headerlink" title="插入情景4.2  叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的左子结点"></a>插入情景4.2  叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的左子结点</h4><p>注意:单纯从插入前来看，叔叔节点非红即空(NIL节点) ，否则的话破坏了红黑树性质5,此路径会比其它路径多-一个黑色节点。</p><p>新插入节点，可能为P节点的左子节点，也可能是P节点的右子节点,所以分为两种情况分别处理</p><h5 id="421-新插入节点为其父节点的左子节点ll红色情况"><a href="#4-2-1-新插入节点，为其父节点的左子节点-LL红色情况" class="headerlink" title="4.2.1 新插入节点，为其父节点的左子节点(LL红色情况)"></a>4.2.1 新插入节点，为其父节点的左子节点(LL红色情况)</h5><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.2.1LL%E5%8F%98%E6%8D%A2%E5%89%8D.png?versionId=CAEQGxiBgIDHgpax2hciIGIwOWQ1OWM0ZjU0NTQwMzk4NGVkN2IxMDA3MTQ2MTVi"></p><p>处理:</p><ol><li>变颜色:将P设置 为黑色，将PP设置为红色 ，然后以爷爷节点为当前节点</li><li>对PP节点进行右旋</li></ol><p>处理结果如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/LL%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86.png?versionId=CAEQGxiCgICihpax2hciIDViZDcwNjZiZTYyODQ0ZmM5MmZlNTRiZDNjYThhMzVk"></p><h5 id="422新插入节点为其父节点的右子节点lr红色情况"><a href="#4-2-2-新插入节点，为其父节点的右子节点-LR红色情况" class="headerlink" title="4.2.2:新插入节点，为其父节点的右子节点(LR红色情况)"></a>4.2.2:新插入节点，为其父节点的右子节点(LR红色情况)</h5><p>![](<a href="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.2.2">https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/数据结构/红黑树/4.2.2</a> LR情况处理前.png?versionId=CAEQGxiBgMDGgpax2hciIDQ5OWRlYzEyMDYzMzQzYTBiZGU4YzJiNDdjMzRiOTNh)</p><p>处理:</p><ol><li>对P进行左旋  </li><li> 将P设置为当前节点，得到LL红色情况 </li><li>按照LL红色情况处理(1.变颜色2.右旋PP)</li></ol><p>操作过程如下图所示：</p><p>第一步</p><p>![](<a href="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.2.2">https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/数据结构/红黑树/4.2.2</a> LR情况处理第一步.png?versionId=CAEQGxiBgMDLgpax2hciIDAyZmQ4NzY0NjBjNTQ4MTJiMmUxNDIyZTViZWI1MzBk)</p><p>第二步</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/LL%E5%8F%98%E8%89%B2%E6%93%8D%E4%BD%9C%2B%E6%97%8B%E8%BD%AC%E5%B9%B3%E8%A1%A1%E6%93%8D%E4%BD%9C.png?versionId=CAEQGxiBgICehpax2hciIDljNjBkM2NjMGNhOTQyZDJhNmIyZmRhZDc4ODVhMTU2"></p><h4 id="情况43-叔叔结点不存在或为黑结点并且插入结点的父亲结点是祖父结点的右子结点"><a href="#情况4-3-叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的右子结点" class="headerlink" title="情况4.3  叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的右子结点"></a>情况4.3  叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的右子结点</h4><p>和上述操作4.2 相反图，如下所示：</p><h5 id="431-新插入节点为其父节点的右子节点rr红色情况"><a href="#4-3-1-新插入节点，为其父节点的右子节点-RR红色情况" class="headerlink" title="4.3.1 新插入节点，为其父节点的右子节点(RR红色情况)"></a>4.3.1 新插入节点，为其父节点的右子节点(RR红色情况)</h5><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E5%86%B54.3.png?versionId=CAEQGxiBgMDhgpax2hciIGFhMDQyYmU0NjM2YTRhYjQ5ODljMTYyZWM0ZjI3N2Iz"></p><p>处理操作：<br>1.变颜色:  将P设置为黑色，将PP设置为红色</p><p>2.对PP节点进行左旋 </p><p>旋转过程如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.3.1RR%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86.png?versionId=CAEQGxiBgMCmhpax2hciIGJiNGJjNTZkMmRjNDRlZWE4ODY2ZWI0Njc1OTYxMjE5"></p><h5 id="432-新插入节点为其父节点的左子节点rl红色情况"><a href="#4-3-2-新插入节点，为其父节点的左子节点-RL红色情况" class="headerlink" title="4.3.2 新插入节点，为其父节点的左子节点(RL红色情况)"></a>4.3.2 新插入节点，为其父节点的左子节点(RL红色情况)</h5><p>如下图所示：</p><p>![](<a href="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.3.2">https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/数据结构/红黑树/4.3.2</a> RL情况.png?versionId=CAEQGxiBgMClhpax2hciIDc1Yjg2NjViMjIyMjQ4Mzk4MTUyNTEyOWQ2NDA2NGUw)</p><p>处理:<br>1.对P进行右旋<br>2.将P设置为当前节点，得到RR红色情况<br>3.按照RR红色情况处理(1.变颜色2.左旋PP)</p><p>第一步对P节点进行右旋操作   如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E5%86%B54.3.2%E7%AC%AC%E4%B8%80%E6%AD%A5.png?versionId=CAEQGxiCgIDngpax2hciIDViYTc2MTAxZTdmYTRmZDFiNjNiY2E3NjdlMzIwMTMx"></p><p>第二步：变色+旋转，如下图所示</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.3.2RL%E6%83%85%E5%86%B5%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%8F%98%E8%89%B2%2B%E6%97%8B%E8%BD%AC.png?versionId=CAEQGxiBgICihpax2hciIGE0Y2JiM2ZiZTkzZDRmYzc5MDA4NDY4NjhlYTUzZmRi"></p><h3 id="3红黑树代码演示"><a href="#3-红黑树代码演示" class="headerlink" title="3.红黑树代码演示"></a>3.红黑树代码演示</h3><h4 id="31-左右旋参考示意图"><a href="#3-1-左右旋参考示意图" class="headerlink" title="3.1 左右旋参考示意图"></a>3.1 左右旋参考示意图</h4><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%B7%A6%E5%8F%B3%E6%97%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png?versionId=CAEQGxiBgMDWhJax2hciIDU4NzYxMjk1NGRiMDQ0NTY5NzAwNjBkMzNiNTYyYThk"></p><h4 id="32-代码演示"><a href="#3-2-代码演示" class="headerlink" title="3.2 代码演示"></a>3.2 代码演示</h4><p>RBTree.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTree</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>   RBNode root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBNode <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前节点的父节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RBNode <span class="title">parentOf</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点是否为红色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.color == RED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点是否为黑色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBlack</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.color == BLACK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置节点为红色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRed</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            node.color = RED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置节点颜色为黑色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBlack</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            node.color = BLACK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inOrderPrint(<span class="keyword">this</span>.root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrderPrint</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inOrderPrint(node.left);</span><br><span class="line">            System.out.println(<span class="string">&quot; key: &quot;</span> + node.key + <span class="string">&quot;  ,value:&quot;</span> + node.value);</span><br><span class="line">            inOrderPrint(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左旋示意图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBNode x)</span> </span>&#123;</span><br><span class="line">        RBNode y = x.right;</span><br><span class="line">        x.right = y.left;</span><br><span class="line">        <span class="comment">// 1.将x的右子节点指定y的左子节点（ly) ,将y的左子节点的父节点更新为x</span></span><br><span class="line">        <span class="keyword">if</span> (y.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y.left.parent = x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.当x的父节点(不为空时) ,更新y的父节点为x的父节点 ，并将x的父节点的 子树（当前x的指数位置）指定为y</span></span><br><span class="line">        <span class="keyword">if</span> (x.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果x节点原来为其父节点的左节点，左旋时，就需要把y节点也放在左节点的位置</span></span><br><span class="line">            <span class="keyword">if</span> (x == x.parent.left) &#123;</span><br><span class="line">                x.parent.left = y;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果x节点原来为其父节点的右节点，左旋时，就需要把y节点也放在左节点的位置</span></span><br><span class="line">                x.parent.right = y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 说民x节点为根节点 故所以更新y节点为根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = y;</span><br><span class="line">            <span class="keyword">this</span>.root.parent = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.将x的父节点更新为y ,并将y的左子节点更新为x</span></span><br><span class="line">        x.parent = y;</span><br><span class="line">        y.left = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右旋操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBNode y)</span> </span>&#123;</span><br><span class="line">        RBNode x = y.left;</span><br><span class="line">        <span class="comment">// 1.将y的左子节点更新为x的右子节点，并且更新x的右子节点的父节点为y</span></span><br><span class="line">        y.left = x.right;</span><br><span class="line">        <span class="keyword">if</span> (x.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.right.parent = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.当y的父节点不为空时，更新x的父节点为y的父节点。更新y的父节点的指定子节点为x</span></span><br><span class="line">        <span class="keyword">if</span> (y.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.parent = y.parent;</span><br><span class="line">            <span class="comment">// 此时不知道原先y是在其父节点的左侧还是右侧，所以要先判断</span></span><br><span class="line">            <span class="keyword">if</span> (y == y.parent.left) &#123;</span><br><span class="line">                y.parent.left = x;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                y.parent.right = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有父节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = x;</span><br><span class="line">            <span class="keyword">this</span>.root.parent = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.更新y的节点为x,并且更新x的节点为y</span></span><br><span class="line">        y.parent = x;</span><br><span class="line">        x.right = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   插入key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        RBNode rbNode = <span class="keyword">new</span> RBNode();</span><br><span class="line">        rbNode.setKey(key);</span><br><span class="line">        rbNode.setValue(value);</span><br><span class="line">        rbNode.setColor(RED);</span><br><span class="line">        insert(rbNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入红黑树节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.查找当前节点的父节点</span></span><br><span class="line">        RBNode parent = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 获取根节点，开始寻找</span></span><br><span class="line">        RBNode x = <span class="keyword">this</span>.root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parent = x;</span><br><span class="line">            <span class="keyword">int</span> result = node.key.compareTo(x.key);</span><br><span class="line">            <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 说明当前节点应该放在x节点的右子树</span></span><br><span class="line">                x = x.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 说明当前节点应该放在左子树上</span></span><br><span class="line">                x = x.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果key值相等，需要进行值的替换</span></span><br><span class="line">                x.setValue(node.getValue());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录父节点</span></span><br><span class="line">        node.parent = parent;</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断当前节点和父节点的key值大小，从而确定新插入的节点应该放在父节点的左侧还是右侧</span></span><br><span class="line">            <span class="keyword">int</span> result = node.key.compareTo(parent.key);</span><br><span class="line">            <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                parent.right = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent.left = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果没有父亲节点,当前节点就是根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 红黑树插入新节点后，需要进行平衡操作，也就是左旋或者右旋操作</span></span><br><span class="line">        balanceInsertion(node);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树插入节点后，需要进行平衡操作</span></span><br><span class="line"><span class="comment">     *       情景1： 红黑树为空树时,将根节点染成黑色</span></span><br><span class="line"><span class="comment">     *       情景2： 插入的节点在红黑树已经存在,不需要处理</span></span><br><span class="line"><span class="comment">     *       情景3： 插入节点的父节点为黑色，因为所插入的路径，黑色节点没有发生变化，所以红黑树依然平衡，所以不需要处理</span></span><br><span class="line"><span class="comment">     *       情景4： 插入节点的父节点为红色</span></span><br><span class="line"><span class="comment">     *              情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点) 根据红黑树性质4.红色节点不能直接相连，由此可知必然存在爷爷节点,且爷爷节点必定为黑节点</span></span><br><span class="line"><span class="comment">     *                          由此可以 a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line"><span class="comment">     *              情景4.2  叔叔节点不存在或者为黑色节点，父节点为爷爷节点的左子树</span></span><br><span class="line"><span class="comment">     *                      情景4.2.1 插入节点为其父节点的左子节点(LL情况) a.将爸爸节点染成黑色 b.将爷爷染成红色 c.然后已爷爷节点进行右旋操作</span></span><br><span class="line"><span class="comment">     *                      情景4.2.2 插入节点为其父节点的右子节点(LR情况) a.已爸爸为节点进行一次左旋操作,得到(LL双红的情况 4.2.1) 然后指定爸爸节点为当前节点,执行下一轮的操作</span></span><br><span class="line"><span class="comment">     *              情景4.3  叔叔节点不存在,或者为黑色节点,父节点为爷爷节点的右子树</span></span><br><span class="line"><span class="comment">     *                      情景4.3.1 插入节点为其父节点的右子节点(RR情况) a.将爸爸染成黑色节点  b.将爷爷染成红色 c.然后已爷爷节点进行左旋操作</span></span><br><span class="line"><span class="comment">     *                      情景4.3.2 插入节点为其父节点的左子节点(RL情况) a.以爸爸节点进行一次右旋,得到RR双红的场景( RR情况 4.3.1).然后指定爸爸节点为当前节点,进行下一轮的操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">balanceInsertion</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root.setColor(BLACK);</span><br><span class="line">        <span class="comment">// 1.获取父节点和爷爷节点</span></span><br><span class="line">        RBNode parent = parentOf(node);</span><br><span class="line">        RBNode gparent = parentOf(parent);</span><br><span class="line">        <span class="comment">// 情景3 : 插入节点的父节点为黑色,不需要处理</span></span><br><span class="line">        <span class="comment">// 情景4： 插入节点的父节点为红色</span></span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span> &amp;&amp; isRed(parent)) &#123;</span><br><span class="line">            <span class="comment">// 叔叔节点</span></span><br><span class="line">            RBNode uncle = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 如果爸爸是爷爷的左孩子，那么叔叔必然是爷爷的右孩子,反之一样</span></span><br><span class="line">            <span class="keyword">if</span> (parent == gparent.left) &#123;</span><br><span class="line">                uncle = gparent.right;</span><br><span class="line">                <span class="comment">// 情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点)</span></span><br><span class="line">                <span class="keyword">if</span> (uncle != <span class="keyword">null</span> &amp;&amp; isRed(uncle)) &#123;</span><br><span class="line">                    <span class="comment">// a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line">                    setBlack(parent);</span><br><span class="line">                    setBlack(uncle);</span><br><span class="line">                    setRed(gparent);</span><br><span class="line">                    balanceInsertion(gparent);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 情景4.2  叔叔节点不存在或者为黑色节点，父节点为爷爷节点的左子树</span></span><br><span class="line">                <span class="keyword">if</span> (uncle == <span class="keyword">null</span> || isBlack(uncle)) &#123;</span><br><span class="line">                    <span class="comment">// 情景4.2.1 插入节点为其父节点的左子节点(LL情况)</span></span><br><span class="line">                    <span class="keyword">if</span> (node == parent.left) &#123;</span><br><span class="line">                        <span class="comment">// a.将爸爸节点染成黑色 b.将爷爷染成红色 c.然后已爷爷节点进行右旋操作</span></span><br><span class="line">                        setBlack(parent);</span><br><span class="line">                        setRed(gparent);</span><br><span class="line">                        rightRotate(gparent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 情景4.2.2 插入节点为其父节点的右子节点(LR情况)</span></span><br><span class="line">                    <span class="keyword">if</span> (node == parent.right) &#123;</span><br><span class="line">                        <span class="comment">// a.已爸爸为节点进行一次左旋操作,得到(LL双红的情况 4.2.1) 然后指定爸爸节点为当前节点,执行下一轮的操作</span></span><br><span class="line">                        leftRotate(parent);</span><br><span class="line">                        balanceInsertion(parent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 父节点为爷爷节点的右子树,则叔叔节点就是爷爷节点的左子树</span></span><br><span class="line">                uncle = gparent.left;</span><br><span class="line">                <span class="comment">// 情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点)</span></span><br><span class="line">                <span class="keyword">if</span> (uncle != <span class="keyword">null</span> &amp;&amp; isRed(uncle)) &#123;</span><br><span class="line">                    <span class="comment">// a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line">                    setBlack(parent);</span><br><span class="line">                    setBlack(uncle);</span><br><span class="line">                    setRed(gparent);</span><br><span class="line">                    balanceInsertion(gparent);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 情景4.3  叔叔节点不存在,或者为黑色节点,父节点为爷爷节点的右子树</span></span><br><span class="line">                <span class="keyword">if</span> (uncle == <span class="keyword">null</span> || isBlack(uncle)) &#123;</span><br><span class="line">                    <span class="comment">// 情景4.3.1 插入节点为其父节点的右子节点(RR情况) a.将爸爸染成黑色节点  b.将爷爷染成红色 c.然后已爷爷节点进行左旋操作</span></span><br><span class="line">                    <span class="keyword">if</span> (node == parent.right) &#123;</span><br><span class="line">                        setBlack(parent);</span><br><span class="line">                        setRed(gparent);</span><br><span class="line">                        leftRotate(gparent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 情景4.3.2 插入节点为其父节点的左子节点(RL情况)</span></span><br><span class="line">                    <span class="keyword">if</span> (node == parent.left) &#123;</span><br><span class="line">                        <span class="comment">// a.以爸爸节点进行一次右旋,得到RR双红的场景( RR情况 4.3.1).然后指定爸爸节点为当前节点,进行下一轮的操作</span></span><br><span class="line">                        rightRotate(parent);</span><br><span class="line">                        balanceInsertion(parent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RBNode</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> RBNode parent;</span><br><span class="line">        <span class="keyword">private</span> RBNode left;</span><br><span class="line">        <span class="keyword">private</span> RBNode right;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> color;</span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RBNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RBNode</span><span class="params">(RBNode parent, RBNode left, RBNode right, <span class="keyword">boolean</span> color, K key, V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">            <span class="keyword">this</span>.color = color;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RBNode <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(RBNode parent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RBNode <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(RBNode left)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RBNode <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(RBNode right)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">boolean</span> color)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.color = color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="33-运行结果演示"><a href="#3-3-运行结果演示" class="headerlink" title="3.3 运行结果演示"></a>3.3 运行结果演示</h4><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png?versionId=CAEQGxiBgMDihJax2hciIDM0ZmZjMjI3ZDBlZDRhMzViZDUyNmZmNzIwZmNlZmZk"></p><p>没做类型处理，插入的都是字符串比较，按照字符串的ASICC进行排序和平衡，颜色就是区分显示，不表示红黑色</p><h3 id="4红黑树学习地址"><a href="#4-红黑树学习地址" class="headerlink" title="4.红黑树学习地址"></a>4.红黑树学习地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cs.usfca.edu&#x2F;~galles&#x2F;visualization&#x2F;RedBlack.html</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;红黑树基本讲解&quot;&gt;&lt;a href=&quot;#红黑树基本讲解&quot; class=&quot;headerlink&quot; title=&quot;红黑树基本讲解&quot;&gt;&lt;/a&gt;红黑树基本讲解&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    <category term="JDK" scheme="https://lswisdom.github.io/categories/JDK/"/>
    
    
    <category term="Java集合" scheme="https://lswisdom.github.io/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>JDK1.8 HashMap源码简单讲解</title>
    <link href="https://lswisdom.github.io/posts/221454775/"/>
    <id>https://lswisdom.github.io/posts/221454775/</id>
    <published>2021-08-16T00:00:00.000Z</published>
    <updated>2022-10-30T03:03:16.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jdk18-hashmap源码简单讲解"><a href="#JDK1-8-HashMap源码简单讲解" class="headerlink" title="JDK1.8 HashMap源码简单讲解"></a>JDK1.8 HashMap源码简单讲解</h1><h2 id="1成员常量类"><a href="#1-成员常量类" class="headerlink" title="1.成员常量类"></a>1.成员常量类</h2><h3 id="11-序列化版本号"><a href="#1-1-序列化版本号" class="headerlink" title="1.1  序列化版本号"></a>1.1  序列化版本号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br></pre></td></tr></table></figure><h3 id="12-集合的初始容量"><a href="#1-2-集合的初始容量" class="headerlink" title="1.2 集合的初始容量"></a>1.2 集合的初始容量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> * 默认容量是16,必须是2的n的n次幂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure><h4 id="121-问题为什么必须是2的n次幂如果输入值不是2的幂比如17会怎么样"><a href="#1-2-1-问题：为什么必须是2的n次幂-如果输入值不是2的幂-比如17会怎么样" class="headerlink" title="1.2.1 问题：为什么必须是2的n次幂?如果输入值不是2的幂,比如17会怎么样?"></a>1.2.1 问题：为什么必须是2的n次幂?如果输入值不是2的幂,比如17会怎么样?</h4><p>这样做是为了减少hash碰撞的次数， 2的n次方实际就是1后面n个0，2的n次方减1二进制表示时实际就是n个1;</p><p><strong>按位与运算</strong> : 相同的二进制数位上,都是1的时候，结果为1,否则为零。</p><p><strong>按位或运算</strong> ： 相同的二进制数位上,都是0的时候，结果为0,否则为1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">hash计算存放位置的时候,是通过hash&amp;(length-<span class="number">1</span>)</span><br><span class="line">例如<span class="number">1</span>：</span><br><span class="line">hash值如果为<span class="number">3</span>,hashmap默认容量为<span class="number">16</span>  ,即 <span class="number">3</span> &amp; (<span class="number">16</span>-<span class="number">1</span>)</span><br><span class="line"><span class="number">0000</span> <span class="number">0011</span>    <span class="number">3</span></span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span>    <span class="number">15</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0011</span>    <span class="number">3</span>  索引值为<span class="number">3</span></span><br><span class="line"></span><br><span class="line">例如<span class="number">2</span>：</span><br><span class="line">hash值如果为<span class="number">5</span>,hashmap默认容量为<span class="number">16</span>  ,即 <span class="number">5</span> &amp; (<span class="number">16</span>-<span class="number">1</span>)</span><br><span class="line"><span class="number">0000</span> <span class="number">0101</span>    <span class="number">5</span></span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span>    <span class="number">15</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0101</span>    <span class="number">5</span>  索引值为<span class="number">5</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line">如果不是<span class="number">2</span>的n次幂</span><br><span class="line">hash值如果为<span class="number">3</span>,hashmap容量设置为<span class="number">17</span>  ,即 <span class="number">3</span> &amp; (<span class="number">17</span>-<span class="number">1</span>)</span><br><span class="line"><span class="number">0000</span> <span class="number">0011</span>    <span class="number">3</span>  </span><br><span class="line"><span class="number">0001</span> <span class="number">0000</span>    <span class="number">16</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>    <span class="number">0</span> 索引位置为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">hash值如果为<span class="number">7</span>,hashmap容量设置为<span class="number">17</span>  ,即 <span class="number">7</span> &amp; (<span class="number">17</span>-<span class="number">1</span>)</span><br><span class="line"><span class="number">0000</span> <span class="number">0111</span>    <span class="number">7</span></span><br><span class="line"><span class="number">0001</span> <span class="number">0000</span>    <span class="number">16</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>    <span class="number">0</span> 索引位置为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">hash值如果为<span class="number">9</span>,hashmap容量设置为<span class="number">17</span>  ,即 <span class="number">7</span> &amp; (<span class="number">17</span>-<span class="number">1</span>)</span><br><span class="line"><span class="number">0000</span> <span class="number">1001</span>    <span class="number">9</span></span><br><span class="line"><span class="number">0001</span> <span class="number">0000</span>    <span class="number">16</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>    <span class="number">0</span> 索引位置为<span class="number">0</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>​            1.由上面可以看出，当我们根据key的hash确定其在数组的位置时， 如果n为2的幂次方，可以保证数据的均匀插入，如果n不是2的幂次方，可能数组的一些位置永远不会插入数据，浪费数组的空间，加大hash冲突。因此，HashMap 容量为2次幂的原因，就是为了数据的的均匀分布，减少hash冲突,毕竟hash冲突越大, 代<br>表数组中一个链的长度越大，这样的话会降低hashmap的性能</p><h4 id="122-为什么不直接进行取余运算而是通过位运算"><a href="#1-2-2-为什么不直接进行取余运算，而是通过位运算" class="headerlink" title="1.2.2 为什么不直接进行取余运算，而是通过位运算"></a>1.2.2 为什么不直接进行取余运算，而是通过位运算</h4><p>在计算中，数据是采用0101存储的，位运算的效率远比取模%高，所以，使用位运算代替取余操作，来确定元素的存储问题。当前两种方式，得到的结果都是一样的，只是效率不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash &amp; (length-1)&#x3D;&#x3D; hash % length</span><br></pre></td></tr></table></figure><h4 id="123-如果初始hashmap的容量不是2的n次幂会做哪些操作"><a href="#1-2-3-如果初始hashmap的容量不是2的n次幂，会做哪些操作" class="headerlink" title="1.2.3 如果初始hashmap的容量不是2的n次幂，会做哪些操作"></a>1.2.3 如果初始hashmap的容量不是2的n次幂，会做哪些操作</h4><p>如果创建HashMap对象时，输入的数组长度是17,不是2的幂，HashMap通过移位运算和或运算得到<br>的肯定是2的幂次数,并且是离那个数最近的数字。例如如果容量是17，初始化容量就是返回32</p><p>下述源码就是初始化时指定大小和负载因子</p><p>jdk1.8源码操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span></span><br><span class="line"><span class="comment">  * capacity and load factor.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  initialCapacity the initial capacity</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  loadFactor      the load factor</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative</span></span><br><span class="line"><span class="comment">  *         or the load factor is nonpositive</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 如果初始容量小于0,抛出异常</span></span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                            initialCapacity);</span><br><span class="line">     <span class="comment">// 如果初始容量大于最大容量2^30,复制为最大容量。防止溢出</span></span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">         initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">     <span class="comment">// 负载因子小于0,报错提示</span></span><br><span class="line">     <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                            loadFactor);</span><br><span class="line">     <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">     <span class="comment">// threshold hashmap扩容阈值,注意这个值会发生变化。</span></span><br><span class="line">     <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回给定目标容量的2次幂大小。  </span></span><br><span class="line"><span class="comment">  * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">     n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">     n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">     n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">     n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">     n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">     <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上述代码第二个方法，就是操作</p><p>说明:<br>            由此可以看到，当在实例化HashMap实例时， 如果给定了initialCapacity(假设是17),由于HashMap的capacity必须都是2的幂次方，因此这个方法用于找到大于等于initialCapacity(假设是17)的最小的2的幂(initialCapacity如果就是2的幂次方，比如说16，则返回的还是这个数)。</p><p><strong>下面分析这段源码算法:</strong></p><h5 id="a首先为什么要对cap做减1操作"><a href="#a-首先-为什么要对cap做减1操作" class="headerlink" title="a.首先,为什么要对cap做减1操作"></a>a.首先,为什么要对cap做减1操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int n &#x3D; cap - 1</span><br></pre></td></tr></table></figure><p>如果cap已经是2的幂，此时又没有执行这个减1操作, 则执行完后面的几条无符号右移操作之后，返回的capacity将是这个cap的2倍。</p><p><strong>注意：</strong></p><p><strong>按位与运算</strong> : 相同的二进制数位上,都是1的时候，结果为1,否则为零。</p><p><strong>按位或运算</strong> ： 相同的二进制数位上,都是0的时候，结果为0,否则为1。</p><p>b.下面看看这几个无符号右移操作是干什么的  1是负数  0正数</p><p>​       <strong>第一种情况，容量传递的是0</strong></p><p>​            如果n这时为0了(经过了cap-1之后) , 则经过后面的几次无符号右移依然是0,最后返回的capacity是1 </p><p>​        **第二种情况，n不等于0 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">HashMap &lt;String,Object&gt; hashmap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">17</span>);</span><br><span class="line">cap = <span class="number">17</span></span><br><span class="line"><span class="keyword">int</span> n = cap - <span class="number">1</span> = <span class="number">16</span>;</span><br><span class="line">第一次无符号右移一位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">0000</span>    n=<span class="number">16</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">1000</span>    n &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1000</span>    <span class="number">24</span> ===&gt;n</span><br><span class="line"></span><br><span class="line">第二次无符号右移<span class="number">2</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1000</span>    n=<span class="number">24</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0110</span>    n &gt;&gt;&gt; <span class="number">2</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1110</span>    n = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">第三次无符号右移<span class="number">4</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1110</span>    n = <span class="number">30</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0001</span>    n &gt;&gt;&gt; <span class="number">4</span></span><br><span class="line">------------------------------------------------------ </span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n = <span class="number">31</span></span><br><span class="line"></span><br><span class="line">第四次无符号右移<span class="number">8</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>    n &gt;&gt;&gt; <span class="number">8</span></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"></span><br><span class="line">第五次无符号右移<span class="number">16</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>    n &gt;&gt;&gt; <span class="number">16</span></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line">执行最后一行代码操作,n&gt;<span class="number">0</span>且小于最大容量,返回<span class="number">31</span>+<span class="number">1</span> = <span class="number">32</span></span><br><span class="line"><span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>Hashmap最大容量的移动位置操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0010</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">2</span>^<span class="number">30</span></span><br><span class="line"><span class="keyword">int</span> n = cap-<span class="number">1</span>;</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n=<span class="number">2</span>^<span class="number">30</span> -<span class="number">1</span>   </span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n&gt;&gt;&gt;<span class="number">2</span></span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">最后得到的值一定为</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line">加一操作后为</span><br><span class="line"><span class="number">0010</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>    <span class="number">2</span>^<span class="number">30</span></span><br></pre></td></tr></table></figure><p>** 总结** ：如果容量大于MAXIMUM_CAPACITY  则取最大容量。不到2^30 的容量，通过移位操作后，会得到大于值的最小2的幂。如果当前值就是2的幂次方，返回当前值</p><h3 id="13-负载因子"><a href="#1-3-负载因子" class="headerlink" title="1.3 负载因子"></a>1.3 负载因子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负载因子</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><p>对于负载因子，如果没有特别需求，不要轻易进行更改，因为 JDK 自身的默认负载因子是非常符合通用场景的需求的（逼哥讲过大量研究得出）。如果确实需要调整，建议不要设置超过 0.75 的数值，因为会显著增加冲突，降低 HashMap 的性能。如果使用太小的负载因子，可能会导致更加频繁的扩容，增加无谓的开销，本身访问性能也会受影响。</p><ul><li><p>loadFactor越趋近于1,那么数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加。</p></li><li><p>loadFactor越小，也就是趋近于0，数组中存放的数据(entry)也就越少，也就越稀疏。</p></li></ul><p>如果希望链表尽可能少些。要提前扩容，有的数组空间有可能一-直没有存储数据。加载因子尽可能小一些。<br>举例:<br>1.加载因子是0.5。那么16 *  0.5 = 8  如果数组中满8个空间就扩容，这样会造成数组利用率太低了。<br>2.加载因子是0.9。那么16 *  0.9=14  如果数组中满14个空间就扩容，hash碰撞次数大大增加，那么这样就会导致链表有点多了。导致查找元素效率低。</p><p>所以既兼顾<strong>数组利用率</strong>又考虑<strong>链表长度不要太多</strong>，经过逼哥  大量测试0.75是最佳方案。</p><h3 id="14-链表转红黑树的阈值8"><a href="#1-4-链表转红黑树的阈值8" class="headerlink" title="1.4 链表转红黑树的阈值8"></a>1.4 链表转红黑树的阈值8</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment"> * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment"> * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment"> * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment"> * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment"> * shrinkage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><h4 id="问题1-为什么map桶中的节点个数要超过8才转红黑树"><a href="#问题1：-为什么Map桶中的节点个数要超过8才转红黑树" class="headerlink" title="问题1： 为什么Map桶中的节点个数要超过8才转红黑树"></a>问题1： 为什么Map桶中的节点个数要超过8才转红黑树</h4><p>源码注释中有这么一段描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    * Because TreeNodes are about twice the size of regular nodes, we</span><br><span class="line">     * use them only when bins contain enough nodes to warrant use</span><br><span class="line">     * (see TREEIFY_THRESHOLD). <span class="function">And when they become too <span class="title">small</span> <span class="params">(due to</span></span></span><br><span class="line"><span class="function"><span class="params">     * removal or resizing)</span> they are converted back to plain bins.  In</span></span><br><span class="line"><span class="function">     * usages with well-distributed user hashCodes, tree bins are</span></span><br><span class="line"><span class="function">     * rarely used.  Ideally, under random hashCodes, the frequency of</span></span><br><span class="line"><span class="function">     * nodes in bins follows a Poisson distribution</span></span><br><span class="line"><span class="function">     * <span class="params">(http://en.wikipedia.org/wiki/Poisson_distribution)</span> with a</span></span><br><span class="line"><span class="function">     * parameter of about 0.5 on average <span class="keyword">for</span> the <span class="keyword">default</span> resizing</span></span><br><span class="line"><span class="function">     * threshold of 0.75, although with a large variance because of</span></span><br><span class="line"><span class="function">     * resizing granularity. Ignoring variance, the expected</span></span><br><span class="line"><span class="function">     * occurrences of list size k <span class="title">are</span> <span class="params">(exp(-<span class="number">0.5</span>)</span> * <span class="title">pow</span><span class="params">(<span class="number">0.5</span>, k)</span> /</span></span><br><span class="line"><span class="function">     * <span class="title">factorial</span><span class="params">(k)</span>). The first values are:</span></span><br><span class="line"><span class="function">因为树节点的大小大约是普通节点的两倍，所以我们只在bin包含足够的节点时才使用树节点<span class="params">(参见</span></span></span><br><span class="line"><span class="function"><span class="params">TREEIFY_THRESHOLD)</span>。当它们变得太小<span class="params">(由于删除或调整大小)</span>时，就会被转换回普通的桶。在使用分布良好的用户</span></span><br><span class="line"><span class="function">hashcode时，很少使用树箱。理想情况下，在随机哈希码下，箱子中节点的频率服从泊松分布</span></span><br><span class="line"><span class="function"><span class="params">(http://en.wikipedia. org/wiki/Poisson. distr ibution)</span>,默认调整阈值为0.75,平均参数约为0.5,尽管由于调整粒度的差异很大。忽略方差，列表大小k的预期出现次数是<span class="params">(exp(-<span class="number">0.5</span>)</span>*<span class="title">pow</span><span class="params">(<span class="number">0.5</span>，k)</span>/<span class="title">factorial</span><span class="params">(k)</span>).</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">     *</span></span><br><span class="line"><span class="function">     * 0:    0.60653066</span></span><br><span class="line"><span class="function">     * 1:    0.30326533</span></span><br><span class="line"><span class="function">     * 2:    0.07581633</span></span><br><span class="line"><span class="function">     * 3:    0.01263606</span></span><br><span class="line"><span class="function">     * 4:    0.00157952</span></span><br><span class="line"><span class="function">     * 5:    0.00015795</span></span><br><span class="line"><span class="function">     * 6:    0.00001316</span></span><br><span class="line"><span class="function">     * 7:    0.00000094</span></span><br><span class="line"><span class="function">     * 8:    0.00000006</span></span><br><span class="line"><span class="function">     * more: less than 1 in ten million</span></span><br><span class="line"><span class="function">     *</span></span><br><span class="line"><span class="function">     * The root of a tree bin is normally its first node.  However,</span></span><br><span class="line"><span class="function">     * <span class="title">sometimes</span> <span class="params">(currently only upon Iterator.remove)</span>, the root might</span></span><br><span class="line"><span class="function">     * be elsewhere, but can be recovered following parent links</span></span><br><span class="line"><span class="function">     * <span class="params">(method TreeNode.root()</span>).</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>1.TreeNodes占用空间是普通Nodes的两倍，所以只有当bin包含足够多的节点时才会转成TreeNodes,而是否足够<br>多就是由TREEIFY_THRESHOLD（8）的值决定的。当bin中节点数变少时， 又会转成普通的bin。并且我们查看源码的时候发现，链表长度达到8(桶的数量要大于64)就转成红黑树，当长度降到6就转成普通bin.这样就解释了为什么不是一开始就将其转换为TreeNodes, 而是需要一定节点数才转为TreeNodes, 说白了就是权衡，空间和时间的权衡。</p><p>2.当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过<strong>理想情况</strong>下随机hashCode算法下所有bin中节点的分布频率会遵循<strong>泊松分布</strong>，我们可以看到，一个bin中链表长度达到8个元素的概率为0.00000006. 几乎是不<br>可能事件。所以，之所以选择8，不是随便决定的，而是根据概率统计决定的。</p><p>也就是说:选择8因为符合泊松分布，超过8的时候，概率已经非常小了，所以我们选择8这个数字。</p><p>3.泊松分布</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83.png?versionId=CAEQGxiBgIDF.fqw2hciIGMxZjNiNzhmMDM0NzQyZjQ5OGE0MWY2OGM5MTg5MzZi"></p><p>图片原文链接：</p><p><a href="http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html">http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html</a></p><h4 id="问题2基于jdk18hashmap引入了红黑树为什么一开始不按照红黑树存储-要等到链表长度大于8才转换"><a href="#问题2：基于JDK1-8-hashmap引入了红黑树，为什么一开始不按照红黑树存储。要等到链表长度大于8才转换" class="headerlink" title="问题2：基于JDK1.8,hashmap引入了红黑树，为什么一开始不按照红黑树存储。要等到链表长度大于8才转换"></a>问题2：基于JDK1.8,hashmap引入了红黑树，为什么一开始不按照红黑树存储。要等到链表长度大于8才转换</h4><p>​        JDK 1.8以前HashMap的实现是数组+链表，即使哈希函数取得再好，也很难达到元素百分百均匀分布。当HashMap中有大量的元素都存放到同一个桶中时，这个桶下有一条长长的链表， 这个时候HashMap就相当于一<br>个单链表，假如单链表有n个元素,遍历的时间复杂度就是O(n),完全失去了它的优势。针对这种情况，JDK 1.8<br>中引入了红黑树(查找时间复杂度为O(logn))来优化这个问题。当链表长度很小的时候， 即使遍历,速度也非<br>常快,但是当链表长度不断变长，肯定会对查询性能有一定的影响， 所以才需要转成树。</p><p>2.TreeNodes占用空间是普通Nodes的两倍，当元素较少时，增加多余的开销</p><h3 id="15-红黑树退化为链表的阈值"><a href="#1-5-红黑树退化为链表的阈值" class="headerlink" title="1.5 红黑树退化为链表的阈值"></a>1.5 红黑树退化为链表的阈值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment">  * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment">  * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment">  当桶(bucket) 上的结点数小于这个值时树转链表</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><h3 id="16-链表转红黑树时数组的长度最小值"><a href="#1-6-链表转红黑树时，数组的长度最小值" class="headerlink" title="1.6 链表转红黑树时，数组的长度最小值"></a>1.6 链表转红黑树时，数组的长度最小值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment">   * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment">   * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment">   * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><h3 id="17-table-用来初始化"><a href="#1-7-table-用来初始化" class="headerlink" title="1.7 table 用来初始化"></a>1.7 table 用来初始化</h3><p>table必须是2的幂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment"> * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment"> * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment"> * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>jdk8之前数组类型是Entry&lt;K,V&gt;类型。从jdk1.8之后是Node&lt;K,V&gt;类型。 都实现了一样的接口:Map.Entry&lt;K,V&gt;.负责存储键值对数据的。在jdk8以后的构造方法中，并没有对table这个成员变量进行初始化，tabl e的初始化被推<br>迟到了put方法中</p><h3 id="18-存放元素缓存"><a href="#1-8-存放元素缓存" class="headerlink" title="1.8 存放元素缓存"></a>1.8 存放元素缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Holds cached entrySet(). Note that AbstractMap fields are used</span></span><br><span class="line"><span class="comment">  * for keySet() and values().</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br></pre></td></tr></table></figure><h3 id="19-hashmap元素的个数"><a href="#1-9-HashMap元素的个数" class="headerlink" title="1.9 HashMap元素的个数"></a>1.9 HashMap元素的个数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><h3 id="110-用来记录hashmap的修改次数"><a href="#1-10-用来记录HashMap的修改次数" class="headerlink" title="1.10 用来记录HashMap的修改次数"></a>1.10 用来记录HashMap的修改次数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of times this HashMap has been structurally modified</span></span><br><span class="line"><span class="comment"> * Structural modifications are those that change the number of mappings in</span></span><br><span class="line"><span class="comment"> * the HashMap or otherwise modify its internal structure (e.g.,</span></span><br><span class="line"><span class="comment"> * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class="line"><span class="comment"> * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class="line"><span class="comment">    结构修改是指改变HashMap中的映射数量或修改其内部结构(例如，rehash)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br></pre></td></tr></table></figure><h3 id="111-要调整大小的下一个大小值容量负载系数"><a href="#1-11-要调整大小的下一个大小值（容量-负载系数）" class="headerlink" title="1.11 要调整大小的下一个大小值（容量*负载系数）"></a>1.11 要调整大小的下一个大小值（容量*负载系数）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The next size value at which to resize (capacity * load factor).</span></span><br><span class="line"><span class="comment"> * 要调整大小的下一个大小值（容量*负载系数）。 数组长度唱过临界值时会进行扩容操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// (The javadoc description is true upon serialization.</span></span><br><span class="line"><span class="comment">// Additionally, if the table array has not been allocated, this</span></span><br><span class="line"><span class="comment">// field holds the initial array capacity, or zero signifying</span></span><br><span class="line"><span class="comment">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br></pre></td></tr></table></figure><h3 id="112-解决hash冲突的常用方法有"><a href="#1-12-解决hash冲突的常用方法有" class="headerlink" title="1.12 解决hash冲突的常用方法有"></a>1.12 解决hash冲突的常用方法有</h3><p> <strong>1.开放定址法</strong><br>基本思想是：当关键字key的哈希地址p=H（key）出现冲突时，以p为基础，产生另一个哈希地址p1，如果p1仍然冲突，再以p为基础，产生另一个哈希地址p2，…，直到找出一个不冲突的哈希地址pi ，将相应元素存入其中。</p><p><strong>2.再哈希法</strong><br>这种方法是同时构造多个不同的哈希函数：<br>Hi=RH1（key）  i=1，2，…，k<br>当哈希地址Hi=RH1（key）发生冲突时，再计算Hi=RH2（key）……，直到冲突不再产生。这种方法不易产生聚集，但增加了计算时间。</p><p><strong>3.链地址法</strong><br>这种方法的基本思想是将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。</p><p>hashmap解决hash冲突就是采用链地址法</p><p><strong>4.建立公共溢出区</strong><br>这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表。  </p><h2 id="2hashmap的方法介绍"><a href="#2-hashmap的方法介绍" class="headerlink" title="2.hashmap的方法介绍"></a>2.hashmap的方法介绍</h2><p><strong>Node节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Basic hash bin node, used for most entries.  (See below for</span></span><br><span class="line"><span class="comment">  * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">     <span class="keyword">final</span> K key;</span><br><span class="line">     V value;</span><br><span class="line">     Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">     Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">         <span class="keyword">this</span>.hash = hash;</span><br><span class="line">         <span class="keyword">this</span>.key = key;</span><br><span class="line">         <span class="keyword">this</span>.value = value;</span><br><span class="line">         <span class="keyword">this</span>.next = next;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>TreeNode节点</strong>部分源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Entry for Tree bins. Extends LinkedHashMap.Entry (which in turn</span></span><br><span class="line"><span class="comment">  * extends Node) so can be used as extension of either regular or</span></span><br><span class="line"><span class="comment">  * linked node.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">     TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">     TreeNode&lt;K,V&gt; left;</span><br><span class="line">     TreeNode&lt;K,V&gt; right;</span><br><span class="line">     TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">     <span class="keyword">boolean</span> red;</span><br><span class="line">     TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">         <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Returns root of tree containing this node.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="keyword">this</span>, p;;) &#123;</span><br><span class="line">             <span class="keyword">if</span> ((p = r.parent) == <span class="keyword">null</span>)</span><br><span class="line">                 <span class="keyword">return</span> r;</span><br><span class="line">             r = p;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="21-hash值计算方法-hash"><a href="#2-1-hash值计算方法-hash" class="headerlink" title="2.1 hash值计算方法 hash()"></a>2.1 hash值计算方法 hash()</h3><p>jdk1.8 源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算hash值的方法</span></span><br><span class="line"><span class="comment"> * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span><br><span class="line"><span class="comment"> * to lower.  Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment"> * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment"> * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment"> * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment"> * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment"> * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment"> * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment"> * are already reasonably distributed (so don&#x27;t benefit from</span></span><br><span class="line"><span class="comment"> * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment"> * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment"> * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment"> * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment"> * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment"> 计算 key.hashCode() 并将散列的较高位（异或）传播到较低位。由于该表使用二次幂掩码，因此仅在当前掩码之上位变化的散列集将始终发生冲突。 （众所周知的例子是在小表中保存连续整数的浮点键集。）所以我们应用一个变换，将高位的影响向下传播。位扩展的速度、效用和质量之间存在折衷。因为许多常见的散列集已经合理分布（因此不会从扩展中受益），并且因为我们使用树来处理 bin 中的大量冲突，所以我们只是以最便宜的方式对一些移位的位进行异或以减少系统损失，以及合并最高位的影响，否则由于表边界而永远不会在索引计算中使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先研究下key的哈希值是如何计算出来的。key的哈希值是通过上述方法计算出来的。</p><p>可以看到当key等于null的时候也是有哈希值的，返回的是0.</p><p>这个哈希方法首先计算出key的hashCode赋值给h,然后与h无符号右移16位后的二进制进行按位异或得到最后的<br>hash值。计算过程如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br></pre></td></tr></table></figure><p>这里其实就是把得到的hashcode转化为32位二进制，然后他的高16位和低16位做了一个异或的操作</p><p>举个例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&amp; (按位与运算) : 运算规则:相同的二进制数位上,都是<span class="number">1</span>的时候，结果为<span class="number">1</span>,否则为零。</span><br><span class="line">^ (按位异或运算) :运算规则:相同的二进制数位上，数字相同，结果为<span class="number">0</span>，不同为<span class="number">1.</span></span><br><span class="line">代码中通过这个hash &amp; (n-<span class="number">1</span>) 得到存储元素的位置</span><br><span class="line">p = tab[i = (n - <span class="number">1</span>) &amp; hash]</span><br><span class="line"></span><br><span class="line">(h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">假设这里的h = key.hashCode()得到的值为</span><br><span class="line"><span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span>    h</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    h &gt;&gt;&gt; <span class="number">16</span></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>   按位异或运算后得到的hash值</span><br><span class="line"></span><br><span class="line">此时数据长度n假设为默认的<span class="number">16</span>,那么这个key存放在table中位置为i = (n - <span class="number">1</span>) &amp; hash</span><br><span class="line"><span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>      hash</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算</span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>     索引位置为<span class="number">0</span> </span><br><span class="line"></span><br><span class="line">在存储一个key,假设key的hashcode高位变化较大</span><br><span class="line"><span class="number">1000</span> <span class="number">1000</span> <span class="number">0001</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>      hash值</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>      索引位置为<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果当n的值,即数组长度很小时，假设是默认的16的话,这样的值和hashCode()直接做按位与操作，实际上只使用了哈希值的后4位。如果当哈希值的高位变化很大，低位变化很小,这样就很容易造成哈希冲突了，所以这里把高低位都利用起来,从而解决了这个问题。也是一种为了降低hash冲突的优化手段</p><p>​           为什么这里需要将高位数据移位到低位进行异或运算呢？这是因为有些数据计算出的哈希值差异主要在高位，而 HashMap 里的哈希寻址是忽略容量以上的高位的，那么这种处理就可以有效避免类似情况下的哈希碰撞。</p><h3 id="22-hashmap的put方法"><a href="#2-2-hashmap的put-方法" class="headerlink" title="2.2 hashmap的put()方法"></a>2.2 hashmap的put()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value  如果为true表示不更改现有的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode. 表示table为创建状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// p表示当前的节点。n表示表的长度</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// hashmap的table表的初始化操作,是在这里进行的。第一次执行的时候,会先在这里进行初始化操作</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 通过上述hash()方法得到hash值和数组长度进行按位与运算，得到元素的存储位置，如果table表的位置为空，就直接进行存储操作</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 产生了hash碰撞,走下述代码</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 这里的p的值是上面p = tab[i = (n - 1) &amp; hash ,if语句体虽然没有执行，但是这一段代码是否执行的,判断hash值和key值</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 判断当前table中的p节点是不是树节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 遍历链表的,取下一个位置存放新增的元素,这里采用的是尾插法，a.横竖都要遍历链表的长度是否大于树化的阈值，所以遍历的过程中，就直接插入元素了b.可能的因素就是遍历的过程中要比较key值是否相同，和jdk1.7有些不同</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">//如果下一个位置为空,就直接连接在链表后面</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 如果链表的长度大于8个时,就进行链表转红黑树的操作</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果链表的下一个元素不为空,比较hash值和key值</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// key值存在,就替换value值。新插入的元素的value值,替换原来这个key的value值</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">     <span class="comment">// hashmap的键值对个数大于扩容的阈值,就进行扩容操作</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图示：桶长度（bucket) 为8的数组</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/Jdk1.8%E6%9C%AA%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%BA%A2%E9%BB%91%E6%A0%91%E4%B9%8B%E5%89%8D%E7%9A%84%E5%BD%A2%E6%80%81.png?versionId=CAEQGxiBgMDP.fqw2hciIDQzYmNkYTQzZTNhMDQ4MmZhZDQyNjI1ZjZjYjJiOGRm"></p><h3 id="25-treeifybin"><a href="#2-5-TreeifyBin" class="headerlink" title="2.5 TreeifyBin()"></a>2.5 TreeifyBin()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment"> * table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment"> 替换指定哈希表的索引桶中所有的连接节点，除非表太小，否则将修改大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">/* 如果元素数组为空 或者 数组长度小于 树结构化的最小阈值（MIN_TREEIFY_CAPACITY=64） ,就进行扩容操作.对于这个值可以理解为：如果元素数组长度小于这个值，没有必要去进行结构转换.目的是</span></span><br><span class="line"><span class="comment">       如果数组很小,那么转红黑树,遍历效率要低一些，这时进行扩容操作，重新计算哈希值，链表的长度有可能就变短了。数据会放入到数组中，这样相对来说效率会高一些</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">        <span class="comment">//如果元素数组长度已经大于等于了 MIN_TREEIFY_CAPACITY，那么就有必要进行结构转换了</span></span><br><span class="line">        <span class="comment">// 根据hash值和数组长度进行取模运算后，得到链表的首节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//定义几个变量，hd代表头节点，tl代表尾节点</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="comment">//先把e节点转成TreeNode类型，并赋值给p</span></span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">              <span class="comment">//如果尾节点tl为空，则说明还没有根节点，试想下，这时元素数目都超过8个了，还能没有尾节点么，所以没有尾节点只能说明还没设置根节点</span></span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">             <span class="comment">//设置根节点，把p赋值给根节点hd</span></span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">//把tl设置为p的前一节点</span></span><br><span class="line">                p.prev = tl;</span><br><span class="line">                 <span class="comment">//把p设置为tl的后继节点，这两步其实就是我指向你，你指向我的关系，为了形成双向链表</span></span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把首节点设置成p后，把p赋值给尾节点tl，然后会再取链表的下一个节点，转成TreeNode类型后再赋值给p，如此循环</span></span><br><span class="line">            tl = p;</span><br><span class="line">              <span class="comment">//取下一个节点，直到下一个节点为空，也就代表这链表遍历好了</span></span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">         <span class="comment">//用新生成的双向链表替代旧的单向链表，其实就是把这个数组对应的位置重新赋值成新双向链表的首节点</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bin 的数量大于 TREEIFY_THRESHOLD 时：如果容量小于 MIN_TREEIFY_CAPACITY，只会进行简单的扩容。如果容量大于 MIN_TREEIFY_CAPACITY ，则会进行树化改造。</p><p>本质上这是个<strong>安全问题</strong>。因为在元素放置过程中，如果一个对象哈希冲突，都被放置到同一个桶里，则会形成一个链表，我们知道链表查询是线性的，会严重影响存取的性能。</p><p>最后一行才是转红黑树的操作</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/TreeNode%E8%8A%82%E7%82%B9.png?versionId=CAEQGxiBgIDP.fqw2hciIDgyYmM3ZWZlNzAyYTRiZTliZWU0YTdiZWU5NzNhMGYy"></p><h3 id="26-treeify"><a href="#2-6-Treeify" class="headerlink" title="2.6 Treeify()"></a>2.6 Treeify()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">      </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Forms tree of the nodes linked from this node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义树的根节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//  遍历链表，x指向当前节点、next指向下一个节点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">        x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 如果根节点为空，则把当前节点当做根节点。根据红黑树性质，根节点一定为黑色。</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.parent = <span class="keyword">null</span>;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            root = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 根节点已经存在的情况</span></span><br><span class="line">            <span class="comment">// 取得当前节点和当前节点的hash值</span></span><br><span class="line">            K k = x.key;</span><br><span class="line">            <span class="keyword">int</span> h = x.hash;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 从根节点遍历。这一步主要就是为了，判断当前节点应该在树的左侧还是右侧</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> dir, ph;  <span class="comment">// dir代表方向  ph表示树节点的hash值。即TreeNodehash值</span></span><br><span class="line">                K pk = p.key;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h) <span class="comment">// 如果当前树节点hash值 大于 当前链表节点的hash值</span></span><br><span class="line">                    dir = -<span class="number">1</span>;  <span class="comment">//  标识当前链表节点会放到当前树节点的左侧</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line">                <span class="comment">// 保存当前树节点</span></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="comment">// 判断如果dir&lt;=0 说明当前节点的hash值小于当前树节点的hash值。需要把当前节点放置在当前树节点的左侧</span></span><br><span class="line">                <span class="comment">// 判断如果dir&gt;0 说明当前节点的hash值大于当前树节点的hash值。 需要把当前节点放置在当前树节点的右侧</span></span><br><span class="line">                <span class="comment">// p的左右节点存在不为空的情况,p节点就是当前遍历的树节点，说明该节点还有子节点。继续循环查找当前节点x的应该在哪里爸爸节点下面插入元素</span></span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    <span class="comment">// 元素插入之后，需要进行红黑树的自平衡操作,重新确定根节点的值</span></span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="27-红黑树自平衡操作"><a href="#2-7-红黑树自平衡操作" class="headerlink" title="2.7 红黑树自平衡操作"></a>2.7 红黑树自平衡操作</h3><h4 id="271balanceinsertion"><a href="#2-71balanceInsertion" class="headerlink" title="2.71balanceInsertion()"></a>2.71balanceInsertion()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 插入节点是黑色</span></span><br><span class="line">    x.red = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// xp为父节点  xpp：为爷爷节点   xxpl是爷爷的左节点  xppr：是爷爷节点的右节点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">        <span class="comment">// 当前节点的父节点不存在,当前节点就是根节点</span></span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 父节点是黑色。当前节点可以直接插入,所以父节点就是根节点。   父节点如果是黑色，则爷爷节点一定不存在</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// 如果父节点是爷爷节点的左节点    </span></span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">            <span class="comment">// 如果爷爷节点的右节点不为空 同时是红节点</span></span><br><span class="line">            <span class="comment">//  a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果父节点是爷爷节点的左节点   插入节点时爷爷节点的右节点</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                    <span class="comment">// a.已爸爸为节点进行一次左旋操作,得到(LL双红的情况 4.2.1) 然后指定爸爸节点为当前节点,执行下一轮的操作</span></span><br><span class="line">                    root = rotateLeft(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// a.将爸爸节点染成黑色 b.将爷爷染成红色 c.然后已爷爷节点进行右旋操作</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 叔叔节点不为空,同事叔叔节点为红色</span></span><br><span class="line">            <span class="comment">// a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 插入节点为其父节点的左子节点(RL情况) a.以爸爸节点进行一次右旋,得到RR双红的场景( RR情况 4.3.1).然后指定爸爸节点为当前节点,进行下一轮的操作</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    <span class="comment">// 平衡过后,重新定义爷爷节点的变量值</span></span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 插入节点为其父节点的右子节点(RR情况) a.将爸爸染成黑色节点  b.将爷爷染成红色 c.然后已爷爷节点进行左旋操作</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123; </span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="272-红黑树左旋rotateleft"><a href="#2-72-红黑树左旋rotateLeft" class="headerlink" title="2.72 红黑树左旋rotateLeft"></a>2.72 红黑树左旋rotateLeft</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Red-black tree methods, all adapted from CLR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">            rl.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            (root = r).red = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">            pp.left = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = r;</span><br><span class="line">        r.left = p;</span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="273-红黑树右旋rotateright"><a href="#2-73-红黑树右旋rotateRight" class="headerlink" title="2.73 红黑树右旋rotateRight"></a>2.73 红黑树右旋rotateRight</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line">            lr.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            (root = l).red = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">            pp.right = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.left = l;</span><br><span class="line">        l.right = p;</span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换后的形态大约是</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E8%BD%AC%E6%8D%A2%E5%90%8E%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91%E7%BB%93%E6%9E%84.png?versionId=CAEQGxiBgIC2.fqw2hciIGI4M2M2ZTIzOTYzYTQ3ZjI4YzY5YjBhNzBjOGNhNDU5"></p><h3 id="28-扩容resize-方法"><a href="#2-8-扩容resize-方法" class="headerlink" title="2.8 扩容resize() 方法"></a>2.8 扩容resize() 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment">     * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment">     * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment">     * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment">     * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment">     * 初始化或者扩容表的长度为2倍</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        <span class="comment">// 旧表，第一次执行时，oldTabl为空</span></span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="comment">// 表的容量</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="comment">// 要调整大小的下一个大小值，默认是0</span></span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果扩容前旧表的容量大于阈值，就设置为Integer的最大值</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;  <span class="comment">// 如果旧表的长度左移一位还小于表的最大容量，就扩容表的长度为旧表的二倍，域值也为原来的一倍</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;   </span><br><span class="line">            <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            <span class="comment">// 初始化新容器的大小，必须是2的幂，默认是16。表刚创建的时候，会执行到这里</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            <span class="comment">// 默认的阈值是12 负载因子0.75* 默认的初始化容量16</span></span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新table表扩容时的的阈值</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        <span class="comment">// 假设一个容量为16的节点。newCap的值为16 下一次扩容时，容量为32扩大一倍</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 移动旧表的数据到新表中,移动的扩容中,需要重新的进行hash操作</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        <span class="comment">// 链表节点的处理  head是头节点  tail是尾部节点</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                         <span class="comment">// 获取当前节点的下一个节点，每一次循环e值会更新</span></span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 第一次slot的节点是头节点也是尾结点</span></span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 下一个节点设置为空</span></span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="comment">// slot节点的数+旧表的容量 存储新值</span></span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回扩容后新表的长度</span></span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>依据 resize 源码，不考虑极端情况（容量理论最大极限由 MAXIMUM_CAPACITY 指定，数值为 1&lt;&lt;30，也就是 2 的 30 次方），我们可以归纳为：阈值等于（负载因子）x（容量），如果构建 HashMap 的时候没有指定它们，那么就是依据相应的默认常量值。阈值通常是以倍数进行调整 （newThr = oldThr &lt;&lt; 1），我前面提到，根据 putVal 中的逻辑，当元素个数超过阈值大小时，则调整 Map 大小。扩容后，需要将老的数组中的元素重新放置到新的数组，这是扩容的一个主要开销来源。</p><h4 id="241-hashmap扩容的条件"><a href="#2-41-hashmap扩容的条件" class="headerlink" title="2.41 hashmap扩容的条件"></a>2.41 hashmap扩容的条件</h4><p>1.当HashMap中的元素个数超过 <code>数组长度 * loadFactor(负载因子)</code>时,就会进行数组扩容,扩容为原来的2倍</p><p>例如：数组长度默认是16，负载因子默认0.75 ，即当数组中 元素个数大于12的时候，就会进行扩容，数组长度变为32</p><p>2.在链表转换红黑树的时候，如果桶的数量不足64.也会进行扩容操作 </p><h4 id="242-扩容后的元素怎么存储"><a href="#2-42-扩容后的元素怎么存储" class="headerlink" title="2.42 扩容后的元素怎么存储"></a>2.42 扩容后的元素怎么存储</h4><p>进行扩容，会伴随着一次重新hash分配，并且会遍历hash表中所有的元素,是非常耗时的。在编写程序中,要尽<br>量避免resize。HashMap在进行扩容时，使用的rehash方式非常巧妙，因为每次扩容都是翻倍，与原来计算的(n-1)&amp;hash的结果相比，只是多了一个bit位，所以节点要么就在<strong>原来的位置，</strong>要么就被分配到**”原位置+旧容量”**这个位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&amp; (按位与运算) : 运算规则:相同的二进制数位上,都是<span class="number">1</span>的时候，结果为<span class="number">1</span>,否则为零。</span><br><span class="line">^ (按位异或运算) :运算规则:相同的二进制数位上，数字相同，结果为<span class="number">0</span>，不同为<span class="number">1.</span></span><br><span class="line">代码中通过这个hash &amp; (n-<span class="number">1</span>) 得到存储元素的位置</span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span>   n = <span class="number">16</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>   n-<span class="number">1</span> = <span class="number">15</span></span><br><span class="line">假设hashcode生成的值为 如下<span class="number">2</span>个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0111</span>   hash(key1)</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0001</span> <span class="number">0111</span>   hash(key2)    扩容后的hash值,比 扩容前多了个比特位</span><br><span class="line"></span><br><span class="line">计算开始</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span>   n = <span class="number">16</span> 扩容前</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>   n-<span class="number">1</span> = <span class="number">15</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0111</span>   hash(key1)</span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0111</span>    hash &amp; (n-<span class="number">1</span>) = <span class="number">7</span> 索引位置为<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0010</span> <span class="number">0000</span>   n=<span class="number">32</span> 扩容一倍后</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1111</span>   n-<span class="number">1</span> = <span class="number">31</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0001</span> <span class="number">0111</span>   hash(key2)</span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0111</span>   hash &amp; (n-<span class="number">1</span>) = <span class="number">23</span>  索引位置为<span class="number">7</span>+<span class="number">16</span>(旧的数组容量)</span><br></pre></td></tr></table></figure><p>结论：计算新的索引，高位是0那么存储到<strong>原来索引</strong>位置，如果高位是1那么存储到<strong>原来索引+旧的数组长度</strong>位置。因此，我们在扩充HashMap的时候，不需要重新计算hash,只需要看看原来的hash值新增的那个bit是1还是0就<br>可以了，是0的话索引没变,是1的话索引变成原索引+oldCap(原位置+旧容量)。正是因为这样巧妙的rehash方式，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1是是随机的，在resize的过程中保证 了rehash之后每个桶上的节点数一定小于等于原来桶上的节点数,保证了rehash之后不会出现更严重的hash冲突,均匀的把之前的冲突的节点分散到新的桶中了。</p><h4 id="243-hashmap容量初始化"><a href="#2-4-3-hashmap容量初始化" class="headerlink" title="2.4.3 hashmap容量初始化"></a>2.4.3 hashmap容量初始化</h4><p>如果我们确切的知道我们有多少键值对需要存储，那么我们在初始化HashMap的时候就应该指定它的容量，<br>防止HashMap自动扩容，影响使用效率。</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C.png?versionId=CAEQGxiBgMDZ.fqw2hciIGNkYzZjZTM0NzAzMzQxMDM4MTUxN2MzY2RjN2E1NmRl"></p><h4 id="244-多线程下hashmap造成cpu100的问题"><a href="#2-4-4-多线程下hashmap造成cpu100-的问题" class="headerlink" title="2.4.4 多线程下hashmap造成cpu100%的问题"></a>2.4.4 多线程下hashmap造成cpu100%的问题</h4><p>hashmap不同于hashtable.他是线程不安全的，当多线程并发扩容时就可能会出现环形引用的问题，从而导致死循环的出现，一直死循环就会导致 CPU 运行 100%，但是Oracle认为这不是错误,是因为Hashmap本身就是线程不安全的。Oracle官网的连接如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;bugs.java.com&#x2F;bugdatabase&#x2F;view_bug.do?bug_id&#x3D;6423457</span><br></pre></td></tr></table></figure><p>并提供给了我们，可以替换的为jdk1.5之后的 <code>ConcurrentHashMap</code>   或者使用性能较差的Hashtable 或 synchronizedMap 包装器</p><p>java并发包的作者原文评论如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Doug Lea writes:</span><br><span class="line"></span><br><span class="line">&quot;This is a classic symptom of an incorrectly synchronized use of</span><br><span class="line">HashMap. Clearly, the submitters need to use a thread-safe</span><br><span class="line">HashMap. If they upgraded to Java 5, they could just use</span><br><span class="line">ConcurrentHashMap. If they can&#39;t do this yet, they can use</span><br><span class="line">either the pre-JSR166 version, or better, the unofficial backport</span><br><span class="line">as mentioned by Martin. If they can&#39;t do any of these, they can</span><br><span class="line">use Hashtable or synchhronizedMap wrappers, and live with poorer</span><br><span class="line">performance. In any case, it&#39;s not a JDK or JVM bug.&quot;</span><br><span class="line"></span><br><span class="line">I agree that the presence of a corrupted data structure alone</span><br><span class="line">does not indicate a bug in the JDK.</span><br></pre></td></tr></table></figure><p>为什么并发的时候，会导出环状呢，简单分析下</p><p>这个cpu100%的问题，实际工作中上我也没有遇到过，参考了下网上的文章：</p><p>原文链接：<a href="https://blog.csdn.net/hao134838/article/details/107220317/">https://blog.csdn.net/hao134838/article/details/107220317/</a></p><p>JDK1.7的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e.next; <span class="comment">// 线程一执行此处</span></span><br><span class="line">            <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">            e.next = newTable[i];</span><br><span class="line">            newTable[i] = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/jdk1.7%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8.png?versionId=CAEQGxiBgMDS.fqw2hciIGNhM2Y4YTk2ZDZiMjRhODhhYzQ2NDAyNWUyYWM5NGQ4"></p><p>假设 HashMap 的默认大小为 2，HashMap 本身中有一个键值 key(5)，我们再使用两个线程：t1 添加 key(3)，t2 添加 key(7)，首先两个线程先把 key(3) 和 key(7) 都添加到 HashMap 中，此时因为 HashMap 的长度不够用了就会进行扩容操作，然后这时线程 t1 在执行到 Entry&lt;K,V&gt; next = e.next 时，此时线程t1中的e节点指向了key(3),然后next指针指向了key(7)。然后让出了cpu的执行权。对于线程t2来说，添加key(7) 的时候，会进行扩容操作，扩容的时候，会再次进行rehash操作，重新计算位置，然后把链表的位置更改为了e节点为key7，他的next指向key3.此时t1线程又重新获取到了cpu的执行权。对于t1线程来说，key(3)指向的是key(7)，由于线程t2把key(7)的下一个指向变成了key(3)，对于t1来说，key(7) 的next就是key(3) .这样就造成key(3)和key(7)的循环引用问题，而死循环就是导致cpu100%的原因</p><h4 id="245-hashmap的size不准确造成的诡异问题"><a href="#2-4-5-hashmap的size不准确造成的诡异问题" class="headerlink" title="2.4.5 hashmap的size不准确造成的诡异问题"></a>2.4.5 hashmap的size不准确造成的诡异问题</h4><p>略</p><h2 id="3hashtable-hashmap-treemap不同"><a href="#3-HashTable、HashMap、TreeMap不同" class="headerlink" title="3.HashTable、HashMap、TreeMap不同"></a>3.HashTable、HashMap、TreeMap不同</h2><p><strong>Hashtable</strong> 是早期 Java 类库提供的一个哈希表实现，本身是同步的，不支持 null 键和值，由于同步导致的性能开销，所以已经很少被推荐使用。</p><p><strong>HashMap</strong> 是应用更加广泛的哈希表实现，行为上大致上与 HashTable 一致，主要区别在于 HashMap 不是同步的，支持 null 键和值等。通常情况下，HashMap 进行 put 或者 get 操作，可以达到常数时间的性能，所以它是绝大部分利用键值对存取场景的首选</p><p><strong>TreeMap</strong> 则是基于红黑树的一种提供顺序访问的 Map，和 HashMap 不同，它的 get、put、remove 之类操作都是 O（log(n)）的时间复杂度，具体顺序可以由指定的 Comparator 来决定，或者根据键的自然顺序来判断。</p><p>类图如下：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/hashmap%E7%B1%BB%E5%9B%BE.png?versionId=CAEQGxiBgIDQ.fqw2hciIGU2NjViYzk4Y2IwMjRmZmJiZTQ1MjJhMDZiZjcyMjE5"></p><p>HashMap 的性能表现非常依赖于哈希码的有效性，请务必掌握 hashCode 和 equals 的一些基本约定</p><p>比如：</p><ul><li>equals 相等，hashCode 一定要相等。</li><li>重写了 hashCode 也要重写 equals。</li><li>hashCode 需要保持一致性，状态改变返回的哈希值仍然要一致。</li><li>LinkedHashMap 通常提供的是遍历顺序符合插入顺序，它的实现是通过键值对维护一个双向链表。</li></ul><p>对于 TreeMap，它的整体顺序是由键的顺序关系决定的，通过 Comparator 或 Comparable（自然顺序）来决定。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jdk18-hashmap源码简单讲解&quot;&gt;&lt;a href=&quot;#JDK1-8-HashMap源码简单讲解&quot; class=&quot;headerlink&quot; title=&quot;JDK1.8 HashMap源码简单讲解&quot;&gt;&lt;/a&gt;JDK1.8 HashMap源码简单讲解&lt;/h1&gt;&lt;h</summary>
      
    
    
    
    <category term="JDK" scheme="https://lswisdom.github.io/categories/JDK/"/>
    
    
    <category term="Java集合" scheme="https://lswisdom.github.io/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>证书生成方式</title>
    <link href="https://lswisdom.github.io/posts/221454774/"/>
    <id>https://lswisdom.github.io/posts/221454774/</id>
    <published>2021-07-25T09:43:36.000Z</published>
    <updated>2022-10-30T04:29:20.636Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为服务器生成证书"><a href="#为服务器生成证书" class="headerlink" title="为服务器生成证书"></a>为服务器生成证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -alias tomcat -keyalg RSA -keystore E:\download\tomcat.keystore -validity 36500</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Window/1618128025572.png?versionId=CAEQExiBgMDmlp301hciIDI4OThjYmZjNzFlODQxMDY4MmIwZDNjODkyMzJlMzM3" alt="1618128025572"></p><h3 id="为客户端生成证书"><a href="#为客户端生成证书" class="headerlink" title="为客户端生成证书"></a>为客户端生成证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -alias mykey -keyalg RSA -storetype PKCS12 -keystore E:\download\mykey.p12</span><br></pre></td></tr></table></figure><p>会生成一个客户端的证书</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Window/1618128094997.png?versionId=CAEQExiBgMC18p701hciIDA4OWM2ZmZiYTgxODQyMDk5YmVlNTc0ZDg0OGU2Mzcy" alt="1618128094997"></p><h3 id="让服务器信任客户端证书"><a href="#让服务器信任客户端证书" class="headerlink" title="让服务器信任客户端证书"></a>让服务器信任客户端证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -export -alias mykey -keystore E:\downlaod\mykey.p12 -storetype PKCS12 -storepass 123456 -rfc -file E:\downlaod\mykey.cer</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Window/1618126654702.png?versionId=CAEQExiBgMC2nqD01hciIDRiNjdjZTlkNTU4MjQxZDhiMWFiYzY1MjI1NmIwYzNj" alt="1618126654702"></p><h3 id="将该文件导入服务器的证书库添加一个信任证书命令"><a href="#将该文件导入服务器的证书库，添加一个信任证书命令" class="headerlink" title="将该文件导入服务器的证书库，添加一个信任证书命令"></a>将该文件导入服务器的证书库，添加一个信任证书命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -import -v -file E:\download\mykey.cer -keystore E:\download\tomcat.keystore</span><br></pre></td></tr></table></figure><h3 id="查看证书命令"><a href="#查看证书命令：" class="headerlink" title="查看证书命令："></a>查看证书命令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -keystore E:\download\tomcat.keystore</span><br></pre></td></tr></table></figure><h3 id="让客户端信任服务器证书"><a href="#让客户端信任服务器证书" class="headerlink" title="让客户端信任服务器证书"></a>让客户端信任服务器证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -keystore E:\download\tomcat.keystore -export -alias tomcat -file E:\download\tomcat.cer(tomcat为你设置服务器端的证书名)</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Window/1618128547443.png?versionId=CAEQExiBgIDH8qH01hciIGUzZTcwMzcwYTA0NjQ3ZTQ4N2FmNzcwZjk1ZTUxOTUy" alt="1618128547443"></p><h3 id="配置tomcat的服务器"><a href="#配置tomcat的服务器" class="headerlink" title="配置tomcat的服务器"></a>配置tomcat的服务器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">clientAuth</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sslProtocol</span>=<span class="string">&quot;TLS&quot;</span></span></span><br><span class="line"><span class="tag">  </span></span><br><span class="line"><span class="tag">  <span class="attr">keystoreFile</span>=<span class="string">&quot;E:\download\tomcat.keystore&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keystorePass</span>=<span class="string">&quot;123456&quot;</span> </span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h3 id="把cas里面的证书位置替换一下"><a href="#把cas里面的证书位置替换一下" class="headerlink" title="把cas里面的证书位置替换一下"></a>把cas里面的证书位置替换一下</h3><p>cas/WEB-INF/classes/application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.ssl.key-store&#x3D;E:\download\tomcat.keystore</span><br></pre></td></tr></table></figure><p>在e:download文件夹中执行cmd 会生成一个证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -import -alias tomcat -keystore cacerts -file tomcat.cer </span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Window/1618129421310.png?versionId=CAEQExiBgMCR0qP01hciIDdiMDFmZTU3YzQ0YzRjNmJhZjk4N2NhNmNiZjBjNmU4" alt="1618129421310"></p><p>复制该文件，并替换java目录下面的证书文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.8.0_251\jre\lib\security</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;为服务器生成证书&quot;&gt;&lt;a href=&quot;#为服务器生成证书&quot; class=&quot;headerlink&quot; title=&quot;为服务器生成证书&quot;&gt;&lt;/a&gt;为服务器生成证书&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="云原生" scheme="https://lswisdom.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="证书" scheme="https://lswisdom.github.io/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装Redis</title>
    <link href="https://lswisdom.github.io/posts/2813726945/"/>
    <id>https://lswisdom.github.io/posts/2813726945/</id>
    <published>2021-07-25T09:17:42.000Z</published>
    <updated>2022-10-30T04:28:48.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-centos7单节点安装redis"><a href="#一、CentOS7单节点安装Redis" class="headerlink" title="一、CentOS7单节点安装Redis"></a>一、CentOS7单节点安装Redis</h2><p>注意：安装redis需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装,否则编译时会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install make cmake gcc gcc-c++</span><br></pre></td></tr></table></figure><h3 id="1-下载redis安装包"><a href="#1-下载redis安装包" class="headerlink" title="1. 下载redis安装包"></a>1. 下载redis安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf redis-5.0.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="3进入redis目录下编译"><a href="#3-进入redis目录下编译" class="headerlink" title="3.进入redis目录下编译"></a>3.进入redis目录下编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Redis/redis%E7%BC%96%E8%AF%91.png?versionId=CAEQExiBgIC.lvfz1hciIGQ4NmY5OWMyNDk4MzQ2OTRiNWM0Nzk5NWY2Zjg0MWE5"></p><h3 id="4指定安装目录"><a href="#4-指定安装目录" class="headerlink" title="4.指定安装目录"></a>4.指定安装目录</h3><p>安装，PREFIX参数指定redis的安装目录，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;redis</span><br></pre></td></tr></table></figure><h3 id="5启动redis"><a href="#5-启动redis" class="headerlink" title="5.启动redis"></a>5.启动redis</h3><p>进入安装后的路径，就是cd /usr/local/software/redis</p><p>　　在bin目录下执行 cd bin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　.&#x2F;redis-server</span><br></pre></td></tr></table></figure><p>这是redis的前台启动，缺点是ssh命令窗口关了之后服务就会停止</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Redis/redis%E5%90%8E%E5%8F%B01.png?versionId=CAEQExiBgIDBlvfz1hciIDdhZjNmN2Y2M2E3YTQwNGZhNjgyMjcxOGYxMTIzY2Yx"></p><h3 id="6设置后台启动"><a href="#6-设置后台启动" class="headerlink" title="6.设置后台启动"></a>6.设置后台启动</h3><p>　　把redis源码包解压目录下的redis.conf复制到安装目录的bin下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;local&#x2F;software&#x2F;redis-5.0.0&#x2F;redis.conf  &#x2F;usr&#x2F;local&#x2F;software&#x2F;redis&#x2F;bin</span><br></pre></td></tr></table></figure><p>修改配置文件（bin下面的redis.conf）：<br>redis默认只能本机访问，要把下面两句改一下才能远程访问</p><p>#bind 127.0.0.1  注释掉<br>  关闭保护模式<br>  protected-mode no<br>  以守护进程后台模式运行<br>  daemonize yes</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Redis/redis.conf%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9.png?versionId=CAEQExiBgIC_lvfz1hciIDc4M2E2NjBlZTA5YzRlNjk4ODYxNTU5ZmZkMjQ3ZGI0"></p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Redis/1re.png?versionId=CAEQExiCgIC.lvfz1hciIDQyODFlMGYyNjQ5NTQ0Zjk4MGM5ODBlY2QzYjdiMTc0"><br>在bin目录下执行./redis-server redis.conf</p><p>检查是否启动完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps ef | grep redis</span><br></pre></td></tr></table></figure><h3 id="7开放端口号"><a href="#7-开放端口号" class="headerlink" title="7.开放端口号"></a>7.开放端口号</h3><p>有时候可能会出现连接不上的情况，要注意开放端口号</p><p>打开6379端口防火墙方法：</p><p>执行命令打开6379端口防火墙，看到success字样就表明添加成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;6379&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure><p>然后重新启动防火墙，看到success字样就表明重启成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>验证是否生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --query-port&#x3D;6379&#x2F;tcp</span><br></pre></td></tr></table></figure><p>开放完端口号后，连接一下就可以了　</p><p>　　</p><h3 id="8redisconf配置详解"><a href="#8-redis-conf配置详解" class="headerlink" title="8.redis.conf配置详解"></a>8.redis.conf配置详解</h3><p>redis.conf 里面有一些配置，可以根据需要修改，比如说添加认证密码。修改端口号等</p><p>redis.conf配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span><br><span class="line"></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line">2. 当Redis以守护进程方式运行时，Redis默认会把pid写入&#x2F;var&#x2F;run&#x2F;redis.pid文件，可以通过pidfile指定</span><br><span class="line"></span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis.pid</span><br><span class="line"></span><br><span class="line">3. 指定Redis监听端口，默认端口为6379，为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</span><br><span class="line"></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">4. 绑定的主机地址</span><br><span class="line"></span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line">5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span><br><span class="line"></span><br><span class="line">timeout 300</span><br><span class="line"></span><br><span class="line">6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span><br><span class="line"></span><br><span class="line">loglevel verbose</span><br><span class="line"></span><br><span class="line">7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给&#x2F;dev&#x2F;null</span><br><span class="line"></span><br><span class="line">logfile stdout</span><br><span class="line"></span><br><span class="line">8. 设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</span><br><span class="line"></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line">9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span><br><span class="line"></span><br><span class="line">save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"></span><br><span class="line">Redis默认配置文件中提供了三个条件：</span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line"></span><br><span class="line">save 300 10</span><br><span class="line"></span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</span><br><span class="line"></span><br><span class="line">10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span><br><span class="line"></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line">11. 指定本地数据库文件名，默认值为dump.rdb</span><br><span class="line"></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line">12. 指定本地数据库存放目录</span><br><span class="line"></span><br><span class="line">dir .&#x2F;</span><br><span class="line"></span><br><span class="line">13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span><br><span class="line"></span><br><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line">14. 当master服务设置了密码保护时，slav服务连接master的密码</span><br><span class="line"></span><br><span class="line">masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line">15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭</span><br><span class="line"></span><br><span class="line">requirepass foobared</span><br><span class="line"></span><br><span class="line">16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</span><br><span class="line"></span><br><span class="line">maxclients 128</span><br><span class="line"></span><br><span class="line">17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span><br><span class="line"></span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line">18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line">19. 指定更新日志文件名，默认为appendonly.aof</span><br><span class="line"></span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line">20. 指定更新日志条件，共有3个可选值： no：表示等操作系统进行数据缓存同步到磁盘（快） always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） everysec：表示每秒同步一次（折中，默认值）</span><br><span class="line"></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line">21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</span><br><span class="line"></span><br><span class="line">vm-enabled no</span><br><span class="line"></span><br><span class="line">22. 虚拟内存文件路径，默认值为&#x2F;tmp&#x2F;redis.swap，不可多个Redis实例共享</span><br><span class="line"></span><br><span class="line">vm-swap-file &#x2F;tmp&#x2F;redis.swap</span><br><span class="line"></span><br><span class="line">23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</span><br><span class="line"></span><br><span class="line">vm-max-memory 0</span><br><span class="line"></span><br><span class="line">24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</span><br><span class="line"></span><br><span class="line">vm-page-size 32</span><br><span class="line"></span><br><span class="line">25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</span><br><span class="line"></span><br><span class="line">vm-pages 134217728</span><br><span class="line"></span><br><span class="line">26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</span><br><span class="line"></span><br><span class="line">vm-max-threads 4</span><br><span class="line"></span><br><span class="line">27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</span><br><span class="line"></span><br><span class="line">glueoutputbuf yes</span><br><span class="line"></span><br><span class="line">28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span><br><span class="line"></span><br><span class="line">hash-max-zipmap-entries 64</span><br><span class="line"></span><br><span class="line">hash-max-zipmap-value 512</span><br><span class="line"></span><br><span class="line">29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</span><br><span class="line"></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line">30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</span><br><span class="line"></span><br><span class="line">include &#x2F;path&#x2F;to&#x2F;local.conf</span><br><span class="line"></span><br><span class="line">redis.conf配置</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-centos7单节点安装redis&quot;&gt;&lt;a href=&quot;#一、CentOS7单节点安装Redis&quot; class=&quot;headerlink&quot; title=&quot;一、CentOS7单节点安装Redis&quot;&gt;&lt;/a&gt;一、CentOS7单节点安装Redis&lt;/h2&gt;&lt;p&gt;注意</summary>
      
    
    
    
    <category term="缓存中间件" scheme="https://lswisdom.github.io/categories/%E7%BC%93%E5%AD%98%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="Redis" scheme="https://lswisdom.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Centos7开启防火墙命令</title>
    <link href="https://lswisdom.github.io/posts/3592562801/"/>
    <id>https://lswisdom.github.io/posts/3592562801/</id>
    <published>2021-07-25T09:13:26.000Z</published>
    <updated>2022-10-30T04:30:23.606Z</updated>
    
    <content type="html"><![CDATA[<p>打开6379端口防火墙方法：</p><p>执行命令打开6379端口防火墙，看到success字样就表明添加成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;6379&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure><p>然后重新启动防火墙，看到success字样就表明重启成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>最后可以输入命令验证6379端口打开是否生效，看到yes及表示生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --query-port&#x3D;6379&#x2F;tcp</span><br></pre></td></tr></table></figure><p>重试一下，就可以连接了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开6379端口防火墙方法：&lt;/p&gt;
&lt;p&gt;执行命令打开6379端口防火墙，看到success字样就表明添加成功&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    <category term="linux" scheme="https://lswisdom.github.io/categories/linux/"/>
    
    
    <category term="Linux环境安装" scheme="https://lswisdom.github.io/tags/Linux%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装JDK</title>
    <link href="https://lswisdom.github.io/posts/3393234349/"/>
    <id>https://lswisdom.github.io/posts/3393234349/</id>
    <published>2021-07-25T08:54:55.000Z</published>
    <updated>2022-10-30T04:30:28.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本环境配置"><a href="#基本环境配置" class="headerlink" title="基本环境配置"></a>基本环境配置</h2><h3 id="1centos7安装jdk"><a href="#1-CentOS7安装JDK" class="headerlink" title="1.CentOS7安装JDK"></a>1.CentOS7安装JDK</h3><h4 id="1检查系统中是否存在jdk"><a href="#1-检查系统中是否存在JDK" class="headerlink" title="1.检查系统中是否存在JDK"></a>1.检查系统中是否存在JDK</h4><p>CentOS一般会自带两个jdk，使用命令查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br><span class="line">rpm -e --nodeps 要卸载的包 (包通过上面的指令可以获取到)]</span><br><span class="line">如：</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.99-2.6.5.1.el6.x86_64</span><br><span class="line">rpm -e --nodeps java-1.6.0-openjdk-1.6.0.38-1.13.10.4.el6.x86_64</span><br><span class="line">rpm:用于管理套件</span><br><span class="line">-e:表示删除指定的套件</span><br><span class="line">-q:使用询问模式，当遇到任何问题时，rpm指令会先询问用户。</span><br><span class="line">-a:查询所有套件。</span><br><span class="line">|:把前一个命令原本要bai输出到屏幕的数据du当作是后一个命令的标准输入</span><br></pre></td></tr></table></figure><h4 id="2上传jdk包"><a href="#2-上传JDK包" class="headerlink" title="2.上传JDK包"></a>2.上传JDK包</h4><p>上传JDK包到/usr/local/software目录下面</p><p>执行解压JDK安装文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u151-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="3配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h4><p>vim /etc/profile</p><p>在文件最末尾加上下面几句话</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/software/jdk1.8.0_151</span><br><span class="line">export JRE_HOME=/usr/local/software/jdk1.8.0_151/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/JDK/JDK%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.png?versionId=CAEQExiBgICo1cjz1hciIDhhZTk0OTFjZjllOTQzNjNiYTQ0OGI0YjM1Nzk5NGMy"></p><p>保存退出</p><p>让配置生效：</p><p>source /etc/profile</p><p>检查环境：</p><p>运行java –version能看到版本信息</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/JDK/%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF.png?versionId=CAEQExiBgICT9bzz1hciIDZhZTVmNDYyMTAxYzRmZmNhYzc1MDRiNzhmODRjNGQ0"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本环境配置&quot;&gt;&lt;a href=&quot;#基本环境配置&quot; class=&quot;headerlink&quot; title=&quot;基本环境配置&quot;&gt;&lt;/a&gt;基本环境配置&lt;/h2&gt;&lt;h3 id=&quot;1centos7安装jdk&quot;&gt;&lt;a href=&quot;#1-CentOS7安装JDK&quot; class=&quot;h</summary>
      
    
    
    
    <category term="linux" scheme="https://lswisdom.github.io/categories/linux/"/>
    
    
    <category term="Linux环境安装" scheme="https://lswisdom.github.io/tags/Linux%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>centos7下安装ElasticSearch</title>
    <link href="https://lswisdom.github.io/posts/3121942040/"/>
    <id>https://lswisdom.github.io/posts/3121942040/</id>
    <published>2021-04-18T11:25:45.000Z</published>
    <updated>2022-10-30T04:17:26.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7安装elasticsearch712"><a href="#CentOS7安装ElasticSearch7-12" class="headerlink" title="CentOS7安装ElasticSearch7.12"></a>CentOS7安装ElasticSearch7.12</h1><h2 id="1安装jdk"><a href="#1-安装JDK" class="headerlink" title="1.安装JDK"></a>1.安装JDK</h2><p>安装JDK 并配置环境变量,配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;jdk1.8.0_281</span><br><span class="line">export JRE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;jdk1.8.0_281&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib</span><br><span class="line">export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</span><br></pre></td></tr></table></figure><h2 id="2安装elasticsearch"><a href="#2-安装ElasticSearch" class="headerlink" title="2.安装ElasticSearch"></a>2.安装ElasticSearch</h2><p>注意：我下载的是7版本,需要jdk11的支持，但是开发环境我选择 jdk1.8</p><p>​下载6版本的可以使用jdk1.8 </p><p>ElasticSearch文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html</a><br>ElasticSearch下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf elasticsearch-7.12.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>下载完成后的地址路径如下：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/01%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%E7%9B%AE%E5%BD%95.png?versionId=CAEQExiBgIDd547l1hciIDkwZTNkYWYxMTE0ZjRiZmU4MjAwYzY5ZWY5ZjZmYmE5"></p><h2 id="3启动es并解决es启动报错"><a href="#3-启动ES-并解决ES启动报错" class="headerlink" title="3.启动ES,并解决ES启动报错"></a>3.启动ES,并解决ES启动报错</h2><p>进入bin目录下面执行  ./elasticsearch</p><h3 id="错误一es712-需要使用jdk11的版本"><a href="#错误一：ES7-12-需要使用JDK11的版本" class="headerlink" title="错误一：ES7.12 需要使用JDK11的版本"></a>错误一：ES7.12 需要使用JDK11的版本</h3><p>报错，提示信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">distribution with a bundled JDK, ensure the JAVA_HOME environment variable is not set.</span><br><span class="line">warning: usage of JAVA_HOME is deprecated, use ES_JAVA_HOME</span><br><span class="line">Future versions of Elasticsearch will require Java <span class="number">11</span>; your Java version from [/usr/local/software/jdk1<span class="number">.8</span><span class="number">.0_281</span>/jre] does not meet <span class="keyword">this</span> requirement. Consider switching to a distribution of Elasticsearch with a bundled JDK. If you are already using a distribution with a bundled JDK, ensure the JAVA_HOME environment variable is not set.</span><br><span class="line">[<span class="number">2021</span>-<span class="number">04</span>-18T19:<span class="number">54</span>:<span class="number">57</span>,<span class="number">709</span>][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [MiWiFi-R3-srv] uncaught exception in thread [main]</span><br></pre></td></tr></table></figure><p>这个意思提示我们，使用ES7.12需要jdk11的版本<br>下载安装jdk11,并修改es需要的jdk环境变量<br>修改vim elasticsearch 文件,并在文件最上方添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#配置自己的jdk11</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk-11.0.10&#x2F;</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">#添加jdk判断</span><br><span class="line">if [ -x &quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot; ]; then</span><br><span class="line">        JAVA&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;jdk-11.0.10&#x2F;bin&#x2F;java&quot;</span><br><span class="line">else</span><br><span class="line">        JAVA&#x3D;&#96;which java&#96;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>再次启动ES    ./elasticsearch</p><h3 id="错误二es提示我们不可以使用root用户"><a href="#错误二：Es提示我们不可以使用root用户" class="headerlink" title="错误二：Es提示我们不可以使用root用户"></a>错误二：Es提示我们不可以使用root用户</h3><p> 提示信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:101)</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:168)</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:397)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:159)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:150)</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:75)</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:116)</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:79)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:115)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:81)</span><br><span class="line">For complete error details, refer to the log at &#x2F;usr&#x2F;local&#x2F;software&#x2F;elasticsearch-7.12.0&#x2F;logs&#x2F;elasticsearch.log</span><br></pre></td></tr></table></figure><p>解决办法：创建新用户，并用新用户进行启动<br>创建用户组：groupadd esgroup<br>创建es用户：useradd esuser -g esgroup -p 123456<br>然后使用chown命令来让这个文件夹属于这个用户<br>chown -R esuser:esgroup elasticsearch-7.12.0<br>切换用户，使用新用户esuser进行服务启动</p><p>再次启动,启动成功后，使用curl 127.0.0.1:9200 进行访问，如果返回一段json。说明启动成功了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@MiWiFi-R3-srv bin]# curl 127.0.0.1:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;MiWiFi-R3-srv&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;htoKhKvMRfCpzscUQLWWAQ&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.12.0&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;tar&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;78722783c38caa25a70982b5b042074cde5d3b3a&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2021-03-18T06:17:15.410153305Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.8.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是ES默认支持localhost启动，修改配置文件config下面的vim elasticsearch.yml 如下图所示<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/03elasticsearch.yml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png?versionId=CAEQExiBgMCf9fzt1hciIGZhZDAzMWZmOTQ2NTQ0MTQ4NWFjMTIwZDNlN2M3ODZm"><br>启动完成后，重新启动，又出现了新的警告信息</p><h3 id="错误三option-useconcmarksweepgc-was-deprecated-in-version-90-and-will-likely-be-removed-in-a-future-release"><a href="#错误三：Option-UseConcMarkSweepGC-was-deprecated-in-version-9-0-and-will-likely-be-removed-in-a-future-release" class="headerlink" title="错误三：Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release"></a>错误三：Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release</h3><p>这个是警告信息，垃圾回收器的问题，可以不修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</span><br></pre></td></tr></table></figure><h3 id="错误四提示在启动elasticsearch之前您必须解决以下行中描述的要点"><a href="#错误四：提示：在启动Elasticsearch之前，您必须解决以下行中描述的要点" class="headerlink" title="错误四：提示：在启动Elasticsearch之前，您必须解决以下行中描述的要点"></a>错误四：提示：在启动Elasticsearch之前，您必须解决以下行中描述的要点</h3><p>提示信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [3] bootstrap checks failed. You must address the points described in the following [3] lines before starting Elasticsearch.</span><br><span class="line">bootstrap check failure [1] of [3]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class="line">bootstrap check failure [2] of [3]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">bootstrap check failure [3] of [3]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</span><br><span class="line">ERROR: Elasticsearch did not exit normally - check the logs at &#x2F;usr&#x2F;local&#x2F;software&#x2F;elasticsearch-7.12.0&#x2F;logs&#x2F;elasticsearch.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4第一个错误意思大概是elasticsearch进程的文件描述符4096过低增加到至少65535"><a href="#4-第一个错误，意思大概是：elasticsearch进程的文件描述符-4096-过低，增加到至少-65535" class="headerlink" title="4.第一个错误，意思大概是：elasticsearch进程的文件描述符[4096]过低，增加到至少[65535]"></a>4.第一个错误，意思大概是：elasticsearch进程的文件描述符[4096]过低，增加到至少[65535]</h3><p>解决方案：<br> 修改 vim /etc/security/limits.conf<br> 在文件最下方加入如下配置：<br>注意：第一列是你刚才创建的用户名称,我刚才创建的用户是esuser</p><p>esuser soft nofile 65536<br>esuser hard nofile 65536<br>esuser soft nproc 4096<br>esuser hard nproc 4096</p><h3 id="5第二个错误意思大概是虚拟机最大的虚拟内存区域-max_map_count65530太低增加到至少262144"><a href="#5-第二个错误，意思大概是：虚拟机最大的虚拟内存区域。max-map-count-65530-太低，增加到至少-262144" class="headerlink" title="5.第二个错误，意思大概是：虚拟机最大的虚拟内存区域。max_map_count[65530]太低，增加到至少[262144]"></a>5.第二个错误，意思大概是：虚拟机最大的虚拟内存区域。max_map_count[65530]太低，增加到至少[262144]</h3><p>解决办法：进入/etc 修改sysctl.conf文档，里面都是注释，添加如下面一行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count&#x3D;655360 推荐信息提示至少262144</span><br></pre></td></tr></table></figure><p>保存信息wq<br>注意：配置如果想要生效，需要执行如下配置：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/04%E9%85%8D%E7%BD%AE%E7%94%9F%E6%95%88.png?versionId=CAEQExiBgIC6j4Tu1hciIGRhNGI1MmNiY2Q3ZTQ3NzA5YjM2MDljMTlhNzU0N2Nk"></p><h3 id="6第三个错误"><a href="#6-第三个错误：" class="headerlink" title="6.第三个错误："></a>6.第三个错误：</h3><p>解决办法：在elasticsearch的config目录下，修改elasticsearch.yml配置文件，将下面的配置加入到该配置文件中：<br>注意：这里的node-1为node-name配置的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;] </span><br></pre></td></tr></table></figure><p>注意默认情况下：node-name的值是注释掉的。这里要放开</p><h3 id="7-重新启动es-看看效果启动完成后还是提示这个错误"><a href="#7-重新启动ES-看看效果-启动完成后-还是提示这个错误" class="headerlink" title="7. 重新启动ES 看看效果,启动完成后,还是提示这个错误"></a>7. 重新启动ES 看看效果,启动完成后,还是提示这个错误</h3><p> check failure [1] of [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]<br>这种情况,可能是配置没有生效,重启虚拟机再看看效果<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/05elastic-search%E5%90%AF%E5%8A%A8%E6%95%88%E6%9E%9C.png?versionId=CAEQExiCgIC9j4Tu1hciIDEwYTAyMjA1MWI1YzQwOTk5ODIxOGU5YzJmZTg3ZWEw"><br>重新启动完成后，再次启动提示start，表示已经正常启动了</p><h3 id="8windows电脑无法直接访问"><a href="#8-windows电脑无法直接访问" class="headerlink" title="8.windows电脑无法直接访问"></a>8.windows电脑无法直接访问</h3><p>开放9200端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;9200&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>使用windows客户端访问，能看到正常返回json了<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/06%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%E6%95%88%E6%9E%9C.png?versionId=CAEQExiBgIC9j4Tu1hciIGIzNmRjMGY2NDNjYTQ4Zjc4NTRmMDA5YWU4MmUyNzE3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;centos7安装elasticsearch712&quot;&gt;&lt;a href=&quot;#CentOS7安装ElasticSearch7-12&quot; class=&quot;headerlink&quot; title=&quot;CentOS7安装ElasticSearch7.12&quot;&gt;&lt;/a&gt;CentOS7安装</summary>
      
    
    
    
    <category term="搜索引擎" scheme="https://lswisdom.github.io/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="Es学习" scheme="https://lswisdom.github.io/tags/Es%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用CAS实现单点登录一</title>
    <link href="https://lswisdom.github.io/posts/3633779439/"/>
    <id>https://lswisdom.github.io/posts/3633779439/</id>
    <published>2021-04-14T23:32:10.000Z</published>
    <updated>2022-10-30T04:29:25.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-cas服务器的搭建"><a href="#一、CAS服务器的搭建" class="headerlink" title="一、CAS服务器的搭建"></a>一、CAS服务器的搭建</h1><p>地址：github地址：<a href="https://github.com/apereo/cas-overlay-template">https://github.com/apereo/cas-overlay-template</a></p><h2 id="11-服务部署和测试"><a href="#1-1-服务部署和测试" class="headerlink" title="1.1 服务部署和测试"></a>1.1 服务部署和测试</h2><p>clone下来依赖包,下载后的依赖包,需要手动创建src/main/resources 目录,并在该目录下面创建application.properties文件和log4j2.xml文件<br>log4j2.xml文件,主要是为了设置CAS的日志输出目录<br>application.properties目录：一些数据库配置、证书配置等<br>配置完成后,打包部署在tomcat的webapp目录下面</p><p>等待CAS服务启动之后,通过<a href="http://localhost:8080/cas/login">http://localhost:8080/cas/login</a><br>可以使用默认的账号：casuser   Mellon登录</p><h1 id="二-配置applicationpropertis-文件通过数据库验证"><a href="#二、配置application-propertis-文件-通过数据库验证" class="headerlink" title="二、配置application.propertis 文件,通过数据库验证"></a>二、配置application.propertis 文件,通过数据库验证</h1><h2 id="21-pomxml中添加依赖文件"><a href="#2-1-pom-xml中添加依赖文件" class="headerlink" title="2.1 pom.xml中添加依赖文件"></a>2.1 pom.xml中添加依赖文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.postgresql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;postgresql&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;42.2.18.jre7&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apereo.cas&#x2F;cas-server-support-jdbc --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apereo.cas&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cas-server-support-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;cas.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>注释掉默认的用户配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#cas.authn.accept.users&#x3D;casuser::Mellon</span><br></pre></td></tr></table></figure><h2 id="22-添加jdbc认证"><a href="#2-2-添加jdbc认证" class="headerlink" title="2.2 添加jdbc认证"></a>2.2 添加jdbc认证</h2><h3 id="221-这是使用数据库连接的配置"><a href="#2-2-1-这是使用数据库连接的配置" class="headerlink" title="2.2.1 这是使用数据库连接的配置"></a>2.2.1 这是使用数据库连接的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cas.authn.jdbc.query[0].driverClass&#x3D;org.postgresql.Driver</span><br><span class="line">cas.authn.jdbc.query[0].url&#x3D;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres</span><br><span class="line">cas.authn.jdbc.query[0].user&#x3D;postgres</span><br><span class="line">cas.authn.jdbc.query[0].password&#x3D;password</span><br><span class="line"></span><br><span class="line">cas.authn.jdbc.query[0].sql&#x3D;select * from sys_user where username&#x3D;?</span><br><span class="line"># 字段的列明</span><br><span class="line">cas.authn.jdbc.query[0].fieldPassword&#x3D;password</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure><h3 id="222-md5加密配置"><a href="#2-2-2-MD5加密配置" class="headerlink" title="2.2.2 MD5加密配置"></a>2.2.2 MD5加密配置</h3><p>如果密码进行加盐配置,需要增加如下配置,这样数据库中存储的事MD5加密的密码,CAS页面输入的密码还是原始的密码就可以登录 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm&#x3D;MD5</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.type&#x3D;DEFAULT</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure><h3 id="223-密码加盐加密"><a href="#2-2-3-密码加盐加密" class="headerlink" title="2.2.3 密码加盐加密"></a>2.2.3 密码加盐加密</h3><p>简单的MD5值太简单,需要加盐值的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 加盐配置</span><br><span class="line">#配置数据库连接</span><br><span class="line">cas.authn.jdbc.encode[0].driverClass&#x3D;org.postgresql.Driver</span><br><span class="line">cas.authn.jdbc.encode[0].url&#x3D;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres</span><br><span class="line">cas.authn.jdbc.encode[0].user&#x3D;postgres</span><br><span class="line">cas.authn.jdbc.encode[0].password&#x3D;password</span><br><span class="line">#加密迭代次数</span><br><span class="line">cas.authn.jdbc.encode[0].numberOfIterations&#x3D;1024</span><br><span class="line"># 数据库存放的动态盐值的字段列明</span><br><span class="line">cas.authn.jdbc.encode[0].saltFieldName&#x3D;PasswordSalt</span><br><span class="line">cas.authn.jdbc.encode[0].sql&#x3D;select * from sys_user where username&#x3D;?</span><br><span class="line">cas.authn.jdbc.encode[0].algorithmName&#x3D;MD5</span><br><span class="line"># 哪个字段作为密码字段</span><br><span class="line">cas.authn.jdbc.encode[0].passwordFieldName&#x3D;password</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application.properties文件的模板如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line"># CAS Server Context Configuration</span><br><span class="line">#</span><br><span class="line">server.context-path&#x3D;&#x2F;cas</span><br><span class="line">server.port&#x3D;8443</span><br><span class="line"></span><br><span class="line"># CAS 的访问需要https证书,在这里配置</span><br><span class="line">server.ssl.key-store&#x3D;E:&#x2F;download&#x2F;tomcat.keystore</span><br><span class="line">server.ssl.key-store-password&#x3D;123456</span><br><span class="line">server.ssl.key-password&#x3D;123456</span><br><span class="line"></span><br><span class="line">server.max-http-header-size&#x3D;2097152</span><br><span class="line">server.use-forward-headers&#x3D;true</span><br><span class="line">server.connection-timeout&#x3D;20000</span><br><span class="line">server.error.include-stacktrace&#x3D;ALWAYS</span><br><span class="line"></span><br><span class="line">server.compression.enabled&#x3D;true</span><br><span class="line">server.compression.mime-types&#x3D;application&#x2F;javascript,application&#x2F;json,application&#x2F;xml,text&#x2F;html,text&#x2F;xml,text&#x2F;plain</span><br><span class="line"></span><br><span class="line">server.tomcat.max-http-post-size&#x3D;2097152</span><br><span class="line">server.tomcat.basedir&#x3D;build&#x2F;tomcat</span><br><span class="line">server.tomcat.accesslog.enabled&#x3D;true</span><br><span class="line">server.tomcat.accesslog.pattern&#x3D;%t %a &quot;%r&quot; %s (%D ms)</span><br><span class="line">server.tomcat.accesslog.suffix&#x3D;.log</span><br><span class="line">server.tomcat.min-spare-threads&#x3D;10</span><br><span class="line">server.tomcat.max-threads&#x3D;200</span><br><span class="line">server.tomcat.port-header&#x3D;X-Forwarded-Port</span><br><span class="line">server.tomcat.protocol-header&#x3D;X-Forwarded-Proto</span><br><span class="line">server.tomcat.protocol-header-https-value&#x3D;https</span><br><span class="line">server.tomcat.remote-ip-header&#x3D;X-FORWARDED-FOR</span><br><span class="line">server.tomcat.uri-encoding&#x3D;UTF-8</span><br><span class="line"></span><br><span class="line">spring.http.encoding.charset&#x3D;UTF-8</span><br><span class="line">spring.http.encoding.enabled&#x3D;true</span><br><span class="line">spring.http.encoding.force&#x3D;true</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># CAS Cloud Bus Configuration</span><br><span class="line">#</span><br><span class="line">spring.cloud.bus.enabled&#x3D;false</span><br><span class="line"></span><br><span class="line"># Indicates that systemPropertiesOverride can be used.</span><br><span class="line"># Set to false to prevent users from changing the default accidentally. Default true.</span><br><span class="line">spring.cloud.config.allow-override&#x3D;true</span><br><span class="line"></span><br><span class="line"># External properties should override system properties.</span><br><span class="line">spring.cloud.config.override-system-properties&#x3D;false</span><br><span class="line"></span><br><span class="line"># When allowOverride is true, external properties should take lowest priority, and not override any</span><br><span class="line"># existing property sources (including local config files).</span><br><span class="line">spring.cloud.config.override-none&#x3D;false</span><br><span class="line"></span><br><span class="line"># spring.cloud.bus.refresh.enabled&#x3D;true</span><br><span class="line"># spring.cloud.bus.env.enabled&#x3D;true</span><br><span class="line"># spring.cloud.bus.destination&#x3D;CasCloudBus</span><br><span class="line"># spring.cloud.bus.ack.enabled&#x3D;true</span><br><span class="line"></span><br><span class="line">endpoints.enabled&#x3D;false</span><br><span class="line">endpoints.sensitive&#x3D;true</span><br><span class="line"></span><br><span class="line">endpoints.restart.enabled&#x3D;false</span><br><span class="line">endpoints.shutdown.enabled&#x3D;false</span><br><span class="line"></span><br><span class="line"># Control the security of the management&#x2F;actuator endpoints</span><br><span class="line"># The &#39;enabled&#39; flag below here controls the rendering of details for the health endpoint amongst other things.</span><br><span class="line">management.security.enabled&#x3D;true</span><br><span class="line">management.security.roles&#x3D;ACTUATOR,ADMIN</span><br><span class="line">management.security.sessions&#x3D;if_required</span><br><span class="line">management.context-path&#x3D;&#x2F;status</span><br><span class="line">management.add-application-context-header&#x3D;false</span><br><span class="line"></span><br><span class="line"># Define a CAS-specific &quot;WARN&quot; status code and its order</span><br><span class="line">management.health.status.order&#x3D;WARN, DOWN, OUT_OF_SERVICE, UNKNOWN, UP</span><br><span class="line"></span><br><span class="line"># Control the security of the management&#x2F;actuator endpoints</span><br><span class="line"># With basic authentication, assuming Spring Security and&#x2F;or relevant modules are on the classpath.</span><br><span class="line">security.basic.authorize-mode&#x3D;role</span><br><span class="line">security.basic.path&#x3D;&#x2F;cas&#x2F;status&#x2F;**</span><br><span class="line"># security.basic.enabled&#x3D;true</span><br><span class="line"># security.user.name&#x3D;casuser</span><br><span class="line"># security.user.password&#x3D;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># CAS Web Application Session Configuration</span><br><span class="line">#</span><br><span class="line">server.session.timeout&#x3D;300</span><br><span class="line">server.session.cookie.http-only&#x3D;true</span><br><span class="line">server.session.tracking-modes&#x3D;COOKIE</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># CAS Thymeleaf View Configuration</span><br><span class="line">#</span><br><span class="line">spring.thymeleaf.encoding&#x3D;UTF-8</span><br><span class="line">spring.thymeleaf.cache&#x3D;true</span><br><span class="line">spring.thymeleaf.mode&#x3D;HTML</span><br><span class="line">spring.thymeleaf.template-resolver-order&#x3D;100</span><br><span class="line">##</span><br><span class="line"># CAS Log4j Configuration</span><br><span class="line">#</span><br><span class="line"># logging.config&#x3D;file:&#x2F;etc&#x2F;cas&#x2F;log4j2.xml</span><br><span class="line">server.context-parameters.isLog4jAutoInitializationDisabled&#x3D;true</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># CAS AspectJ Configuration</span><br><span class="line">#</span><br><span class="line">spring.aop.auto&#x3D;true</span><br><span class="line">spring.aop.proxy-target-class&#x3D;true</span><br><span class="line"></span><br><span class="line">## 添加认证服务</span><br><span class="line">cas.tgc.secure&#x3D;false</span><br><span class="line">cas.serviceRegistry.initFromJson&#x3D;true</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># CAS Authentication Credentials</span><br><span class="line">#</span><br><span class="line"># 默认的登录正好和密码</span><br><span class="line">#cas.authn.accept.users&#x3D;casuser::Mellon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加盐配置</span><br><span class="line">#配置数据库连接</span><br><span class="line">#cas.authn.jdbc.encode[0].driverClass&#x3D;org.postgresql.Driver</span><br><span class="line">#cas.authn.jdbc.encode[0].url&#x3D;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres</span><br><span class="line">#cas.authn.jdbc.encode[0].user&#x3D;postgres</span><br><span class="line">#cas.authn.jdbc.encode[0].password&#x3D;password</span><br><span class="line">#加密迭代次数</span><br><span class="line">#cas.authn.jdbc.encode[0].numberOfIterations&#x3D;1024</span><br><span class="line"># 数据库存放的动态盐值的字段列明</span><br><span class="line">#cas.authn.jdbc.encode[0].saltFieldName&#x3D;PasswordSalt</span><br><span class="line">#cas.authn.jdbc.encode[0].sql&#x3D;select * from sys_user where username&#x3D;?</span><br><span class="line">#cas.authn.jdbc.encode[0].algorithmName&#x3D;MD5</span><br><span class="line"># 哪个字段作为密码字段</span><br><span class="line">#cas.authn.jdbc.encode[0].passwordFieldName&#x3D;password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cas.authn.jdbc.query[0].driverClass&#x3D;org.postgresql.Driver</span><br><span class="line">cas.authn.jdbc.query[0].url&#x3D;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres</span><br><span class="line">cas.authn.jdbc.query[0].user&#x3D;postgres</span><br><span class="line">cas.authn.jdbc.query[0].password&#x3D;password</span><br><span class="line"></span><br><span class="line">#cas.authn.jdbc.query[0].numberOfIterations&#x3D;1024</span><br><span class="line">#cas.authn.jdbc.query[0].saltFieldName&#x3D;PasswordSalt</span><br><span class="line">cas.authn.jdbc.query[0].sql&#x3D;select * from sys_user where username&#x3D;?</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm&#x3D;MD5</span><br><span class="line">cas.authn.jdbc.query[0].fieldPassword&#x3D;password</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.type&#x3D;DEFAULT</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding&#x3D;UTF-8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>log4j2.xml文件的模板如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!-- Specify the refresh internal in seconds. --&gt;</span><br><span class="line">&lt;Configuration monitorInterval&#x3D;&quot;5&quot; packages&#x3D;&quot;org.apereo.cas.logging&quot;&gt;</span><br><span class="line">    &lt;Properties&gt;</span><br><span class="line">        &lt;Property name&#x3D;&quot;baseDir&quot;&gt;D:\device-logs&lt;&#x2F;Property&gt;</span><br><span class="line">    &lt;&#x2F;Properties&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name&#x3D;&quot;console&quot; target&#x3D;&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%d %p [%c] - &lt;%m&gt;%n&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Console&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RollingFile name&#x3D;&quot;file&quot; fileName&#x3D;&quot;$&#123;baseDir&#125;&#x2F;cas.log&quot; append&#x3D;&quot;true&quot;</span><br><span class="line">                     filePattern&#x3D;&quot;$&#123;baseDir&#125;&#x2F;cas-%d&#123;yyyy-MM-dd-HH&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%highlight&#123;%d %p [%c] - &lt;%m&gt;&#125;%n&quot;&#x2F;&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;OnStartupTriggeringPolicy &#x2F;&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;10 MB&quot;&#x2F;&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max&#x3D;&quot;5&quot; compressionLevel&#x3D;&quot;9&quot;&gt;</span><br><span class="line">                &lt;Delete basePath&#x3D;&quot;$&#123;baseDir&#125;&quot; maxDepth&#x3D;&quot;2&quot;&gt;</span><br><span class="line">                    &lt;IfFileName glob&#x3D;&quot;*&#x2F;*.log.gz&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;IfLastModified age&#x3D;&quot;7d&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;Delete&gt;</span><br><span class="line">            &lt;&#x2F;DefaultRolloverStrategy&gt;</span><br><span class="line">        &lt;&#x2F;RollingFile&gt;</span><br><span class="line">        &lt;RollingFile name&#x3D;&quot;auditlogfile&quot; fileName&#x3D;&quot;$&#123;baseDir&#125;&#x2F;cas_audit.log&quot; append&#x3D;&quot;true&quot;</span><br><span class="line">                     filePattern&#x3D;&quot;$&#123;baseDir&#125;&#x2F;cas_audit-%d&#123;yyyy-MM-dd-HH&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%d %p [%c] - %m%n&quot;&#x2F;&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;OnStartupTriggeringPolicy &#x2F;&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;10 MB&quot;&#x2F;&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max&#x3D;&quot;5&quot; compressionLevel&#x3D;&quot;9&quot;&gt;</span><br><span class="line">                &lt;Delete basePath&#x3D;&quot;$&#123;baseDir&#125;&quot; maxDepth&#x3D;&quot;2&quot;&gt;</span><br><span class="line">                    &lt;IfFileName glob&#x3D;&quot;*&#x2F;*.log.gz&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;IfLastModified age&#x3D;&quot;7d&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;Delete&gt;</span><br><span class="line">            &lt;&#x2F;DefaultRolloverStrategy&gt;</span><br><span class="line">        &lt;&#x2F;RollingFile&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RollingFile name&#x3D;&quot;perfFileAppender&quot; fileName&#x3D;&quot;$&#123;baseDir&#125;&#x2F;perfStats.log&quot; append&#x3D;&quot;true&quot;</span><br><span class="line">                     filePattern&#x3D;&quot;$&#123;baseDir&#125;&#x2F;perfStats-%d&#123;yyyy-MM-dd-HH&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%m%n&quot;&#x2F;&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;OnStartupTriggeringPolicy &#x2F;&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;10 MB&quot;&#x2F;&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max&#x3D;&quot;5&quot; compressionLevel&#x3D;&quot;9&quot;&gt;</span><br><span class="line">                &lt;Delete basePath&#x3D;&quot;$&#123;baseDir&#125;&quot; maxDepth&#x3D;&quot;2&quot;&gt;</span><br><span class="line">                    &lt;IfFileName glob&#x3D;&quot;*&#x2F;*.log.gz&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;IfLastModified age&#x3D;&quot;7d&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;Delete&gt;</span><br><span class="line">            &lt;&#x2F;DefaultRolloverStrategy&gt;</span><br><span class="line">        &lt;&#x2F;RollingFile&gt;</span><br><span class="line"></span><br><span class="line">        &lt;CasAppender name&#x3D;&quot;casAudit&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;auditlogfile&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;CasAppender&gt;</span><br><span class="line">        &lt;CasAppender name&#x3D;&quot;casFile&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;CasAppender&gt;</span><br><span class="line">        &lt;CasAppender name&#x3D;&quot;casConsole&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;console&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;CasAppender&gt;</span><br><span class="line">        &lt;CasAppender name&#x3D;&quot;casPerf&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;perfFileAppender&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;CasAppender&gt;</span><br><span class="line">    &lt;&#x2F;Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;com.couchbase&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apereo.cas.web.CasWebApplication&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.security&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.boot.autoconfigure.security&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.jasig.cas.client&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apereo&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apereo.services.persondir&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apache&quot; level&#x3D;&quot;error&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.cloud&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.cloud.context&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.boot&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.aop&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.boot.actuate.autoconfigure&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.webflow&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.session&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.amqp&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.integration&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.messaging&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.web&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.orm.jpa&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.scheduling&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.thymeleaf&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.pac4j&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.opensaml&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;net.sf.ehcache&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;com.ryantenney.metrics&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;console&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;file&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;net.jradius&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.openid4java&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.ldaptive&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;com.hazelcast&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.context.annotation&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.boot.devtools&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.jasig.spring&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.web.socket&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apache.cxf&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apache.http&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;perfStatsLogger&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casPerf&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apereo.cas.web.flow&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;true&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apereo.inspektr.audit.support&quot; level&#x3D;&quot;info&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casAudit&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncRoot level&#x3D;&quot;error&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncRoot&gt;</span><br><span class="line">    &lt;&#x2F;Loggers&gt;</span><br><span class="line">&lt;&#x2F;Configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-cas服务器的搭建&quot;&gt;&lt;a href=&quot;#一、CAS服务器的搭建&quot; class=&quot;headerlink&quot; title=&quot;一、CAS服务器的搭建&quot;&gt;&lt;/a&gt;一、CAS服务器的搭建&lt;/h1&gt;&lt;p&gt;地址：github地址：&lt;a href=&quot;https://githu</summary>
      
    
    
    
    <category term="云原生" scheme="https://lswisdom.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="证书" scheme="https://lswisdom.github.io/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装MYSLQ5.7</title>
    <link href="https://lswisdom.github.io/posts/1192933728/"/>
    <id>https://lswisdom.github.io/posts/1192933728/</id>
    <published>2021-04-05T09:54:08.000Z</published>
    <updated>2022-10-30T04:30:26.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="centos73安装mysql"><a href="#CentOS7-3安装mysql" class="headerlink" title="CentOS7.3安装mysql"></a>CentOS7.3安装mysql</h2><p><strong>第一步：下载和安装mysql源</strong></p><p>1.先下载 mysql源安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure><p>2.安装mysql源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y localinstall mysql57-community-release-el7-11.noarch.rpm </span><br></pre></td></tr></table></figure><p><strong>第二步：在线安装Mysql</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p>下载的东西比较多,要稍微等会</p><p><strong>第三步：启动Mysql服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><p><strong>第四步：设置开机启动</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p><strong>第五步：修改root本地登录密码</strong></p><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个临时的默认密码。</p><p>[root@localhost ~]# vi /var/log/mysqld.log</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/mysql/%E5%AE%89%E8%A3%85/mysql5.7%E7%9A%84%E5%AF%86%E7%A0%81.png?versionId=CAEQExiBgICcvufk1hciIDJhYWI3YjU5OWQ0NzQ0OTM4ZDBkNDZmZDlmMTgxYjg4" alt="mysql的密码"></p><p>这里的临时密码 eMV.R#mWe3ha</p><p>[root@localhost ~]#  mysql -u root -p</p><p>Enter password: </p><p>输入临时密码 进入mysql命令行；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;ZhipengWang2012@&#39;;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>修改密码为 ZhipengWang2012@    (备注 mysql5.7默认密码策略要求密码必须是大小写字母数字特殊字母的组合，至少8位) </p><p><strong>第七步：设置允许远程登录</strong></p><p>Mysql默认不允许远程登录，我们需要设置下，并且防火墙开放3306端口；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;@LiShuai123&#39; WITH GRANT OPTION;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; exit;</span><br><span class="line"></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>退出下；</p><p>centos7开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# firewall-cmd --zone&#x3D;public --add-port&#x3D;3306&#x2F;tcp --permanent</span><br><span class="line"></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# </span><br><span class="line"></span><br><span class="line">开放3306端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>第八步：配置默认编码为utf8</strong></p><p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</p><p>[mysqld]</p><p>character_set_server=utf8</p><p>init_connect=’SET NAMES utf8’</p><p>[root@localhost ~]# vi /etc/my.cnf</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/mysql/%E5%AE%89%E8%A3%85/Mysql5.7%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81.png?versionId=CAEQExiBgICQvufk1hciIDE5NDcyNzYxMWY5YzQ5N2RhNmNhMjIwM2E3ZTVhNWU0" alt="修改编码">  </p><p>编辑保存完 重启mysql服务；</p><p>[root@localhost ~]# systemctl restart mysqld</p><p>[root@localhost ~]# </p><p>查看下编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%character%&#39;;</span><br><span class="line"></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line"></span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line"></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line"></span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line"></span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_sets_dir       | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |</span><br><span class="line"></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line"></span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注:都安装成功了之后，那个tar.gz的压缩包就可以删掉了，节省磁盘空间</p><p>linux下的mysql默认是大小写敏感的，通过java操作数据库的时候会出现找不到表的情况，需要设置大小写不敏感</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqld]后添加添加lower_case_table_names&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/mysql/%E5%AE%89%E8%A3%85/mysql5.7%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E8%AE%BE%E7%BD%AE.png?versionId=CAEQExiBgID.vefk1hciIGRhYjAzNTFkMzE2ZDQ4ZDQ4MGNmNzQ0ZjA4OGQyMjhm" alt="设置大小写不敏感">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">虚拟机中mysql的地址如下：</span><br><span class="line">10.9.32.171</span><br><span class="line">账号root</span><br><span class="line">密码：root</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CentOs6.8安装mysql</p><p><a href="https://www.cnblogs.com/saneri/p/6617415.html">https://www.cnblogs.com/saneri/p/6617415.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;centos73安装mysql&quot;&gt;&lt;a href=&quot;#CentOS7-3安装mysql&quot; class=&quot;headerlink&quot; title=&quot;CentOS7.3安装mysql&quot;&gt;&lt;/a&gt;CentOS7.3安装mysql&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;第一步：下载和</summary>
      
    
    
    
    <category term="linux" scheme="https://lswisdom.github.io/categories/linux/"/>
    
    
    <category term="Linux环境安装" scheme="https://lswisdom.github.io/tags/Linux%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
