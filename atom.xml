<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LsWisdom的博客</title>
  
  <subtitle>谋事在人成事在天</subtitle>
  <link href="https://lswisdom.github.io/atom.xml" rel="self"/>
  
  <link href="https://lswisdom.github.io/"/>
  <updated>2021-08-21T08:26:16.518Z</updated>
  <id>https://lswisdom.github.io/</id>
  
  <author>
    <name>ls</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VUE基本使用和的组件介绍</title>
    <link href="https://lswisdom.github.io/posts/1082886779/"/>
    <id>https://lswisdom.github.io/posts/1082886779/</id>
    <published>2021-08-20T13:37:58.000Z</published>
    <updated>2021-08-21T08:26:16.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue的简单使用一"><a href="#Vue的简单使用一" class="headerlink" title="Vue的简单使用一"></a>Vue的简单使用一</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Vue是一款渐进式的JavaScript框架,作者<strong>尤雨溪(Evan You)</strong><br>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>更加轻量20kb min +gzip</li><li>渐进式框架</li><li>响应式的更新机制</li><li>学习成本低</li></ul><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p>vue 官网地址：<a href="https://cn.vuejs.org/v2/guide/#Vue-js-%E6%98%AF%E4%BB%80%E4%B9%88">https://cn.vuejs.org/v2/guide/#Vue-js-%E6%98%AF%E4%BB%80%E4%B9%88</a><br>安装分为两个版本,开发版本和生成版本,如下图所示：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/01vue%E5%AE%89%E8%A3%85.png?versionId=CAEQGxiBgMCI9q6P2xciIDZlMjM4YmM1Njg5ZjQ3MGJiYzcwOWFhZDM1MzQ4MmYw"></p><h2 id="helloworld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>开发工具vscode<br>新建一个html文件,输入html:5 快速生成一个模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--双括号用来显示变量 双括号还支持表达式如：&#123;&#123;message+message&#125;&#125; ,但是不支持定义变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125; &#123;&#123; message + message &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 动态解析v-bind   可以简写为:id</span></span><br><span class="line"><span class="comment">        v-bind  用来绑定一个动态的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-if 和 v-else 和js中的if else作用是相似的    v-show 是否显示按钮--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-for对应这js中的循环操作 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;!item.del_flag&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: line-through;&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;!item.del_flag&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入CDN 文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    // 直接下载并用 <span class="tag">&lt;<span class="name">script</span>&gt;</span> 标签引入，Vue 会被注册为一个全局变量</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,   <span class="comment">// el元素用来指定一个DOM节点。div标签使用是ID,所以这里使用警号</span></span></span><br><span class="line"><span class="javascript">        data: &#123;        <span class="comment">// data表示数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;hello world&#x27;</span>,</span></span><br><span class="line">            list: [&#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;标题1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                del_flag: <span class="literal">false</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="javascript">                    title: <span class="string">&#x27;标题2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    del_flag: <span class="literal">true</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。可以打开你的浏览器的 JavaScript 控制台 并修改 vm.message 的值，你将看到上例相应地更新。<br><code>v-bind</code> attribute 被称为指令。指令带有前缀<code> v-</code>，以表示它们是 Vue 提供的特殊 attribute。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>控制切换一个元素</p><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>指令可以绑定数组的数据来渲染一个项目列表</p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法,例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-on 绑定一个点击时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;findUser&quot;</span>&gt;</span> 反转message信息 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入CDN 文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app2&#x27;</span>,    <span class="comment">// el用来定义元素</span></span></span><br><span class="line"><span class="javascript">        data:&#123;      <span class="comment">// data用来定义数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;Hello Vue.js!&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        methods: &#123;   <span class="comment">//methods用来定义方法</span></span></span><br><span class="line"><span class="javascript">            findUser: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.message = <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。</p><h3 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h3><p>下图是官网提供的声明周期图示<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/lifecycle.png?versionId=CAEQGxiBgIDp_pyf2xciIGY1M2M2N2IxNGMzODRkMTlhMDJhNjQzNzBjOTlhZGVi"></p><h3 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入CDN 文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Vue的声明周期演示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// Vue对象创建的时候，需要传入一个对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 在实例初始化之后,数据观测(data observer) 和 event/watcher 事件配置之前调用</span></span></span><br><span class="line"><span class="javascript">        beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;beforeCreate&#x27;</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 在实例创建过程后立即被调用</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 在这一步,实例已完成以下配置，数据观测(data  observer) 属性和方法的运算, watch/event 事件回调</span></span></span><br><span class="line"><span class="javascript">        created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;created&#x27;</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 在挂在开始之前被调用,相关的渲染函数首次被调用</span></span></span><br><span class="line"><span class="javascript">        beforeMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;beforeMount&#x27;</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// el 被新建的vm.$el 替换 挂在成功</span></span></span><br><span class="line"><span class="javascript">        mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;mounted&#x27;</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 数据更新前调用</span></span></span><br><span class="line"><span class="javascript">        beforeUpdate:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;beforeUpdate&#x27;</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 组件Dom已经更新</span></span></span><br><span class="line"><span class="javascript">        updated :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;updated&#x27;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 3s之后把msg的属性值从hi vue 替换为change</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        vm.msg = <span class="string">&quot;chang..........&quot;</span>;</span></span><br><span class="line">    &#125;,3000)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>演示效果如下，可以看到控制台函数的一个打印顺序<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C.png?versionId=CAEQGxiBgMC4kKKf2xciIDBiMmVhMjc5OWUwMjRhYzE5OGU2ZDA4MDBkMTE2ODhh"></p><h2 id="vue组件"><a href="#VUE组件" class="headerlink" title="VUE组件"></a>VUE组件</h2><h3 id="組件是什么"><a href="#組件是什么" class="headerlink" title="組件是什么"></a>組件是什么</h3><p>允许我们使用小型、独立和通常可复用的组件构建大型应用,在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例<br>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。为了能在模板中使用，这些组件必须先注册以便 <code>Vue</code> 能够识别。这里有两种组件的注册类型：<code>全局注册</code>和<code>局部注册</code>。至此，我们的组件都只是通过<br><code>Vue.component</code>全局注册的：全局注册的组件可以用在其被注册之后的任何 (通过 new Vue) 新创建的 Vue 根实例，也包括其组件树中的所有子组件的模板中。组织结构图如下：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/3%E7%B5%84%E4%BB%B6%E7%9A%84%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84%E5%9B%BE.png?versionId=CAEQGxiBgMCXrMib2xciIDM2NWMwMmYwMWY2YjQyMmI5ZTJlM2Y3YTZiNjc3ODM0"></p><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p><code>Vue.component</code> :组件固定格式：包含两个参数，参数一：组件的名称,该值必须唯一。参数二：组建的对象。里面可以包含方法、数据<br><code>template</code> : 组件里面需要有一个模板，这个参数表示组件的模板。需要复用的html模板<br><code>props</code> : 可选操作,Prop 是你可以在组件上注册的一些自定义 attribute。当一个值传递给一个 <code>prop attribute</code> 的时候，它就变成了那个组件实例的一个 <code>property</code> 一个组件默认可以拥有<code>任意数量</code>的 prop，任何值都可以传递给任何 prop</p><p>组件之间也可以互相包含,模板如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;my-component-name&#x27;, &#123;</span><br><span class="line">  // ... options ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="基本demo"><a href="#基本Demo" class="headerlink" title="基本Demo"></a>基本Demo</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入CDN 文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;ul&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;todo-item v-for=&quot; item in list &quot;  :title=&quot;item.title&quot;  :del_flag=&quot;item.del_flag&quot;&gt;&lt;/todo-item&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/ul&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// todo-itme:表示组件的名称</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#123;&#125;表示组件的对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// template 表示组件的模板</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo-item&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 为了进行复用，模板中定义两个变量。定义一个title 和一个del_flag,并通过props 进行属性传播</span></span></span><br><span class="line">        props:&#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 定义属性名称：属性类型</span></span></span><br><span class="line"><span class="javascript">            title: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 定义一个del_flag属性，并设置为Boolean 默认值为false</span></span></span><br><span class="line">            del_flag:&#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 注意：组件模板必须包含一个根元素，否则控制台会报错</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:&#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">iv</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;!del_flag&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>\n&#x27; +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            &#x27;            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: line-through;&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>\n&#x27; +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            &#x27;            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;!del_flag&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27; ,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义data类型返回数据的时候，最好使用一个自定义函数进行返回</span></span></span><br><span class="line"><span class="javascript">        data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo-list&#x27;</span>,&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 组件包含组件的</span></span></span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27; &lt;ul&gt;\n&#x27;</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">            &#x27;        <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">&quot; item in list &quot;</span>  <span class="attr">:title</span>=<span class="string">&quot;item.title&quot;</span>  <span class="attr">:del_flag</span>=<span class="string">&quot;item.del_flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span>\n&#x27; +</span></span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;    &lt;/ul&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                list: [&#123;</span><br><span class="line"><span class="javascript">                    title: <span class="string">&#x27;标题1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    del_flag: <span class="literal">false</span></span></span><br><span class="line">                &#125;,&#123;</span><br><span class="line"><span class="javascript">                    title: <span class="string">&#x27;标题2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    del_flag: <span class="literal">true</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建一个Vue的实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       <span class="comment">// el 元素标签，绑定一个div</span></span></span><br><span class="line"><span class="javascript">       el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;这是一个Vue的组件demo&#x27;</span>,</span></span><br><span class="line">            list: [&#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;标题1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                del_flag: <span class="literal">false</span></span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;标题2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                del_flag: <span class="literal">true</span></span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="练习2多元素属性"><a href="#练习2：多元素属性" class="headerlink" title="练习2：多元素属性"></a>练习2：多元素属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入CDN 文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里传入了多个元素,假设有10个元素的话，一个个的书写就很麻烦，组件对象中编写的时候，也需要定义属性的名称和类别 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">&quot; item in list &quot;</span>  <span class="attr">v-bind:title</span>=<span class="string">&quot;item.title&quot;</span>  <span class="attr">v-bind:del_flag</span>=<span class="string">&quot;item.del_flag&quot;</span>  <span class="attr">v-bind:content</span>=<span class="string">&quot;item.content&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// todo-itme:表示组件的名称</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#123;&#125;表示组件的对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// template 表示组件的模板</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo-item&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 为了进行复用,如果变量有很多的时候,可知直接传入一个变量,取名叫做item</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// props:[&#x27;item&#x27;],</span></span></span><br><span class="line">        props:&#123;</span><br><span class="line"><span class="javascript">            title: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            del_flag: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">            content: <span class="built_in">String</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 注意：组件模板必须包含一个根元素，否则控制台会报错</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:&#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">iv</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;!del_flag&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>\n&#x27; +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            &#x27;            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: line-through;&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>\n&#x27; +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            &#x27;            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;!del_flag&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">content</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27; ,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义data类型返回数据的时候，最好使用一个自定义函数进行返回</span></span></span><br><span class="line"><span class="javascript">        data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 创建一个Vue的实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// el 元素标签，绑定一个div</span></span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;这是一个Vue的组件demo&#x27;</span>,</span></span><br><span class="line">            list: [&#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;标题1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                del_flag: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                content: <span class="string">&quot;测试对象绑定1&quot;</span></span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;标题2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                del_flag: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                content: <span class="string">&quot;测试对象绑定2&quot;</span></span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="练习3-组件对象传入"><a href="#练习3-组件对象传入" class="headerlink" title="练习3 组件对象传入"></a>练习3 组件对象传入</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 引入CDN 文件--&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; message&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;todo-item v-<span class="keyword">for</span>=<span class="string">&quot; item in list &quot;</span>  v-bind:item=<span class="string">&quot;item&quot;</span></span><br><span class="line">            &gt;&lt;/todo-item&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// todo-itme:表示组件的名称</span></span><br><span class="line">    <span class="comment">// &#123;&#125;表示组件的对象</span></span><br><span class="line">    <span class="comment">// template 表示组件的模板</span></span><br><span class="line">    Vue.component(<span class="string">&#x27;todo-item&#x27;</span>,&#123;</span><br><span class="line">        <span class="comment">// 为了进行复用,如果变量有很多的时候,可知直接传入一个变量,取名叫做item</span></span><br><span class="line">        props:[<span class="string">&#x27;item&#x27;</span>],</span><br><span class="line">        <span class="comment">// 注意：组件模板必须包含一个根元素，否则控制台会报错</span></span><br><span class="line">        template:<span class="string">&#x27;&lt;div&gt;&lt;/iv&gt; &lt;span v-if=&quot;!item.del_flag&quot;&gt;&#123;&#123;item.title &#125;&#125;&lt;/span&gt;\n&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;            &lt;span v-else style=&quot;text-decoration: line-through;&quot;&gt;&#123;&#123;item.title &#125;&#125;&lt;/span&gt;\n&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;            &lt;button v-show=&quot;!item.del_flag&quot;&gt;删除&lt;/button&gt;&lt;p&gt;&#123;&#123;item.content&#125;&#125;&lt;/p&gt;&lt;/div&gt;&#x27;</span> ,</span><br><span class="line">        <span class="comment">// 定义data类型返回数据的时候，最好使用一个自定义函数进行返回</span></span><br><span class="line">        data: function () &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 创建一个Vue的实例</span></span><br><span class="line">    let vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        <span class="comment">// el 元素标签，绑定一个div</span></span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;这是一个Vue的组件demo&#x27;</span>,</span><br><span class="line">            list: [&#123;</span><br><span class="line">                title: <span class="string">&#x27;标题1&#x27;</span>,</span><br><span class="line">                del_flag: <span class="keyword">false</span>,</span><br><span class="line">                content: <span class="string">&quot;测试对象绑定1&quot;</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                title: <span class="string">&#x27;标题2&#x27;</span>,</span><br><span class="line">                del_flag: <span class="keyword">true</span>,</span><br><span class="line">                content: <span class="string">&quot;测试对象绑定2&quot;</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h4><ul><li>组件模板需要有,组件模板必须包含一个根元素，否则控制台会报错.Vue 会显示一个错误，并解释道 <code>every component must have a single root element</code> (每个组件必须只有一个根元素)。你可以将模板的内容包裹在一个父元素内，来修复这个问题</li><li>组件之间可以相互包含</li><li>定义data类型返回数据的时候，最好使用一个自定义函数进行返回,增加复用性</li><li>组件定义后之后，在使用的地方，可以直接编写组件的标签进行使用 <todo-list></todo-list></li><li>练习2 和练习3 根据参数的传入方式不一样。属性<code>props</code> 和模板<code>template</code> 接收参数的格式也不一样</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue的简单使用一&quot;&gt;&lt;a href=&quot;#Vue的简单使用一&quot; class=&quot;headerlink&quot; title=&quot;Vue的简单使用一&quot;&gt;&lt;/a&gt;Vue的简单使用一&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="前端框架" scheme="https://lswisdom.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>HashMap简单讲解</title>
    <link href="https://lswisdom.github.io/posts/221454777/"/>
    <id>https://lswisdom.github.io/posts/221454777/</id>
    <published>2021-08-17T16:09:14.000Z</published>
    <updated>2021-08-22T23:53:21.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jdk17-hashmap"><a href="#JDK1-7-HashMap" class="headerlink" title="JDK1.7 HashMap"></a>JDK1.7 HashMap</h1><h1 id="jdk18-hashmap"><a href="#JDK1-8-HashMap" class="headerlink" title="JDK1.8 HashMap"></a>JDK1.8 HashMap</h1><h2 id="基本信息描述"><a href="#基本信息描述" class="headerlink" title="基本信息描述"></a>基本信息描述</h2><p>JDK1.7采用 <code>数组+链表</code> 的数据结构<br>JDK1.8的HashMap采用 <code>数组+链表+红黑树</code> 的数据结构。新增加红黑树的操作,是为了解决某些情况下,链表过长导致的查询效率问题。链表查询数据的时间复杂度为O(n),红黑树的时间复杂度为Olog(n).当数据量多的时候,红黑树的查询效率明显高于链表<br>数据结构如下：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E8%BD%AC%E6%8D%A2%E5%90%8E%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91%E7%BB%93%E6%9E%84.png?versionId=CAEQGxiBgIC2.fqw2hciIGI4M2M2ZTIzOTYzYTQ3ZjI4YzY5YjBhNzBjOGNhNDU5" alt="JDK1.8HashMap数据结构"></p><h2 id="基本字段属性"><a href="#基本字段属性" class="headerlink" title="基本字段属性"></a>基本字段属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合默认的容量是16,大小必须是2的幂次方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合的最大容量。初始化或者扩容时,防止溢出,必须是2次幂 &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数中未指定负载因子时,使用该值,默认是0.75,不建议修改,该值经过大量计算得出.遵循泊松分布</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶的树化阈值  当链表长度&gt;=8 时,将链表转换成红黑树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树还原回链表的阈值。当红黑树节点数量&lt;=6时,将红黑树转换为链表结构</span></span><br><span class="line"><span class="comment">     * 基于时间和空间的考虑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶树化的最小表容量： 当桶中的元素大于64时,且链表的容量&gt;=TREEIFY_THRESHOLD 时,才可以把链表转换为红黑树</span></span><br><span class="line"><span class="comment">     * 设置成64,是为了减少扩容的次数。当桶比较小的时候,桶中的元素达到一定的个数时,会频繁的扩容操作。浪费性能</span></span><br><span class="line"><span class="comment">     * 也是时间和空间的一种考虑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Fields -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一次使用时进行初始化操作。长度是2的幂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  缓存字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * table中元素的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hashmap改变的次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 库容的阈值,大小等于 =  (capacity * load factor).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负载因子,默认是0.75</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>   <code>TREEIFY_THRESHOLD=8</code> 和 <code>UNTREEIFY_THRESHOLD=6</code> 是链表转红黑树和红黑树退化成链表的阈值。因为桶中链表的数量在计算hash值的时候,遵循泊松分布。当链表的长度为8时的概率为 8:    0.00000006 而当链表的长度为6时的概率为 6:    0.00001316  概率差了1000多倍。为了避免频繁的树化和解除树化的操作</p><h2 id="桶中元素结构体"><a href="#桶中元素结构体" class="headerlink" title="桶中元素结构体"></a>桶中元素结构体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> hash; <span class="comment">// hash值</span></span><br><span class="line">     <span class="keyword">final</span> K key; <span class="comment">// key值</span></span><br><span class="line">     V value; <span class="comment">// 桶中元素的value值</span></span><br><span class="line">     Node&lt;K,V&gt; next;  <span class="comment">// 桶中下一个元素的指针</span></span><br><span class="line"></span><br><span class="line">     Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">         <span class="keyword">this</span>.hash = hash;</span><br><span class="line">         <span class="keyword">this</span>.key = key;</span><br><span class="line">         <span class="keyword">this</span>.value = value;</span><br><span class="line">         <span class="keyword">this</span>.next = next;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="链表树化结构体"><a href="#链表树化结构体" class="headerlink" title="链表树化结构体"></a>链表树化结构体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="keyword">boolean</span> red;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  initialCapacity 初始容量</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  loadFactor      负载因子</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative</span></span><br><span class="line"><span class="comment">  *         or the load factor is nonpositive</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                            initialCapacity);</span><br><span class="line">     <span class="comment">// 如果初始容量大于最大容量2^30,赋值为最大容量。防止溢出                                       </span></span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">         initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">     <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                            loadFactor);</span><br><span class="line">     <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">     <span class="comment">// threshold hashmap扩容阈值,注意这个值会发生变化,如果initialCapacity是2的幂,返回原值。如果不是2的幂,返回大于该值的最小的2的幂次方</span></span><br><span class="line">     <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 指定集合容量大小,默认负载因子是0.75</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用默认属性</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">     putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>注意：</code> 集合容量设置过小,会造成频繁的扩容操作。设置容量过大,会导致空间上浪费。如果我们确切的知道我们有多少键值对需要存储,那么我们在初始化HashMap的时候就应该指定它的容量,防止HashMap自动扩容,影响使用效率。 <code>initialCapacity = (需要存储的元素个数 / 负载因子) + 1</code></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="确定桶的位置"><a href="#确定桶的位置" class="headerlink" title="确定桶的位置"></a>确定桶的位置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tab[i = (n - <span class="number">1</span>) &amp; hash</span><br></pre></td></tr></table></figure><h3 id="hash方法"><a href="#hash方法" class="headerlink" title="hash方法"></a>hash方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算 key.hashCode() 并将散列的较高位（异或）传播到较低位。这个怎么理解呢?<br>这个哈希方法首先计算出key的hashCode,然后赋值给h,然后与h无符号右移16位后的二进制进行按位异或得到最后的hash值(hashCode()计算方法,得出的是一个int类型数,转换为二进制也就是32位)。hash值计算完成后,需要用来计算元素在桶中的位置,计算公式:<code>tab[i = (n - 1) &amp; hash</code> 如果当桶很小时,假设是默认的16的话,这样的值和hashCode()直接做按位与操作,实际上只使用了哈希值的后4位。如果当哈希值的高位变化很大,低位变化很小,这样就很容易造成哈希冲突了,所以这里把高低位都利用起来,从而解决了这个问题。<code>也是一种为了降低hash冲突的优化手段</code>。举个例子如下：</p><ul><li>&amp; (按位与运算) : 运算规则:相同的二进制数位上,都是1的时候,结果为1,否则为零。</li><li>^ (按位异或运算) :运算规则:相同的二进制数位上,数字相同,结果为0,不同为1.</li></ul><p>代码中通过这个hash &amp; (n-1) 得到存储元素的位置,假设这里的h = key.hashCode()得到的值为,分别进行桶中元素位置计算,看看新老hash算法差异<br>key1 = 0000 0000 0001 0000 1111 1111 0000 0000<br>key2 = 0000 1111 1111 1111 1111 1111 0000 0000   高位变化较大   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">使用h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span> 获取hash值</span><br><span class="line">key1的计算如下：</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>    h</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span>    h &gt;&gt;&gt; <span class="number">16</span></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0001</span> <span class="number">0000</span>   按位异或运算后得到的hash值  h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">此时数据长度n假设为默认的<span class="number">16</span>,那么这个key存放在table中位置为i = (n - <span class="number">1</span>) &amp; hash</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0001</span> <span class="number">0000</span>      hash</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算</span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>     索引位置为<span class="number">0</span></span><br><span class="line">key2的计算：</span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>    h</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    h &gt;&gt;&gt; <span class="number">16</span></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span>    按位异或运算后得到的hash值  h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span>    </span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>    索引位置是<span class="number">15</span></span><br><span class="line">  </span><br><span class="line">反例： (key.hashCode()) &amp; (n-<span class="number">1</span>)</span><br><span class="line">key1:</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>      hash值(重新获取一个hash值,直接进行按位与操作)</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>      索引位置为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">key2:</span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>      hash值  高位变化较大的hash值,低位保持不变</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算 </span><br><span class="line">---------------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>      索引位置为<span class="number">0</span></span><br></pre></td></tr></table></figure><p>由此可见,同样的两个hashcode,经过<code>移位和异或</code>操作后,能够使hashcode更加复杂,同时也把哈希值的高位移动到了低位,降低了hash冲突的概率。实际上hashMap的hash算法做的非常好,进过我的测试,默认负载因子为0.75的时候如果把hashmap加入4000w个数据的时候。依然没有链表转红黑树的操作,都是不断扩容的操作.有兴趣的朋友,可以自己测试一下hash算法的性能。</p><h3 id="扩容resize"><a href="#扩容resize" class="headerlink" title="扩容resize()"></a>扩容resize()</h3><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment">     * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment">     * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment">     * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment">     * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment">     * 初始化或者扩容表的长度为2倍</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        <span class="comment">// 旧表,第一次执行时,oldTabl为空</span></span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="comment">// 旧表的容量</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="comment">// 旧的扩容阈值</span></span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// oldCap大于0说明是对数组进行扩容操作</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果扩容前旧表的容量大于阈值,就设置为Integer的最大值</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;  <span class="comment">// 如果旧表的长度左移一位还小于表的最大容量,就扩容表的长度为旧表的一倍,域值也为原来的一倍</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            <span class="comment">// HashMap的构造方法中会对threshold进行初始化操作</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;   </span><br><span class="line">            <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            <span class="comment">// 初始化新容器的大小,必须是2的幂,默认是16。表刚创建的时候,会执行到这里</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            <span class="comment">// 默认的阈值是12 负载因子0.75* 默认的初始化容量16</span></span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新的阈值为0时,按照阈值公式计算阈值</span></span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新table表扩容时的的阈值</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        <span class="comment">// 用扩容后的容量创建新的数组然后返回数据</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="comment">// 如果是初始化数组,下面的部分不会执行,下面的部分涉及到数组中元素的移动</span></span><br><span class="line">        <span class="comment">// 扩容,进行数据迁移</span></span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 移动旧表的数据到新表中,移动的扩容中,需要重新的进行hash操作</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="comment">// 如果数组中只有一个元素,直接移动即可</span></span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        <span class="comment">// 如果是红黑树,需要对红黑树进行拆分</span></span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order  维持相对顺序</span></span><br><span class="line">                        <span class="comment">// 链表节点的处理  head是头节点  tail是尾部节点</span></span><br><span class="line">                        <span class="comment">// loHead是低位链表  hiHead是高位链表</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                         <span class="comment">// 获取当前节点的下一个节点,每一次循环e值会更新</span></span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="comment">// 遍历链表,将链表按照计算后的位置进行分组</span></span><br><span class="line">                            <span class="comment">// 没有再次hash的操作,而是按照扩容后新增加的那个bit是0还是1进行分组</span></span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                            </span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">// 分组完成后,将链表映射到桶中</span></span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 扩容后的链表的存储位置</span></span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回扩容后新表的长度</span></span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码流程介绍：<br>    1. 判断是初始化或者扩容操作,计算相应的新数组容量newCap 和 新的阈值大小newThr<br>    2. 初始化新的数组容量newCap<br>    3. 如果是扩容操作,还需要进行一个元素移动的操作。在移动的过程中,分为三种操作：<br>        3.1 如果原数组中只有一个元素,并且next指针为空,直接移动即可 newTab[e.hash &amp; (newCap - 1)] = e;<br>        3.2 如果原数组中的元素是树节点。需要将元素进行拆分,然后映射存储位置<br>        3.3 对于链表元素,需要将元素进行拆分。拆分为2个链表。可以理解为低位链表和高位链表,低位链表存储在扩容后的数组原来的位置,高位链表存储在扩容后数组原来的位置+旧数组容量的位置</p><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据key获取其所对应的value值</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">     Node&lt;K,V&gt; e;</span><br><span class="line">     <span class="comment">// 计算key值的hashcode。目的是为了通过(n - 1) &amp; hash 计算出当前key值在hash表中的位置</span></span><br><span class="line">     <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * HashMap根据key值和和key的HashCode值查找元素</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> hash 当前key的hash值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 当前key元素</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">     Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">     <span class="comment">// 如果数组中有元素同时根据hash值计算出当前key值所在的位置不为空</span></span><br><span class="line">     <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">         (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 检查数组中的元素。判断头结点是否就是需要获取的元素    </span></span><br><span class="line">         <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">             ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">             <span class="keyword">return</span> first;</span><br><span class="line">         <span class="comment">// 如果头节点中没有,从头结点的下一个节点开始查找    </span></span><br><span class="line">         <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">// 如果头节点是红黑树。则从红黑树中查找</span></span><br><span class="line">             <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                 <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">             <span class="keyword">do</span> &#123;</span><br><span class="line">                 <span class="comment">// 如果下一个节点不是红黑树。就只能是链表节点。在链表节点中查找元素</span></span><br><span class="line">                 <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                     ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                     <span class="keyword">return</span> e;</span><br><span class="line">             &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>get方法整体上比较简单,就是根据key的hash值,查找元素在数组的位置,找到之后判断是链表还是红黑树。如果是红黑树,就从红黑树的节点中去寻找。如果是链表节点,就遍历链表去查找相应的key所对应的value的值</p><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><p>put方法相对复杂一些,其实也还好,如果熟悉红黑树这种数据结构的话,看起来也不是很复杂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过高16位和低16位的异或运算的到一个hash值</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真正的添加元素方法。尾插法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value  是否进行元素的替换,用于插入相同key的时候,是否替换值,默认值为false,替换相应的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// hashmap的table表的初始化操作,是在这里进行的。第一次执行的时候,会先在这里进行初始化操作</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过hash值和数组长度进行按位与运算,得到元素的存储位置,如果table表的位置为空,就直接新建一个Node节点进行存储操作    </span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// key映射的数组桶位置有元素,也就是产生了hash碰撞(hashmap采用链地址法解决hash冲突。),走下述代码</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在该位置的第一个数据的key值和插入的元素的key值相等。需要进行下面的if (!onlyIfAbsent || oldValue == null) 的替换操作</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 如果桶中的元素是红黑树节点。就在红黑树中新插入节点,插入完成后,然后调整红黑树 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在链表中插入节点。这里先对链表进行遍历操作</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">//  遍历链表时,取下一个位置存放新增的元素,这里采用的是尾插法(链表中不包含要插入键值对节点)</span></span><br><span class="line">                <span class="comment">//  a.横竖都要遍历链表的长度是否大于树化的阈值,所以遍历的过程中,就直接插入元素了</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//如果链表的长度大于8个时,就进行链表转红黑树的操作</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果在链表中找到了相同的key值。直接break操作。那么e节点此时就是与链表要插入的新值key相同的Node节点</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  key值存在,就替换value值。新插入的元素的value值,替换原来这个key的value值,注意onlyIfAbsent 这个值</span></span><br><span class="line">        <span class="comment">//  这个值表示是否仅在oldValue==null 的时候,更新键值对的值。key相同会进行值覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 增加修改次数</span></span><br><span class="line">    ++modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果hashmap中元素的值超过了阈值,就会进行扩容操作</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>put方法小结：<br>1.当桶中的元素为空值,通过扩容的方式进行初始化table<br>2.对key进行hash运算。得到需要存储在桶中的位置。如果桶中位置为空,直接在桶中放入元素即可。<br>3.如果桶中的元素不为空。需要先查找插入的key值,是否已经存在,如果已经存在,则需要使用新值替换旧值,<br>4.如果不存在,则将新插入的key值插入在链表的尾部或者红黑树中。其中插入到链表尾部的过程中还会判断链表的长度是否大于树化的阈值。如果大于阈值,就会进行链表转红黑树的操作<br>5.最后判断数组中的数量是否大于扩容阈值,如果大于,会进行数组的扩容操作</p><p>转换后的形态,可能如下图所示,我主要为了展示大体的数据结构,不要纠结于元素的值<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/Jdk1.8%E6%9C%AA%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%BA%A2%E9%BB%91%E6%A0%91%E4%B9%8B%E5%89%8D%E7%9A%84%E5%BD%A2%E6%80%81.png?versionId=CAEQGxiBgMDP.fqw2hciIDQzYmNkYTQzZTNhMDQ4MmZhZDQyNjI1ZjZjYjJiOGRm"></p><h3 id="链表树化"><a href="#链表树化" class="headerlink" title="链表树化"></a>链表树化</h3><p>JDK1.8 对hashmap进行了改进。采用的数组+链表+红黑树的存储结构。链表转红黑树的操作,主要是为了防止由于hashcode算法性能不佳等原因,造成链表长度过长,查询缓慢的问题,我们元素多的情况下,红黑树是指数级的时间复杂度,在性能上远高于链表的时间复杂度。虽然会有一些额外的空间的消耗,但是时间上能大幅度提升。下面我将介绍 <code>链表树化</code> 、<code>红黑树自平衡</code>、<code>红黑树的基本性质</code></p><h4 id="node转红黑树节点treeifybin"><a href="#Node转红黑树节点TreeifyBin" class="headerlink" title="Node转红黑树节点TreeifyBin()"></a>Node转红黑树节点TreeifyBin()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment"> * table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment"> 替换指定哈希表的索引桶中所有的连接节点,除非表太小,否则将修改大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     *    如果元素数组为空 或者 数组长度小于 树结构化的最小阈值（MIN_TREEIFY_CAPACITY=64） ,就进行扩容操作.对于这个值可以理解为：如果元素数组长度小于这个值,没有必要去进行结构转换.目的是</span></span><br><span class="line"><span class="comment">     *  如果数组很小,那么转红黑树,遍历效率要低一些,这时进行扩容操作,重新计算哈希值,链表的长度有可能就变短了。数据会放入到数组中,这样相对来说效率会高一些</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">        <span class="comment">//如果元素数组长度已经大于等于了 MIN_TREEIFY_CAPACITY,那么就有必要进行结构转换了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出数组对应位置的头节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//定义几个变量,hd(head)代表头节点,tl代表尾节点(tail) 算法中常用变量</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="comment">//先把普通Node节点转成TreeNode类型,并赋值给p</span></span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//用新生成的双向链表替代旧的单向链表,其实就是把这个数组对应的位置重新赋值成新双向链表的首节点  hd是index对应的桶的首节点</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For treeifyBin</span></span><br><span class="line"><span class="function">TreeNode&lt;K,V&gt; <span class="title">replacementTreeNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>treeifyBin()方法总结</p><ul><li>链表转红黑树的条件：<ul><li>链表长度大于等于树化阈值 <code>TREEIFY_THRESHOLD = 8</code></li><li>数组长度大于等于<code>MIN_TREEIFY_CAPACITY=64 </code></li></ul></li><li>方法执行步骤：<ul><li>如果元素数组长度已经大于等于了 MIN_TREEIFY_CAPACITY,就进行结构转换,具体为Node转换为TreeNode节点。否则进行扩容操作</li><li>TreeNode节点间接继承自Node节点,所以TreeNode节点包含next引用。原链表顺序最终通过next引用被保存下来</li><li>最后一行,调用<code>treeify</code> 将链表转换为红黑树<br>转换后的元素结构,可能是这么一种形态<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/TreeifBean%E5%90%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png?versionId=CAEQGxiBgIDozMO02xciIDY0ZTNhMzM3NDgyZTRmNDdiY2JjMmNiYzc3ODAxOWI3"></li></ul></li></ul><h4 id="treenode转红黑树treeify"><a href="#TreeNode转红黑树treeify" class="headerlink" title="TreeNode转红黑树treeify()"></a>TreeNode转红黑树treeify()</h4><p>下面就是链表转红黑树的核心逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将树形链表转换为红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义树的根节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//  遍历链表,x指向当前节点、next指向下一个节点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">        <span class="comment">// 记录x的下一个节点</span></span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">        x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果根节点为空,则把当前节点当做根节点。根据红黑树性质,根节点一定为黑色。</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.parent = <span class="keyword">null</span>;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            root = x;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根节点已经存在的情况</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 取得当前遍历的树形节点的 key 和 hash</span></span><br><span class="line">            K k = x.key;</span><br><span class="line">            <span class="keyword">int</span> h = x.hash;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO : 循环开始位置</span></span><br><span class="line">            <span class="comment">// 从根节点遍历。这一步主要就是为了判断当前节点应该在树的左侧还是右侧,为节点x找到空位置并插入元素</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="comment">// dir代表方向(左边或者右边)  ph表示树节点的hash值。</span></span><br><span class="line">                <span class="keyword">int</span> dir, ph;  </span><br><span class="line">                K pk = p.key;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 比较hash值大小,判断当前节点插入到左边还是右边,并记录dir的值</span></span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h) </span><br><span class="line">                    dir = -<span class="number">1</span>;  </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 根据比较器判断大小     Comparable 接⼝判断</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    <span class="comment">// 通过key的类名比较    </span></span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 保存当前遍历的树节点,就是x节点要插入的位置的父节点</span></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="comment">// 判断如果dir&lt;=0 说明当前节点的hash值小于当前树节点的hash值。需要把当前节点放置在当前树节点的左侧</span></span><br><span class="line">                <span class="comment">// 判断如果dir&gt;0 说明当前节点的hash值大于当前树节点的hash值。 需要把当前节点放置在当前树节点的右侧</span></span><br><span class="line">                <span class="comment">// p的左右节点存在不为空的情况,p节点就是当前遍历的树节点,说明该节点还有子节点。继续循环查找当前节点x的应该在哪个爸爸节点下面插入元素</span></span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// x 节点找到了父节点,并将x节点放入到父节点下面</span></span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    <span class="comment">// 元素插入之后,需要进行红黑树的自平衡操作,重新确定根节点的值</span></span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保根节点作为第一个节点</span></span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>treeify() 方法执行小结：</p><ul><li>遍历第⼀个节点时,此时红⿊树不存在,以第⼀个节点作为红⿊树根节点,并转换为黑节点</li><li>有了红⿊树后,此后遍历双链表的每个节点时,都要根据红黑树性质从根节点开始寻找要插⼊当前节点的位置,也就是找到⼀个⽗节点,将当前节点作为其左节点或右节点。</li><li>插⼊节点后,可能会导致红⿊树特性被破坏,因此每次插⼊节点后要尝试重新调整红⿊树</li><li>红黑树调整完成后,要确保根节点就是table桶中的第一个节点</li></ul><h4 id="红黑树的自平衡"><a href="#红黑树的自平衡" class="headerlink" title="红黑树的自平衡"></a>红黑树的自平衡</h4><p>下面我将介绍红黑树的<code>自平衡操作</code> 这部分代码纯粹就是红黑树的操作了,根hashmap没有多个的关系,有一定数据结构基础的同学,看起来应该没什么难度,对于不了解红黑树的同学,我将在下面代码的下面讲解红黑树的基本操作,帮助你理解如下代码。或者你可以看看我的另一篇文章《红黑树的简单介绍》 </p><pre><code> * 红黑树插入节点后,需要进行平衡操作 *       情景1： 红黑树为空树时,将根节点染成黑色 *       情景2： 插入的节点在红黑树已经存在,不需要处理 *       情景3： 插入节点的父节点为黑色,因为所插入的路径,黑色节点没有发生变化,所以红黑树依然平衡,所以不需要处理 *       情景4： 插入节点的父节点为红色 *              情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点) 根据红黑树性质4.红色节点不能直接相连,由此可知必然存在爷爷节点,且爷爷节点必定为黑节点 *                          由此可以 a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理 *              情景4.2  叔叔节点不存在或者为黑色节点,父节点为爷爷节点的左子树 *                      情景4.2.1 插入节点为其父节点的左子节点(LL情况) a.将爸爸节点染成黑色 b.将爷爷染成红色 c.然后以爷爷节点进行右旋操作 *                      情景4.2.2 插入节点为其父节点的右子节点(LR情况) a.已爸爸为节点进行一次左旋操作,得到(LL双红的情况 4.2.1) 然后指定爸爸节点为当前节点,执行下一轮的操作 *              情景4.3  叔叔节点不存在,或者为黑色节点,父节点为爷爷节点的右子树 *                      情景4.3.1 插入节点为其父节点的右子节点(RR情况) a.将爸爸染成黑色节点  b.将爷爷染成红色 c.然后以爷爷节点进行左旋操作 *                      情景4.3.2 插入节点为其父节点的左子节点(RL情况) a.以爸爸节点进行一次右旋,得到RR双红的场景( RR情况 4.3.1).然后指定爸爸节点为当前节点,进行下一轮的操作</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认插入节点为红色</span></span><br><span class="line">    x.red = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// xp为父节点  xpp：为爷爷节点   xxpl是爷爷的左节点(左叔叔节点)  xppr：是爷爷节点的右节点(右叔叔节点)</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情景1:当前节点的父节点不存在,当前节点就是根节点,根据红黑色性质,根节点为黑色,直接变色就可以了</span></span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情景2 和情景3：插入节点的父节点为黑色,因为所插入的路径,黑色节点没有发生变化,所以红黑树依然平衡,所以不需要处理。 爷节为空,说明x节点的父节点为根节点,可以直接插入节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情景4：如果父节点为红色,同时是父节点是爷爷节点的左节点,这样就遇到了两个红色节点相连的情况,需要进行处理。根据上述公式分为两种情况</span></span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">            <span class="comment">//  如果爷爷节点的右节点不为空,同时是红节点(也就是右叔叔节点不为空,且为红色.父叔双红)</span></span><br><span class="line">            <span class="comment">//  情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点)  a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line">            <span class="comment">//  因为有小伙伴有疑问：这个下一轮处理就是指(xpp节点变成红色后,可能会和xpp节点的父节点发生冲突,也就是两个连续的红色节点,所以需要继续处理) </span></span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  情景4.2  叔叔节点不存在或者为黑色节点,父节点为爷爷节点的左子树。分为两种情况</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">// 这些变化操作,你画画图就明白了,单纯的看比较抽象</span></span><br><span class="line">                 <span class="comment">// 情景4.2.2 插入节点为其父节点的右子节点(LR双红情况) a.以爸爸为节点进行一次左旋操作,得到(LL双红的情况 4.2.1) 然后指定爸爸节点为当前节点,执行下一轮的操作</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                    root = rotateLeft(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 情景4.2.1 插入节点为其父节点的左子节点(LL情况) a.将爸爸节点染成黑色 b.将爷爷染成红色 c.然后以爷爷节点进行右旋操作</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点) 此时爸爸节点为爷爷节点的右节点和上述情况相反</span></span><br><span class="line">            <span class="comment">// a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理(xpp节点变成红色后,可能会和xpp节点的父节点发生冲突,也就是两个连续的红色节点,所以需要继续处理)</span></span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果爷爷节点的左节点是黑色或者为空(左叔叔节点) 。那么可能有两种情况：</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 情景4.3.2 插入节点为其父节点的左子节点(RL情况)  a.以爸爸节点进行一次右旋,得到RR双红的场景( RR情况 4.3.1).然后指定爸爸节点为当前节点,进行下一轮的操作</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    <span class="comment">// 平衡过后,重新定义爷爷节点的变量值</span></span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 情景4.3.1 插入节点为其父节点的右子节点(RR情况) a.将爸爸染成黑色节点  b.将爷爷染成红色 c.然后以爷爷节点进行左旋操作</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123; </span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>纯粹就是红黑树的操作了,这没什么可说的。红黑树需要考虑的场景,我已经在方法上面标注过了,并在代码中给了提示,相信各位同学能很清楚的看明白</p><h4 id="红黑树的左旋"><a href="#红黑树的左旋" class="headerlink" title="红黑树的左旋"></a>红黑树的左旋</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line"><span class="comment">// Red-black tree methods, all adapted from CLR</span></span><br><span class="line"><span class="comment">// 红黑树的左旋的过程</span></span><br><span class="line"><span class="comment">// 1 将节点 p 旋转为其右节点的左节点,即将节点 p 挂到其右节点的左边</span></span><br><span class="line"><span class="comment">// 2 其右节点的左节点成为节点p 的右节点</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// r -&gt;  节点 p 的右节点</span></span><br><span class="line">    <span class="comment">// rl -&gt; 节点 p 的右节点的左节点</span></span><br><span class="line">    <span class="comment">// pp -&gt; 节点 p 的⽗节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// p 不为空且右节点不为空</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 1 将 p 的右节点的左节点挂到 p 的右节点,这有两个信息</span></span><br><span class="line">        <span class="comment">// a. 断开 p 与其右节点 r 的连接</span></span><br><span class="line">        <span class="comment">// b. 因为 p 要挂到其右节点 r 的左边,因此要把节点 r 原来的左节点挂到 p 的右边</span></span><br><span class="line">        <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// r 节点的左节点的⽗节点重置为 p</span></span><br><span class="line">            rl.parent = p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 将 p 的⽗节点设置为 p 的右节点的⽗节点</span></span><br><span class="line">        <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">             <span class="comment">// 如果 p 为 root 节点,那么直接将其右节点设置为 root</span></span><br><span class="line">            (root = r).red = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3 确定 r 节点应该挂在 p 的⽗节点的左边还是右边。这个根据 p 的位置决定。原来在左边,现在就还在左边</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">            pp.left = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = r;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4 将 p 设置为其右节点的左边</span></span><br><span class="line">        </span><br><span class="line">        r.left = p;</span><br><span class="line">        <span class="comment">// 5 将 p 的右节点指为其⽗节点</span></span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回根节点</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单独看上面的左旋方法,可能很抽象,根据节点名称,我画了一个草图帮助你们理解,这个图我已经画的很详细了</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%B7%A6%E6%97%8B%E4%BB%A3%E7%A0%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png?versionId=CAEQGxiBgMDjvPS22xciIGZkMTE0MTNiYzg2ZjQ4OTRhNmIxZDM5ZWZiNTEzZGM0"></p><h4 id="红黑树的右旋"><a href="#红黑树的右旋" class="headerlink" title="红黑树的右旋"></a>红黑树的右旋</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 红黑树右旋：</span></span><br><span class="line"><span class="comment">* 1 将节点 p 旋转为其左节点的右节点,即将节点 p 挂到其左节点的右边</span></span><br><span class="line"><span class="comment">* 2 其左节点的右节点成为节点 p 的左节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  l -&gt; 节点 P 的左节点</span></span><br><span class="line">    <span class="comment">// pp -&gt; 节点 p 的⽗节点</span></span><br><span class="line">    <span class="comment">// lr -&gt; 节点 p 的左节点的右孩⼦</span></span><br><span class="line">    TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 节点 p 和 其左节点不为空</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 将 p 的左节点的右孩⼦挂到 p 的左边</span></span><br><span class="line">        <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 p 指定为 lr 的⽗节点</span></span><br><span class="line">            lr.parent = p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  2 将 p 的⽗节点指定为其右节点的⽗节点     </span></span><br><span class="line">        <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">// 将l节点设置为root节点,并调整为黑色.</span></span><br><span class="line">            (root = l).red = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1 确定 p 的右节点应该挂在 p的⽗节点左边还是右边.这个根据 p 的位置决定。原来在左边,现在就还在左边</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">            pp.right = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.left = l;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 p 设置为其左节点的右孩⼦    </span></span><br><span class="line">        l.right = p;</span><br><span class="line">        <span class="comment">// 将 p 的⽗节点指定为其左节点</span></span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回根节点</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了帮助理解,同样的,下面增加了红黑树的右旋代码示意图</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%8F%B3%E6%97%8B%E4%BB%A3%E7%A0%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png?versionId=CAEQGxiBgICkk5W32xciIDgwNjlhNzU3MzczMTRlOGZhNTMwMjUwYjkwNGRjMjk5"></p><h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h2><ul><li>红黑树性质<ul><li>性质1: 每个节点要么是黑色,要么是红色。</li><li>性质2: 根节点是黑色。</li><li>性质3: 每个叶子节点(NIL) 是黑色。</li><li>性质4: 每个红色节点的两个子节点一定都是黑色。</li><li>性质5: 任意节点到每个叶子节 点的路径都包含数量相同的黑结点。从性质5又可以推出:</li><li>性质5.1:如果一个节点存在黑子节点, 那么该结点肯定有两个子节点</li></ul></li></ul><h2 id="红黑树的场景"><a href="#红黑树的场景" class="headerlink" title="红黑树的场景"></a>红黑树的场景</h2><p>插入场景：</p><h3 id="情景1插入的节点为空树"><a href="#情景1：插入的节点为空树" class="headerlink" title="情景1：插入的节点为空树"></a>情景1：插入的节点为空树</h3><p>直接把插入的节点作为根节点就可以了,并且把根节点变成黑色,如下图所示：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%83%85%E6%99%AF1.png?versionId=CAEQGxiBgIDA6J632xciIDQ4ODk5ODc2NzBlMTQ2NTQ5MDRiMTJiYmM3YWZiOGY5"></p><h3 id="情景2插入节点的key已存在"><a href="#情景2：插入节点的Key已存在" class="headerlink" title="情景2：插入节点的Key已存在"></a>情景2：插入节点的Key已存在</h3><p>处理：更新当前节点的值,为插入节点的值</p><h3 id="情景3-插入结点的父结点为黑结点"><a href="#情景3-插入结点的父结点为黑结点" class="headerlink" title="情景3   插入结点的父结点为黑结点"></a>情景3   插入结点的父结点为黑结点</h3><p>由于插入的结点是红色的,并不会影响红黑树的平衡,直接插入即可,无需做自平衡。如图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E6%99%AF3.png?versionId=CAEQGxiBgIDXhJax2hciIDU4NTU3MTA5ODQ3OTRhMGQ4MDNmNmUxNWUyZTg1NWI3"></p><h3 id="情景4插入节点的父节点为红色"><a href="#情景4：插入节点的父节点为红色" class="headerlink" title="情景4：插入节点的父节点为红色"></a>情景4：插入节点的父节点为红色</h3><p>红黑树的性质2:  根结点是黑色,如果插入节点的父结点为红结点,那么该父结点不可能为根结点,所以插入结点总是存在祖父结点。</p><p>分为两种情况,如下图所示</p><ul><li>一种是爸爸节点为红色,叔叔节点也是红色</li><li>一种是爸爸节点为红色,叔叔节点为黑色或者不存在</li></ul><h4 id="情景41"><a href="#情景4-1" class="headerlink" title="情景4.1"></a>情景4.1</h4><p><strong>叔叔结点存在并且为红结点</strong></p><p>依据红黑树<strong>性质4</strong> 可知,红色节点不能相连==&gt;祖父结点肯定为黑结点。因为<code>不可以同时存在两个相连的红结点</code>。那么此时该插入子树的红黑层数的情况是<code>黑红红</code>。显然最简单的处理方式是把其改为<code>红黑红</code><br>处理:</p><ul><li>1  将爸爸节点(P)和叔叔节点(U)节点改为黑色</li><li>2  将爷爷PP改为红色</li><li>3  将爷爷PP设置为当前节点,进行后续处理.注意但需要注意的是 PP 变为红⾊后,可能会和它的⽗节点形成连续的红⾊节点,此时需要递归向上调整,也就将 PP 看作新插⼊节点继续尝试调整。</li></ul><p>如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E6%99%AF4.1%E5%8F%98%E6%8D%A2%E5%89%8D%E5%90%8E.png?versionId=CAEQGxiBgMDXhJax2hciIGJlMzQyNmM3YWQ4NzQ1Mzc4M2EyMTAzYzU2MzAwNDgz"></p><p>可以看到,我们把PP结点设为红色了,如果PP的父结点是黑色,那么无需再做任何处理;但如果PP的父结点是红色,则违反了红黑树的性质.所以需要将PP设置为当前节点,继续做插入操作自平衡处理,真到平衡为为止.</p><h4 id="插入情景42"><a href="#插入情景4-2" class="headerlink" title="插入情景4.2"></a>插入情景4.2</h4><p><strong>叔叔结点不存在或为黑结点,并且插入结点的父亲结点是祖父结点的左子结点</strong></p><p>注意:单纯从插入前来看,叔叔节点非红即空(NIL节点) ,否则的话破坏了红黑树性质5,此路径会比其它路径多一个黑色节点。</p><p>新插入节点,可能为P节点的左子节点,也可能是P节点的右子节点,所以分为两种情况分别处理</p><h5 id="ll红色情况"><a href="#LL红色情况" class="headerlink" title="LL红色情况"></a>LL红色情况</h5><p><strong>4.2.1 新插入节点,为其父节点的左子节点</strong><br>处理:</p><ol><li>将P设置 为黑色,将PP设置为红色 ,然后以爷爷节点为当前节点</li><li>对PP节点进行右旋</li></ol><p>处理结果如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/LL%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86.png?versionId=CAEQGxiCgICihpax2hciIDViZDcwNjZiZTYyODQ0ZmM5MmZlNTRiZDNjYThhMzVk"></p><h5 id="lr红色情况"><a href="#LR红色情况" class="headerlink" title="LR红色情况"></a>LR红色情况</h5><p><strong>4.2.2 新插入节点,为其父节点的右子节点(LR红色情况)</strong><br>处理:</p><ul><li>对P进行左旋  </li><li>将P设置为当前节点,得到LL红色情况 </li><li>按照LL红色情况处理(1.变颜色2.右旋PP)</li></ul><p>操作过程如下图所示：</p><p>第一步</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/LR%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86%E7%AC%AC%E4%B8%80%E6%AD%A5.png?versionId=CAEQGxiBgMCl1I242xciIGZhMWY2ZWIyZTNiYjRhMDU4ZTlkOTQ0MDc0OTllYzI2"></p><p>第二步<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/LR%E5%A4%84%E7%90%861.png?versionId=CAEQGxiBgMCixc252xciIDJkYmFjM2MzNzlkODQ4NTlhZmIzZDdmNmI1MzlmZDg2"></p><h4 id="情况43"><a href="#情况4-3" class="headerlink" title="情况4.3"></a>情况4.3</h4><p><strong>叔叔结点不存在或为黑结点,并且插入结点的父亲结点是祖父结点的右子结点</strong> 和上述操作4.2 相反图,如下所示：</p><h5 id="rr红色情况"><a href="#RR红色情况" class="headerlink" title="RR红色情况"></a>RR红色情况</h5><p><strong>4.3.1新插入节点,为其父节点的右子节点(RR红色情况)</strong></p><p>处理操作：</p><ol><li>将P设置为黑色,将PP设置为红色</li><li>对PP节点进行左旋 </li></ol><p>旋转过程如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.3.1RR%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86.png?versionId=CAEQGxiBgMCmhpax2hciIGJiNGJjNTZkMmRjNDRlZWE4ODY2ZWI0Njc1OTYxMjE5"></p><h5 id="rl红色情况"><a href="#RL红色情况" class="headerlink" title="RL红色情况"></a>RL红色情况</h5><p><strong>4.3.2 新插入节点,为其父节点的左子节点(RL红色情况)</strong></p><p>处理:<br>1.对P进行右旋<br>2.将P设置为当前节点,得到RR红色情况<br>3.按照RR红色情况处理(1.变颜色2.左旋PP)</p><p>第一步对P节点进行右旋操作   如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E5%86%B54.3.2%E7%AC%AC%E4%B8%80%E6%AD%A5.png?versionId=CAEQGxiCgIDngpax2hciIDViYTc2MTAxZTdmYTRmZDFiNjNiY2E3NjdlMzIwMTMx"></p><p>第二步：变色+旋转,如下图所示</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/RL%E6%83%85%E5%86%B5%E7%AC%AC2%E6%AD%A5.png?versionId=CAEQGxiBgID5u..52xciIGM0YTE1NjA5NTE0YjQ2ZGFhZTU5NjM1M2Y1MjcwZjlk"></p><h3 id="红黑树链化"><a href="#红黑树链化" class="headerlink" title="红黑树链化"></a>红黑树链化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a list of non-TreeNodes replacing those linked from</span></span><br><span class="line"><span class="comment">     * this node.</span></span><br><span class="line"><span class="comment">     * 红⿊树中仍然保留了原链表节点顺序。有个这个特点,再将红⿊树转成链表就简单多了,仅需将TreeNode 链表转成 Node 类型的链表即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">untreeify</span><span class="params">(HashMap&lt;K,V&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ⽤于组织链表的头、尾指针</span></span><br><span class="line">        Node&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历 TreeNode 链表,并⽤ Node 替换</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt; q = <span class="keyword">this</span>; q != <span class="keyword">null</span>; q = q.next) &#123;</span><br><span class="line">            Node&lt;K,V&gt; p = map.replacementNode(q, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tl.next = p;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For conversion from TreeNodes to plain nodes</span></span><br><span class="line"><span class="function">Node&lt;K,V&gt; <span class="title">replacementNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码链画的过程,相当简单,没什么可说的</p><h3 id="红黑树的拆分"><a href="#红黑树的拆分" class="headerlink" title="红黑树的拆分"></a>红黑树的拆分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Splits nodes in a tree bin into lower and upper tree bins,</span></span><br><span class="line"><span class="comment"> * or untreeifies if now too small. Called only from resize;</span></span><br><span class="line"><span class="comment"> * see above discussion about split bits and indices.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map the map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tab the table for recording bin heads</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index the index of the table being split</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bit the bit of hash to split on</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> bit)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; b = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">//  重新链接到 lo 和 hi 列表,保持顺序</span></span><br><span class="line">    TreeNode&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 红⿊树节点仍然保留了 next 引⽤,因此仍可以按链表⽅式遍历红⿊树。下⾯的循环是对红⿊树节点进⾏分组,与普通链表操作类似</span></span><br><span class="line"><span class="comment">      * 下面这个循环进行的事链表的分组曹组</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="keyword">null</span>; e = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">        e.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">            loTail = e;</span><br><span class="line">            ++lc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">            hiTail = e;</span><br><span class="line">            ++hc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (loHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 loHead 不为空,且链表⻓度⼩于等于 6,则将红⿊树转成链表</span></span><br><span class="line">        <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index] = loHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index] = loHead;</span><br><span class="line">            <span class="comment">// hiHead == null 时,表明扩容后,所有节点仍在原位置,树结构不变,⽆需重新树化,否则,将 TreeNode 链表重新树化</span></span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                loHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index + bit] = hiHead;</span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="keyword">null</span>)</span><br><span class="line">                hiHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>这段逻辑发生在数据扩容的时候,对于红黑树节点的处理。<br>红黑树的扩容逻辑和链表的扩容逻辑整体上类似。唯一不同的是,除了这段逻辑将红黑树分组后,会判断链表的长度,如果小于UNTREEIFY_THRESHOLD ,会进行红黑树转链表的操作。否则根据条件,将链表树化为红黑树</p><h2 id="问题答疑"><a href="#问题答疑：" class="headerlink" title="问题答疑："></a>问题答疑：</h2><h3 id="问题1"><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h3><p><strong>问题：为什么集合的初始容量必须是2的n次幂?如果输入值不是2的幂,比如17会怎么样?</strong></p><p>这样做是为了<code>减少</code>hash碰撞的次数, 2的n次方实际就是1后面n个0,2的n次方减1二进制表示时实际就是n个1</p><blockquote><p><strong>按位与运算</strong> : 相同的二进制数位上,都是1的时候,结果为1,否则为零。</p></blockquote><blockquote><p><strong>按位或运算</strong> ： 相同的二进制数位上,都是0的时候,结果为0,否则为1。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">hash计算存放位置的时候,是通过 hash &amp; (length-1)</span><br><span class="line">例如1：</span><br><span class="line">hash值如果为3,hashmap默认容量为16  ,即 3 &amp; (16-1)</span><br><span class="line">0000 0011    3</span><br><span class="line">0000 1111    15</span><br><span class="line">------------------</span><br><span class="line">0000 0011    3  索引值为3</span><br><span class="line"></span><br><span class="line">例如2：</span><br><span class="line">hash值如果为5,hashmap默认容量为16  ,即 5 &amp; (16-1)</span><br><span class="line">0000 0101    5</span><br><span class="line">0000 1111    15</span><br><span class="line">------------------</span><br><span class="line">0000 0101    5  索引值为5</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line">如果不是2的n次幂</span><br><span class="line">hash值如果为3,hashmap容量设置为17  ,即 3 &amp; (17-1)</span><br><span class="line">0000 0011    3  </span><br><span class="line">0001 0000    16</span><br><span class="line">------------------</span><br><span class="line">0000 0000    0 索引位置为0</span><br><span class="line"></span><br><span class="line">hash值如果为7,hashmap容量设置为17  ,即 7 &amp; (17-1)</span><br><span class="line">0000 0111    7</span><br><span class="line">0001 0000    16</span><br><span class="line">------------------</span><br><span class="line">0000 0000    0 索引位置为0</span><br><span class="line"></span><br><span class="line">hash值如果为9,hashmap容量设置为17  ,即 7 &amp; (17-1)</span><br><span class="line">0000 1001    9</span><br><span class="line">0001 0000    16</span><br><span class="line">------------------</span><br><span class="line">0000 0000    0 索引位置为0</span><br></pre></td></tr></table></figure><p>由上面可以看出,当我们根据key的hash确定其在数组的位置时, 如果n为2的幂次方,可以保证数据的均匀插入,如果n不是2的幂次方,可能数组的一些位置永远不会插入数据,浪费数组的空间,加大hash冲突。因此,HashMap 容量为2次幂的原因,就是为了数据的的均匀分布,减少hash冲突,毕竟hash冲突越大, 代表数组中一个链的长度越大,这样的话会降低hashmap的性能</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p><strong>如果初始hashmap的容量不是2的n次幂,会做哪些操作</strong><br>如果创建HashMap对象时,输入的数组长度是17,不是2的幂,HashMap通过<code>移位运算</code>和<code>或运算</code>得到比那个数大且最近的二次幂数字。例如如果容量是17,初始化容量就是返回32</p><p>jdk1.8 表改变大小的源码操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回给定目标容量的2次幂大小。  </span></span><br><span class="line"><span class="comment">     * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再次强调一下：</p><blockquote><p><strong>按位与运算</strong> : 相同的二进制数位上,都是1的时候,结果为1,否则为零。</p></blockquote><blockquote><p><strong>按位或运算</strong> ： 相同的二进制数位上,都是0的时候,结果为0,否则为1。<br>1是负数  0正数</p></blockquote><p>下面看看这几个无符号右移操作是干什么的  </p><p><strong>第一种情况,容量传递的是0</strong></p><p>如果n这时为0了(经过了cap-1之后) , 则经过后面的几次无符号右移依然是0,最后返回的capacity是1 </p><p><strong>第二种情况,n不等于0</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">HashMap &lt;String,Object&gt; hashmap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">17</span>);</span><br><span class="line">cap = <span class="number">17</span></span><br><span class="line"><span class="keyword">int</span> n = cap - <span class="number">1</span> = <span class="number">16</span>;</span><br><span class="line">第一次无符号右移一位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">0000</span>    n=<span class="number">16</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">1000</span>    n &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1000</span>    <span class="number">24</span> ===&gt;n</span><br><span class="line"></span><br><span class="line">第二次无符号右移<span class="number">2</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1000</span>    n=<span class="number">24</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0110</span>    n &gt;&gt;&gt; <span class="number">2</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1110</span>    n = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">第三次无符号右移<span class="number">4</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1110</span>    n = <span class="number">30</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0001</span>    n &gt;&gt;&gt; <span class="number">4</span></span><br><span class="line">------------------------------------------------------ </span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n = <span class="number">31</span></span><br><span class="line"></span><br><span class="line">第四次无符号右移<span class="number">8</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>    n &gt;&gt;&gt; <span class="number">8</span></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"></span><br><span class="line">第五次无符号右移<span class="number">16</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>    n &gt;&gt;&gt; <span class="number">16</span></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line">执行最后一行代码操作,n&gt;<span class="number">0</span>且小于最大容量,返回<span class="number">31</span>+<span class="number">1</span> = <span class="number">32</span></span><br><span class="line"><span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>第三种情况Hashmap最大容量的移动位置操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0010</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">2</span>^<span class="number">30</span></span><br><span class="line"><span class="keyword">int</span> n = cap-<span class="number">1</span>;</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n=<span class="number">2</span>^<span class="number">30</span> -<span class="number">1</span>   </span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n&gt;&gt;&gt;<span class="number">2</span></span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">最后得到的值一定为</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line">加一操作后为</span><br><span class="line"><span class="number">0010</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>    <span class="number">2</span>^<span class="number">30</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong> ：如果容量大于MAXIMUM_CAPACITY  则取最大容量。不到2^30 的容量,通过移位操作后,会得到大于值的最小2的幂。如果当前值就是2的幂次方,返回当前值</p><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p><strong>为什么Map桶中的节点个数要超过8才转红黑树</strong><br>因为树节点的大小大约是普通节点的两倍,所以我们只在链表中包含足够的节点时才使用树节点(参见TREEIFY_THRESHOLD)。当它们变得太小(由于删除或调整大小)时,就会被转换回普通的桶。在使用分布良好的用户hashcode时,很少使用树箱。理想情况下,在随机哈希码下,箱子中节点的频率服从泊松分布,默认调整阈值为0.75,平均参数约为0.5,尽管由于调整粒度的差异很大。忽略方差,列表大小k的预期出现次数是(exp(-0.5)*pow(0.5,k)/factorial(k)).<br>     *<br>     * 0:    0.60653066<br>     * 1:    0.30326533<br>     * 2:    0.07581633<br>     * 3:    0.01263606<br>     * 4:    0.00157952<br>     * 5:    0.00015795<br>     * 6:    0.00001316<br>     * 7:    0.00000094<br>     * 8:    0.00000006<br>     * more: less than 1 in ten million<br>1.TreeNodes占用空间是普通Nodes的两倍,所以只有当链表中包含足够多的节点时才会转成TreeNodes,而是否足够多就是由TREEIFY_THRESHOLD（8）的值决定的。<br>当链表中节点数变少时, 红黑树又会转成普通的链表。并且我们查看源码的时候发现,链表长度达到8(桶的数量要大于64)就转成红黑树,当长度降到6就转成普通链表<br>这样就解释了为什么不是一开始就将其转换为TreeNodes, 而是需要一定节点数才转为TreeNodes, 说白了就是权衡,空间和时间的权衡。</p><p>2.当hashCode离散性很好的时候,树型节点用到的概率非常小,因为数据均匀分布在每个桶中,几乎不会有桶中链表长度会达到阈值。但是在随机hashCode下,离散性可能会变差,然而JDK又不能阻止用户实现这种不好的hash算法,因此就可能导致不均匀的数据分布。不过<strong>理想情况</strong>下随机hashCode算法下所有桶中节点的分布频率会遵循<strong>泊松分布</strong>,我们可以看到,一个桶中链表长度达到8个元素的概率为0.00000006. 几乎是不可能事件。所以,之所以选择8,不是随便决定的,而是根据概率统计决定的。</p><p>下面是我找的一个<code>泊松分布</code> 示意图<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83.png?versionId=CAEQGxiBgIDF.fqw2hciIGMxZjNiNzhmMDM0NzQyZjQ5OGE0MWY2OGM5MTg5MzZi"></p><p>图片原来链接：<a href="http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html">http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html</a><br>可以参考看下</p><h4 id="问题4"><a href="#问题4：" class="headerlink" title="问题4："></a>问题4：</h4><p><strong>基于JDK1.8,hashmap引入了红黑树,为什么一开始不按照红黑树存储。非要等到链表长度大于8才转换</strong></p><p>1.JDK 1.8以前HashMap的实现是<code>数组+链表</code>,即使哈希函数取得再好,也很难达到元素百分百均匀分布。当HashMap中有大量的元素都存放到同一个桶中时,这个桶下有一条长长的链表, 这个时候HashMap就相当于一个单链表,假如单链表有n个元素,遍历的时间复杂度就是O(n),完全失去了它的优势。针对这种情况,JDK 1.8中引入了红黑树(查找时间复杂度为O(logn))来优化这个问题。当链表长度很小的时候, 即使遍历,速度也非常快,但是当链表长度不断变长,肯定会对查询性能有一定的影响, 所以才需要转成树。</p><p>2.TreeNodes占用空间是普通Nodes的两倍,当元素较少时,增加多余的开销</p><h4 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h4><p><strong>问题：为什么不使用AVL树而使用红黑树</strong><br>红黑树和AVL树都是最常用的平衡二叉搜索树，它们的查找、删除、修改都是O(lgn) time</p><p>AVL树和红黑树有几点比较和区别：<br>（1）AVL树是更加严格的平衡，因此可以提供更快的查找速度，一般读取查找密集型任务，适用AVL树。<br>（2）红黑树更适合于插入修改密集型任务。<br>（3）通常，AVL树的旋转比红黑树的旋转更加难以平衡和调试。<br>原文链接：<a href="https://blog.csdn.net/21aspnet/article/details/88939297">https://blog.csdn.net/21aspnet/article/details/88939297</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最后提供一个红黑树的学习地址,里面包含的各种数据结构,便于学习和理解数据结构<br><a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">https://www.cs.usfca.edu/~galles/visualization/RedBlack.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jdk17-hashmap&quot;&gt;&lt;a href=&quot;#JDK1-7-HashMap&quot; class=&quot;headerlink&quot; title=&quot;JDK1.7 HashMap&quot;&gt;&lt;/a&gt;JDK1.7 HashMap&lt;/h1&gt;&lt;h1 id=&quot;jdk18-hashmap&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="Java基础" scheme="https://lswisdom.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>红黑树的简单介绍</title>
    <link href="https://lswisdom.github.io/posts/2388768520/"/>
    <id>https://lswisdom.github.io/posts/2388768520/</id>
    <published>2021-08-16T00:07:45.000Z</published>
    <updated>2021-10-30T06:22:54.920Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="红黑树基本讲解"><a href="#红黑树基本讲解" class="headerlink" title="红黑树基本讲解"></a>红黑树基本讲解</h1><h2 id="1-基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><p> R-B Tree，全称是Red-Black Tree，又称为“红黑树”，它一种特殊的二叉查找树。红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。</p><p><strong>红黑树的特性</strong>:</p><h3 id="11-性质"><a href="#1-1-性质" class="headerlink" title="1.1 性质"></a>1.1 性质</h3><ul><li>性质1: 每个节点要么是黑色，要么是红色。</li><li>性质2: 根节点是黑色。</li><li>性质3: 每个叶子节点(NIL) 是黑色。</li><li>性质4: 每个红色节点的两个子节点一定都是黑色。</li><li>性质5: 任意节点到每个叶子节 点的路径都包含数量相同的黑结点。从性质5又可以推出:<br>性质5.1:如果一个节点存在黑子节点， 那么该结点肯定有两个子节点</li></ul><p>如图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/01%E7%BA%A2%E9%BB%91%E6%A0%91.png?versionId=CAEQGxiBgMDfgpax2hciIDA3YmY1NDIwZWI3ODRhOGJhMmVmY2Q4MTQxOGExYzY1"></p><p><strong>红黑树</strong> 并不是一个完美平衡二叉查找树，从图上可以看到，根结点<strong>100</strong> 的左子树显然比右子树高，但左子树和右子树的黑结点的层数是相等的，也即任意一个结点到到每 个叶子结点的路径都包含数量相同的黑结点(性质5)。<br>所以我们叫红黑树这种平衡为黑色完美平衡。</p><h3 id="12-自平衡操作"><a href="#1-2-自平衡操作" class="headerlink" title="1.2 自平衡操作"></a>1.2 自平衡操作</h3><ul><li><strong>变色</strong> : 结点的颜色由红变黑或由黑变红</li><li>**左旋 **: 以某个结点作为支点(旋转结点)，其右子结点变为旋转结点的父结点,右子结点的左子结点变为旋转结点的右子结点，左子结点保持不变</li><li><strong>右旋</strong> : 以某个结点作为支点(旋转结点),   其左子结点变为旋转结点的父结点，左子结点的右子结点变为旋转结点的左子结点，右子结点保持不变</li></ul><p>红黑树<strong>右旋</strong>操作如下所示：</p><p>![](<a href="http://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/02">http://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/数据结构/红黑树/02</a> 红黑树右旋操作.png?versionId=CAEQGxiBgMDpgpax2hciIDhmMjExMWQ2ZjU4ZjQ2ODU4M2ZkYzc4MmQ4MjVlN2Fh)</p><p>红黑树<strong>左旋</strong> 操作</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/03%E7%BA%A2%E9%BB%91%E6%A0%91%E5%B7%A6%E6%97%8B%E6%93%8D%E4%BD%9C.png?versionId=CAEQGxiBgMDogpax2hciIGQ0NmQ2NDZhYmEzZjQ2NjRiNGU3Y2I1ODliN2ZkYzUz"></p><h3 id="13-红黑树的查找"><a href="#1-3-红黑树的查找" class="headerlink" title="1.3 红黑树的查找"></a>1.3 红黑树的查找</h3><p>红黑树的查找和二叉树的查找操作类似</p><h3 id="14-红黑树的插入"><a href="#1-4-红黑树的插入" class="headerlink" title="1.4 红黑树的插入"></a>1.4 红黑树的插入</h3><p>插入操作包括两部分：1.查找要插入节点的父节点  2.插入后进行树的平衡操作</p><p><strong>注意</strong>: 插入节点,必须为红色，理由很简单,红色的父节点(如果存在)为黑色节点时，红黑树的黑色平衡没被破坏，不需要做自平衡操作。但如果插入结点是黑色，那么插入位置所在的子树黑色结点总是多1,必须做自平衡。</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E8%8A%82%E7%82%B9%E4%BB%8B%E7%BB%8D.png?versionId=CAEQGxiBgMDShJax2hciIDA2NjY3OTMzODlhMDQ0NmZhZThmOWUwNWZjN2Q0NzEw"></p><h2 id="2红黑树的插入情景分析"><a href="#2-红黑树的插入情景分析" class="headerlink" title="2.红黑树的插入情景分析"></a>2.红黑树的插入情景分析</h2><h3 id="情景1插入的节点为空树"><a href="#情景1：插入的节点为空树" class="headerlink" title="情景1：插入的节点为空树"></a>情景1：插入的节点为空树</h3><p>直接把插入的节点作为根节点就可以了，并且把根节点变成黑色</p><h3 id="情景2插入节点的key已存在"><a href="#情景2：插入节点的Key已存在" class="headerlink" title="情景2：插入节点的Key已存在"></a>情景2：插入节点的Key已存在</h3><p>处理：更新当前节点的值，为插入节点的值</p><h3 id="情景3-插入结点的父结点为黑结点"><a href="#情景3-插入结点的父结点为黑结点" class="headerlink" title="情景3   插入结点的父结点为黑结点"></a>情景3   插入结点的父结点为黑结点</h3><p>由于插入的结点是红色的，并不会影响红黑树的平衡，直接插入即可，无需做自平衡。如图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E6%99%AF3.png?versionId=CAEQGxiBgIDXhJax2hciIDU4NTU3MTA5ODQ3OTRhMGQ4MDNmNmUxNWUyZTg1NWI3"></p><h3 id="情景4插入节点的父节点为红色"><a href="#情景4：插入节点的父节点为红色" class="headerlink" title="情景4：插入节点的父节点为红色"></a>情景4：插入节点的父节点为红色</h3><p>红黑树的性质2:  根结点是黑色，如果插入节点的父结点为红结点，那么该父结点不可能为根结点，所以插入结点总是存在祖父结点。</p><p>分为两种情况，如下图所示</p><ul><li>一种是爸爸节点为红色，叔叔节点也是红色</li><li>一种是爸爸节点为红色，叔叔节点为黑色或者不存在</li></ul><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E7%88%B8%E7%88%B8%E8%8A%82%E7%82%B9%E5%92%8C%E5%8F%94%E5%8F%94%E8%8A%82%E7%82%B9%E6%98%AF%E7%BA%A2%E8%89%B2.png?versionId=CAEQGxiBgIDqhJax2hciIDMwYWJiMWE2OTFiNjRjYWVhZjkzYTk1NTY4YmMxNGVi"></p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E7%88%B8%E7%88%B8%E4%B8%BA%E7%BA%A2%E8%89%B2%E5%90%8C%E6%97%B6%E5%8F%94%E5%8F%94%E4%B8%BA%E9%BB%91%E8%89%B2%E6%88%96%E8%80%85%E7%A9%BA.png?versionId=CAEQGxiBgMDnhJax2hciIDcyMjBiNDIyMDA1NzQ2Zjg5Yzg1N2YxYjcyZDhlZWUy"></p><h4 id="情景41-叔叔结点存在并且为红结点"><a href="#情景4-1-叔叔结点存在并且为红结点" class="headerlink" title="情景4.1  叔叔结点存在并且为红结点"></a>情景4.1  叔叔结点存在并且为红结点</h4><p>依据红黑树<strong>性质4</strong> 可知，红色节点不能相连==&gt;祖父结点肯定为黑结点。因为不可以同时存在两个相连的红结点。那么此时该插入子树的红黑层数的情况是:黑红红。显然最简单的处理方式是把其改为:红黑红<br>处理:<br>        1  将爸爸节点(P)和叔叔节点(U)节点改为黑色<br>        2  将爷爷PP改为红色<br>        3  将爷爷PP设置为当前节点，进行后续处理</p><p>如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E6%99%AF4.1%E5%8F%98%E6%8D%A2%E5%89%8D%E5%90%8E.png?versionId=CAEQGxiBgMDXhJax2hciIGJlMzQyNmM3YWQ4NzQ1Mzc4M2EyMTAzYzU2MzAwNDgzg"></p><p>可以看到，我们把PP结点设为红色了，如果PP的父结点是黑色，那么无需再做任何处理;但如果PP的父结点是红色，则违反了红黑树的性质.所以需要将PP设置为当前节点，继续做插入操作自平衡处理，真到平衡为为止.</p><h4 id="插入情景42-叔叔结点不存在或为黑结点并且插入结点的父亲结点是祖父结点的左子结点"><a href="#插入情景4-2-叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的左子结点" class="headerlink" title="插入情景4.2  叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的左子结点"></a>插入情景4.2  叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的左子结点</h4><p>注意:单纯从插入前来看，叔叔节点非红即空(NIL节点) ，否则的话破坏了红黑树性质5,此路径会比其它路径多-一个黑色节点。</p><p>新插入节点，可能为P节点的左子节点，也可能是P节点的右子节点,所以分为两种情况分别处理</p><h5 id="421-新插入节点为其父节点的左子节点ll红色情况"><a href="#4-2-1-新插入节点，为其父节点的左子节点-LL红色情况" class="headerlink" title="4.2.1 新插入节点，为其父节点的左子节点(LL红色情况)"></a>4.2.1 新插入节点，为其父节点的左子节点(LL红色情况)</h5><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.2.1LL%E5%8F%98%E6%8D%A2%E5%89%8D.png?versionId=CAEQGxiBgIDHgpax2hciIGIwOWQ1OWM0ZjU0NTQwMzk4NGVkN2IxMDA3MTQ2MTVi"></p><p>处理:</p><ol><li>变颜色:将P设置 为黑色，将PP设置为红色 ，然后以爷爷节点为当前节点</li><li>对PP节点进行右旋</li></ol><p>处理结果如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/LL%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86.png?versionId=CAEQGxiCgICihpax2hciIDViZDcwNjZiZTYyODQ0ZmM5MmZlNTRiZDNjYThhMzVk"></p><h5 id="422新插入节点为其父节点的右子节点lr红色情况"><a href="#4-2-2-新插入节点，为其父节点的右子节点-LR红色情况" class="headerlink" title="4.2.2:新插入节点，为其父节点的右子节点(LR红色情况)"></a>4.2.2:新插入节点，为其父节点的右子节点(LR红色情况)</h5><p>![](<a href="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.2.2">https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/数据结构/红黑树/4.2.2</a> LR情况处理前.png?versionId=CAEQGxiBgMDGgpax2hciIDQ5OWRlYzEyMDYzMzQzYTBiZGU4YzJiNDdjMzRiOTNh)</p><p>处理:</p><ol><li>对P进行左旋  </li><li> 将P设置为当前节点，得到LL红色情况 </li><li>按照LL红色情况处理(1.变颜色2.右旋PP)</li></ol><p>操作过程如下图所示：</p><p>第一步</p><p>![](<a href="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.2.2">https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/数据结构/红黑树/4.2.2</a> LR情况处理第一步.png?versionId=CAEQGxiBgMDLgpax2hciIDAyZmQ4NzY0NjBjNTQ4MTJiMmUxNDIyZTViZWI1MzBk)</p><p>第二步</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/LL%E5%8F%98%E8%89%B2%E6%93%8D%E4%BD%9C+%E6%97%8B%E8%BD%AC%E5%B9%B3%E8%A1%A1%E6%93%8D%E4%BD%9C.png?versionId=CAEQGxiBgICehpax2hciIDljNjBkM2NjMGNhOTQyZDJhNmIyZmRhZDc4ODVhMTU2"></p><h4 id="情况43-叔叔结点不存在或为黑结点并且插入结点的父亲结点是祖父结点的右子结点"><a href="#情况4-3-叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的右子结点" class="headerlink" title="情况4.3  叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的右子结点"></a>情况4.3  叔叔结点不存在或为黑结点，并且插入结点的父亲结点是祖父结点的右子结点</h4><p>和上述操作4.2 相反图，如下所示：</p><h5 id="431-新插入节点为其父节点的右子节点rr红色情况"><a href="#4-3-1-新插入节点，为其父节点的右子节点-RR红色情况" class="headerlink" title="4.3.1 新插入节点，为其父节点的右子节点(RR红色情况)"></a>4.3.1 新插入节点，为其父节点的右子节点(RR红色情况)</h5><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E5%86%B54.3.png?versionId=CAEQGxiBgMDhgpax2hciIGFhMDQyYmU0NjM2YTRhYjQ5ODljMTYyZWM0ZjI3N2Iz"></p><p>处理操作：<br>1.变颜色:  将P设置为黑色，将PP设置为红色</p><p>2.对PP节点进行左旋 </p><p>旋转过程如下图所示：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.3.1RR%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86.png?versionId=CAEQGxiBgMCmhpax2hciIGJiNGJjNTZkMmRjNDRlZWE4ODY2ZWI0Njc1OTYxMjE5"></p><h5 id="432-新插入节点为其父节点的左子节点rl红色情况"><a href="#4-3-2-新插入节点，为其父节点的左子节点-RL红色情况" class="headerlink" title="4.3.2 新插入节点，为其父节点的左子节点(RL红色情况)"></a>4.3.2 新插入节点，为其父节点的左子节点(RL红色情况)</h5><p>如下图所示：</p><p>![](<a href="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.3.2">https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/数据结构/红黑树/4.3.2</a> RL情况.png?versionId=CAEQGxiBgMClhpax2hciIDc1Yjg2NjViMjIyMjQ4Mzk4MTUyNTEyOWQ2NDA2NGUw)</p><p>处理:<br>1.对P进行右旋<br>2.将P设置为当前节点，得到RR红色情况<br>3.按照RR红色情况处理(1.变颜色2.左旋PP)</p><p>第一步对P节点进行右旋操作   如下图所示：</p><p><img src=".%5Cimages%5Chttps://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E6%83%85%E5%86%B54.3.2%E7%AC%AC%E4%B8%80%E6%AD%A5.png?versionId=CAEQGxiCgIDngpax2hciIDViYTc2MTAxZTdmYTRmZDFiNjNiY2E3NjdlMzIwMTMx"></p><p>第二步：变色+旋转，如下图所示</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/4.3.2RL%E6%83%85%E5%86%B5%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%8F%98%E8%89%B2+%E6%97%8B%E8%BD%AC.png?versionId=CAEQGxiBgICihpax2hciIGE0Y2JiM2ZiZTkzZDRmYzc5MDA4NDY4NjhlYTUzZmRi"></p><h3 id="3红黑树代码演示"><a href="#3-红黑树代码演示" class="headerlink" title="3.红黑树代码演示"></a>3.红黑树代码演示</h3><h4 id="31-左右旋参考示意图"><a href="#3-1-左右旋参考示意图" class="headerlink" title="3.1 左右旋参考示意图"></a>3.1 左右旋参考示意图</h4><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%B7%A6%E5%8F%B3%E6%97%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png?versionId=CAEQGxiBgMDWhJax2hciIDU4NzYxMjk1NGRiMDQ0NTY5NzAwNjBkMzNiNTYyYThk"></p><h4 id="32-代码演示"><a href="#3-2-代码演示" class="headerlink" title="3.2 代码演示"></a>3.2 代码演示</h4><p>RBTree.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RBTree</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>   RBNode root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBNode <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前节点的父节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RBNode <span class="title">parentOf</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点是否为红色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.color == RED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点是否为黑色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBlack</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.color == BLACK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置节点为红色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRed</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            node.color = RED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置节点颜色为黑色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBlack</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            node.color = BLACK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inOrderPrint(<span class="keyword">this</span>.root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrderPrint</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inOrderPrint(node.left);</span><br><span class="line">            System.out.println(<span class="string">&quot; key: &quot;</span> + node.key + <span class="string">&quot;  ,value:&quot;</span> + node.value);</span><br><span class="line">            inOrderPrint(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左旋示意图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBNode x)</span> </span>&#123;</span><br><span class="line">        RBNode y = x.right;</span><br><span class="line">        x.right = y.left;</span><br><span class="line">        <span class="comment">// 1.将x的右子节点指定y的左子节点（ly) ,将y的左子节点的父节点更新为x</span></span><br><span class="line">        <span class="keyword">if</span> (y.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y.left.parent = x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.当x的父节点(不为空时) ,更新y的父节点为x的父节点 ，并将x的父节点的 子树（当前x的指数位置）指定为y</span></span><br><span class="line">        <span class="keyword">if</span> (x.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果x节点原来为其父节点的左节点，左旋时，就需要把y节点也放在左节点的位置</span></span><br><span class="line">            <span class="keyword">if</span> (x == x.parent.left) &#123;</span><br><span class="line">                x.parent.left = y;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果x节点原来为其父节点的右节点，左旋时，就需要把y节点也放在左节点的位置</span></span><br><span class="line">                x.parent.right = y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 说民x节点为根节点 故所以更新y节点为根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = y;</span><br><span class="line">            <span class="keyword">this</span>.root.parent = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.将x的父节点更新为y ,并将y的左子节点更新为x</span></span><br><span class="line">        x.parent = y;</span><br><span class="line">        y.left = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右旋操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBNode y)</span> </span>&#123;</span><br><span class="line">        RBNode x = y.left;</span><br><span class="line">        <span class="comment">// 1.将y的左子节点更新为x的右子节点，并且更新x的右子节点的父节点为y</span></span><br><span class="line">        y.left = x.right;</span><br><span class="line">        <span class="keyword">if</span> (x.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.right.parent = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.当y的父节点不为空时，更新x的父节点为y的父节点。更新y的父节点的指定子节点为x</span></span><br><span class="line">        <span class="keyword">if</span> (y.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.parent = y.parent;</span><br><span class="line">            <span class="comment">// 此时不知道原先y是在其父节点的左侧还是右侧，所以要先判断</span></span><br><span class="line">            <span class="keyword">if</span> (y == y.parent.left) &#123;</span><br><span class="line">                y.parent.left = x;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                y.parent.right = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有父节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = x;</span><br><span class="line">            <span class="keyword">this</span>.root.parent = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.更新y的节点为x,并且更新x的节点为y</span></span><br><span class="line">        y.parent = x;</span><br><span class="line">        x.right = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   插入key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        RBNode rbNode = <span class="keyword">new</span> RBNode();</span><br><span class="line">        rbNode.setKey(key);</span><br><span class="line">        rbNode.setValue(value);</span><br><span class="line">        rbNode.setColor(RED);</span><br><span class="line">        insert(rbNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入红黑树节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.查找当前节点的父节点</span></span><br><span class="line">        RBNode parent = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 获取根节点，开始寻找</span></span><br><span class="line">        RBNode x = <span class="keyword">this</span>.root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parent = x;</span><br><span class="line">            <span class="keyword">int</span> result = node.key.compareTo(x.key);</span><br><span class="line">            <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 说明当前节点应该放在x节点的右子树</span></span><br><span class="line">                x = x.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 说明当前节点应该放在左子树上</span></span><br><span class="line">                x = x.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果key值相等，需要进行值的替换</span></span><br><span class="line">                x.setValue(node.getValue());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录父节点</span></span><br><span class="line">        node.parent = parent;</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断当前节点和父节点的key值大小，从而确定新插入的节点应该放在父节点的左侧还是右侧</span></span><br><span class="line">            <span class="keyword">int</span> result = node.key.compareTo(parent.key);</span><br><span class="line">            <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                parent.right = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent.left = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果没有父亲节点,当前节点就是根节点</span></span><br><span class="line">            <span class="keyword">this</span>.root = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 红黑树插入新节点后，需要进行平衡操作，也就是左旋或者右旋操作</span></span><br><span class="line">        balanceInsertion(node);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树插入节点后，需要进行平衡操作</span></span><br><span class="line"><span class="comment">     *       情景1： 红黑树为空树时,将根节点染成黑色</span></span><br><span class="line"><span class="comment">     *       情景2： 插入的节点在红黑树已经存在,不需要处理</span></span><br><span class="line"><span class="comment">     *       情景3： 插入节点的父节点为黑色，因为所插入的路径，黑色节点没有发生变化，所以红黑树依然平衡，所以不需要处理</span></span><br><span class="line"><span class="comment">     *       情景4： 插入节点的父节点为红色</span></span><br><span class="line"><span class="comment">     *              情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点) 根据红黑树性质4.红色节点不能直接相连，由此可知必然存在爷爷节点,且爷爷节点必定为黑节点</span></span><br><span class="line"><span class="comment">     *                          由此可以 a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line"><span class="comment">     *              情景4.2  叔叔节点不存在或者为黑色节点，父节点为爷爷节点的左子树</span></span><br><span class="line"><span class="comment">     *                      情景4.2.1 插入节点为其父节点的左子节点(LL情况) a.将爸爸节点染成黑色 b.将爷爷染成红色 c.然后已爷爷节点进行右旋操作</span></span><br><span class="line"><span class="comment">     *                      情景4.2.2 插入节点为其父节点的右子节点(LR情况) a.已爸爸为节点进行一次左旋操作,得到(LL双红的情况 4.2.1) 然后指定爸爸节点为当前节点,执行下一轮的操作</span></span><br><span class="line"><span class="comment">     *              情景4.3  叔叔节点不存在,或者为黑色节点,父节点为爷爷节点的右子树</span></span><br><span class="line"><span class="comment">     *                      情景4.3.1 插入节点为其父节点的右子节点(RR情况) a.将爸爸染成黑色节点  b.将爷爷染成红色 c.然后已爷爷节点进行左旋操作</span></span><br><span class="line"><span class="comment">     *                      情景4.3.2 插入节点为其父节点的左子节点(RL情况) a.以爸爸节点进行一次右旋,得到RR双红的场景( RR情况 4.3.1).然后指定爸爸节点为当前节点,进行下一轮的操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">balanceInsertion</span><span class="params">(RBNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root.setColor(BLACK);</span><br><span class="line">        <span class="comment">// 1.获取父节点和爷爷节点</span></span><br><span class="line">        RBNode parent = parentOf(node);</span><br><span class="line">        RBNode gparent = parentOf(parent);</span><br><span class="line">        <span class="comment">// 情景3 : 插入节点的父节点为黑色,不需要处理</span></span><br><span class="line">        <span class="comment">// 情景4： 插入节点的父节点为红色</span></span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span> &amp;&amp; isRed(parent)) &#123;</span><br><span class="line">            <span class="comment">// 叔叔节点</span></span><br><span class="line">            RBNode uncle = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 如果爸爸是爷爷的左孩子，那么叔叔必然是爷爷的右孩子,反之一样</span></span><br><span class="line">            <span class="keyword">if</span> (parent == gparent.left) &#123;</span><br><span class="line">                uncle = gparent.right;</span><br><span class="line">                <span class="comment">// 情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点)</span></span><br><span class="line">                <span class="keyword">if</span> (uncle != <span class="keyword">null</span> &amp;&amp; isRed(uncle)) &#123;</span><br><span class="line">                    <span class="comment">// a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line">                    setBlack(parent);</span><br><span class="line">                    setBlack(uncle);</span><br><span class="line">                    setRed(gparent);</span><br><span class="line">                    balanceInsertion(gparent);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 情景4.2  叔叔节点不存在或者为黑色节点，父节点为爷爷节点的左子树</span></span><br><span class="line">                <span class="keyword">if</span> (uncle == <span class="keyword">null</span> || isBlack(uncle)) &#123;</span><br><span class="line">                    <span class="comment">// 情景4.2.1 插入节点为其父节点的左子节点(LL情况)</span></span><br><span class="line">                    <span class="keyword">if</span> (node == parent.left) &#123;</span><br><span class="line">                        <span class="comment">// a.将爸爸节点染成黑色 b.将爷爷染成红色 c.然后已爷爷节点进行右旋操作</span></span><br><span class="line">                        setBlack(parent);</span><br><span class="line">                        setRed(gparent);</span><br><span class="line">                        rightRotate(gparent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 情景4.2.2 插入节点为其父节点的右子节点(LR情况)</span></span><br><span class="line">                    <span class="keyword">if</span> (node == parent.right) &#123;</span><br><span class="line">                        <span class="comment">// a.已爸爸为节点进行一次左旋操作,得到(LL双红的情况 4.2.1) 然后指定爸爸节点为当前节点,执行下一轮的操作</span></span><br><span class="line">                        leftRotate(parent);</span><br><span class="line">                        balanceInsertion(parent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 父节点为爷爷节点的右子树,则叔叔节点就是爷爷节点的左子树</span></span><br><span class="line">                uncle = gparent.left;</span><br><span class="line">                <span class="comment">// 情景4.1  叔叔节点存在,并且为红色(父和叔  都是红色节点)</span></span><br><span class="line">                <span class="keyword">if</span> (uncle != <span class="keyword">null</span> &amp;&amp; isRed(uncle)) &#123;</span><br><span class="line">                    <span class="comment">// a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line">                    setBlack(parent);</span><br><span class="line">                    setBlack(uncle);</span><br><span class="line">                    setRed(gparent);</span><br><span class="line">                    balanceInsertion(gparent);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 情景4.3  叔叔节点不存在,或者为黑色节点,父节点为爷爷节点的右子树</span></span><br><span class="line">                <span class="keyword">if</span> (uncle == <span class="keyword">null</span> || isBlack(uncle)) &#123;</span><br><span class="line">                    <span class="comment">// 情景4.3.1 插入节点为其父节点的右子节点(RR情况) a.将爸爸染成黑色节点  b.将爷爷染成红色 c.然后已爷爷节点进行左旋操作</span></span><br><span class="line">                    <span class="keyword">if</span> (node == parent.right) &#123;</span><br><span class="line">                        setBlack(parent);</span><br><span class="line">                        setRed(gparent);</span><br><span class="line">                        leftRotate(gparent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 情景4.3.2 插入节点为其父节点的左子节点(RL情况)</span></span><br><span class="line">                    <span class="keyword">if</span> (node == parent.left) &#123;</span><br><span class="line">                        <span class="comment">// a.以爸爸节点进行一次右旋,得到RR双红的场景( RR情况 4.3.1).然后指定爸爸节点为当前节点,进行下一轮的操作</span></span><br><span class="line">                        rightRotate(parent);</span><br><span class="line">                        balanceInsertion(parent);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RBNode</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> RBNode parent;</span><br><span class="line">        <span class="keyword">private</span> RBNode left;</span><br><span class="line">        <span class="keyword">private</span> RBNode right;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> color;</span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RBNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RBNode</span><span class="params">(RBNode parent, RBNode left, RBNode right, <span class="keyword">boolean</span> color, K key, V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">            <span class="keyword">this</span>.color = color;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RBNode <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(RBNode parent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RBNode <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(RBNode left)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RBNode <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(RBNode right)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">boolean</span> color)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.color = color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="33-运行结果演示"><a href="#3-3-运行结果演示" class="headerlink" title="3.3 运行结果演示"></a>3.3 运行结果演示</h4><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png?versionId=CAEQGxiBgMDihJax2hciIDM0ZmZjMjI3ZDBlZDRhMzViZDUyNmZmNzIwZmNlZmZk"></p><p>没做类型处理，插入的都是字符串比较，按照字符串的ASICC进行排序和平衡，颜色就是区分显示，不表示红黑色</p><h3 id="4红黑树学习地址"><a href="#4-红黑树学习地址" class="headerlink" title="4.红黑树学习地址"></a>4.红黑树学习地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cs.usfca.edu&#x2F;~galles&#x2F;visualization&#x2F;RedBlack.html</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;红黑树基本讲解&quot;&gt;&lt;a href=&quot;#红黑树基本讲解&quot; class=&quot;headerlink&quot; title=&quot;红黑树基本讲解&quot;&gt;&lt;/a&gt;红黑树基本讲解&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    
    <category term="数据结构" scheme="https://lswisdom.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JDK1.8 HashMap源码简单讲解</title>
    <link href="https://lswisdom.github.io/posts/221454775/"/>
    <id>https://lswisdom.github.io/posts/221454775/</id>
    <published>2021-08-16T00:00:00.000Z</published>
    <updated>2021-08-16T00:19:44.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jdk18-hashmap源码简单讲解"><a href="#JDK1-8-HashMap源码简单讲解" class="headerlink" title="JDK1.8 HashMap源码简单讲解"></a>JDK1.8 HashMap源码简单讲解</h1><h2 id="1成员常量类"><a href="#1-成员常量类" class="headerlink" title="1.成员常量类"></a>1.成员常量类</h2><h3 id="11-序列化版本号"><a href="#1-1-序列化版本号" class="headerlink" title="1.1  序列化版本号"></a>1.1  序列化版本号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br></pre></td></tr></table></figure><h3 id="12-集合的初始容量"><a href="#1-2-集合的初始容量" class="headerlink" title="1.2 集合的初始容量"></a>1.2 集合的初始容量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> * 默认容量是16,必须是2的n的n次幂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure><h4 id="121-问题为什么必须是2的n次幂如果输入值不是2的幂比如17会怎么样"><a href="#1-2-1-问题：为什么必须是2的n次幂-如果输入值不是2的幂-比如17会怎么样" class="headerlink" title="1.2.1 问题：为什么必须是2的n次幂?如果输入值不是2的幂,比如17会怎么样?"></a>1.2.1 问题：为什么必须是2的n次幂?如果输入值不是2的幂,比如17会怎么样?</h4><p>这样做是为了减少hash碰撞的次数， 2的n次方实际就是1后面n个0，2的n次方减1二进制表示时实际就是n个1;</p><p><strong>按位与运算</strong> : 相同的二进制数位上,都是1的时候，结果为1,否则为零。</p><p><strong>按位或运算</strong> ： 相同的二进制数位上,都是0的时候，结果为0,否则为1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">hash计算存放位置的时候,是通过hash&amp;(length-<span class="number">1</span>)</span><br><span class="line">例如<span class="number">1</span>：</span><br><span class="line">hash值如果为<span class="number">3</span>,hashmap默认容量为<span class="number">16</span>  ,即 <span class="number">3</span> &amp; (<span class="number">16</span>-<span class="number">1</span>)</span><br><span class="line"><span class="number">0000</span> <span class="number">0011</span>    <span class="number">3</span></span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span>    <span class="number">15</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0011</span>    <span class="number">3</span>  索引值为<span class="number">3</span></span><br><span class="line"></span><br><span class="line">例如<span class="number">2</span>：</span><br><span class="line">hash值如果为<span class="number">5</span>,hashmap默认容量为<span class="number">16</span>  ,即 <span class="number">5</span> &amp; (<span class="number">16</span>-<span class="number">1</span>)</span><br><span class="line"><span class="number">0000</span> <span class="number">0101</span>    <span class="number">5</span></span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span>    <span class="number">15</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0101</span>    <span class="number">5</span>  索引值为<span class="number">5</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line">如果不是<span class="number">2</span>的n次幂</span><br><span class="line">hash值如果为<span class="number">3</span>,hashmap容量设置为<span class="number">17</span>  ,即 <span class="number">3</span> &amp; (<span class="number">17</span>-<span class="number">1</span>)</span><br><span class="line"><span class="number">0000</span> <span class="number">0011</span>    <span class="number">3</span>  </span><br><span class="line"><span class="number">0001</span> <span class="number">0000</span>    <span class="number">16</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>    <span class="number">0</span> 索引位置为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">hash值如果为<span class="number">7</span>,hashmap容量设置为<span class="number">17</span>  ,即 <span class="number">7</span> &amp; (<span class="number">17</span>-<span class="number">1</span>)</span><br><span class="line"><span class="number">0000</span> <span class="number">0111</span>    <span class="number">7</span></span><br><span class="line"><span class="number">0001</span> <span class="number">0000</span>    <span class="number">16</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>    <span class="number">0</span> 索引位置为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">hash值如果为<span class="number">9</span>,hashmap容量设置为<span class="number">17</span>  ,即 <span class="number">7</span> &amp; (<span class="number">17</span>-<span class="number">1</span>)</span><br><span class="line"><span class="number">0000</span> <span class="number">1001</span>    <span class="number">9</span></span><br><span class="line"><span class="number">0001</span> <span class="number">0000</span>    <span class="number">16</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>    <span class="number">0</span> 索引位置为<span class="number">0</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>​            1.由上面可以看出，当我们根据key的hash确定其在数组的位置时， 如果n为2的幂次方，可以保证数据的均匀插入，如果n不是2的幂次方，可能数组的一些位置永远不会插入数据，浪费数组的空间，加大hash冲突。因此，HashMap 容量为2次幂的原因，就是为了数据的的均匀分布，减少hash冲突,毕竟hash冲突越大, 代<br>表数组中一个链的长度越大，这样的话会降低hashmap的性能</p><h4 id="122-为什么不直接进行取余运算而是通过位运算"><a href="#1-2-2-为什么不直接进行取余运算，而是通过位运算" class="headerlink" title="1.2.2 为什么不直接进行取余运算，而是通过位运算"></a>1.2.2 为什么不直接进行取余运算，而是通过位运算</h4><p>在计算中，数据是采用0101存储的，位运算的效率远比取模%高，所以，使用位运算代替取余操作，来确定元素的存储问题。当前两种方式，得到的结果都是一样的，只是效率不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash &amp; (length-1)&#x3D;&#x3D; hash % length</span><br></pre></td></tr></table></figure><h4 id="123-如果初始hashmap的容量不是2的n次幂会做哪些操作"><a href="#1-2-3-如果初始hashmap的容量不是2的n次幂，会做哪些操作" class="headerlink" title="1.2.3 如果初始hashmap的容量不是2的n次幂，会做哪些操作"></a>1.2.3 如果初始hashmap的容量不是2的n次幂，会做哪些操作</h4><p>如果创建HashMap对象时，输入的数组长度是17,不是2的幂，HashMap通过移位运算和或运算得到<br>的肯定是2的幂次数,并且是离那个数最近的数字。例如如果容量是17，初始化容量就是返回32</p><p>下述源码就是初始化时指定大小和负载因子</p><p>jdk1.8源码操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span></span><br><span class="line"><span class="comment">  * capacity and load factor.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  initialCapacity the initial capacity</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  loadFactor      the load factor</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative</span></span><br><span class="line"><span class="comment">  *         or the load factor is nonpositive</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 如果初始容量小于0,抛出异常</span></span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                            initialCapacity);</span><br><span class="line">     <span class="comment">// 如果初始容量大于最大容量2^30,复制为最大容量。防止溢出</span></span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">         initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">     <span class="comment">// 负载因子小于0,报错提示</span></span><br><span class="line">     <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                            loadFactor);</span><br><span class="line">     <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">     <span class="comment">// threshold hashmap扩容阈值,注意这个值会发生变化。</span></span><br><span class="line">     <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回给定目标容量的2次幂大小。  </span></span><br><span class="line"><span class="comment">  * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">     n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">     n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">     n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">     n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">     n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">     <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上述代码第二个方法，就是操作</p><p>说明:<br>            由此可以看到，当在实例化HashMap实例时， 如果给定了initialCapacity(假设是17),由于HashMap的capacity必须都是2的幂次方，因此这个方法用于找到大于等于initialCapacity(假设是17)的最小的2的幂(initialCapacity如果就是2的幂次方，比如说16，则返回的还是这个数)。</p><p><strong>下面分析这段源码算法:</strong></p><h5 id="a首先为什么要对cap做减1操作"><a href="#a-首先-为什么要对cap做减1操作" class="headerlink" title="a.首先,为什么要对cap做减1操作"></a>a.首先,为什么要对cap做减1操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int n &#x3D; cap - 1</span><br></pre></td></tr></table></figure><p>如果cap已经是2的幂，此时又没有执行这个减1操作, 则执行完后面的几条无符号右移操作之后，返回的capacity将是这个cap的2倍。</p><p><strong>注意：</strong></p><p><strong>按位与运算</strong> : 相同的二进制数位上,都是1的时候，结果为1,否则为零。</p><p><strong>按位或运算</strong> ： 相同的二进制数位上,都是0的时候，结果为0,否则为1。</p><p>b.下面看看这几个无符号右移操作是干什么的  1是负数  0正数</p><p>​       <strong>第一种情况，容量传递的是0</strong></p><p>​            如果n这时为0了(经过了cap-1之后) , 则经过后面的几次无符号右移依然是0,最后返回的capacity是1 </p><p>​        **第二种情况，n不等于0 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">HashMap &lt;String,Object&gt; hashmap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">17</span>);</span><br><span class="line">cap = <span class="number">17</span></span><br><span class="line"><span class="keyword">int</span> n = cap - <span class="number">1</span> = <span class="number">16</span>;</span><br><span class="line">第一次无符号右移一位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">0000</span>    n=<span class="number">16</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">1000</span>    n &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1000</span>    <span class="number">24</span> ===&gt;n</span><br><span class="line"></span><br><span class="line">第二次无符号右移<span class="number">2</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1000</span>    n=<span class="number">24</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0110</span>    n &gt;&gt;&gt; <span class="number">2</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1110</span>    n = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">第三次无符号右移<span class="number">4</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1110</span>    n = <span class="number">30</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0001</span>    n &gt;&gt;&gt; <span class="number">4</span></span><br><span class="line">------------------------------------------------------ </span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n = <span class="number">31</span></span><br><span class="line"></span><br><span class="line">第四次无符号右移<span class="number">8</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>    n &gt;&gt;&gt; <span class="number">8</span></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"></span><br><span class="line">第五次无符号右移<span class="number">16</span>位</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>    n &gt;&gt;&gt; <span class="number">16</span></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0001</span> <span class="number">1111</span>    n=<span class="number">31</span></span><br><span class="line">执行最后一行代码操作,n&gt;<span class="number">0</span>且小于最大容量,返回<span class="number">31</span>+<span class="number">1</span> = <span class="number">32</span></span><br><span class="line"><span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>Hashmap最大容量的移动位置操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0010</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">2</span>^<span class="number">30</span></span><br><span class="line"><span class="keyword">int</span> n = cap-<span class="number">1</span>;</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n=<span class="number">2</span>^<span class="number">30</span> -<span class="number">1</span>   </span><br><span class="line"><span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    n&gt;&gt;&gt;<span class="number">2</span></span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">最后得到的值一定为</span><br><span class="line"><span class="number">0001</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    <span class="number">2</span>^<span class="number">29</span></span><br><span class="line">加一操作后为</span><br><span class="line"><span class="number">0010</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>    <span class="number">2</span>^<span class="number">30</span></span><br></pre></td></tr></table></figure><p>** 总结** ：如果容量大于MAXIMUM_CAPACITY  则取最大容量。不到2^30 的容量，通过移位操作后，会得到大于值的最小2的幂。如果当前值就是2的幂次方，返回当前值</p><h3 id="13-负载因子"><a href="#1-3-负载因子" class="headerlink" title="1.3 负载因子"></a>1.3 负载因子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负载因子</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><p>对于负载因子，如果没有特别需求，不要轻易进行更改，因为 JDK 自身的默认负载因子是非常符合通用场景的需求的（逼哥讲过大量研究得出）。如果确实需要调整，建议不要设置超过 0.75 的数值，因为会显著增加冲突，降低 HashMap 的性能。如果使用太小的负载因子，可能会导致更加频繁的扩容，增加无谓的开销，本身访问性能也会受影响。</p><ul><li><p>loadFactor越趋近于1,那么数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加。</p></li><li><p>loadFactor越小，也就是趋近于0，数组中存放的数据(entry)也就越少，也就越稀疏。</p></li></ul><p>如果希望链表尽可能少些。要提前扩容，有的数组空间有可能一-直没有存储数据。加载因子尽可能小一些。<br>举例:<br>1.加载因子是0.5。那么16 *  0.5 = 8  如果数组中满8个空间就扩容，这样会造成数组利用率太低了。<br>2.加载因子是0.9。那么16 *  0.9=14  如果数组中满14个空间就扩容，hash碰撞次数大大增加，那么这样就会导致链表有点多了。导致查找元素效率低。</p><p>所以既兼顾<strong>数组利用率</strong>又考虑<strong>链表长度不要太多</strong>，经过逼哥  大量测试0.75是最佳方案。</p><h3 id="14-链表转红黑树的阈值8"><a href="#1-4-链表转红黑树的阈值8" class="headerlink" title="1.4 链表转红黑树的阈值8"></a>1.4 链表转红黑树的阈值8</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment"> * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment"> * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment"> * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment"> * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment"> * shrinkage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><h4 id="问题1-为什么map桶中的节点个数要超过8才转红黑树"><a href="#问题1：-为什么Map桶中的节点个数要超过8才转红黑树" class="headerlink" title="问题1： 为什么Map桶中的节点个数要超过8才转红黑树"></a>问题1： 为什么Map桶中的节点个数要超过8才转红黑树</h4><p>源码注释中有这么一段描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    * Because TreeNodes are about twice the size of regular nodes, we</span><br><span class="line">     * use them only when bins contain enough nodes to warrant use</span><br><span class="line">     * (see TREEIFY_THRESHOLD). <span class="function">And when they become too <span class="title">small</span> <span class="params">(due to</span></span></span><br><span class="line"><span class="function"><span class="params">     * removal or resizing)</span> they are converted back to plain bins.  In</span></span><br><span class="line"><span class="function">     * usages with well-distributed user hashCodes, tree bins are</span></span><br><span class="line"><span class="function">     * rarely used.  Ideally, under random hashCodes, the frequency of</span></span><br><span class="line"><span class="function">     * nodes in bins follows a Poisson distribution</span></span><br><span class="line"><span class="function">     * <span class="params">(http://en.wikipedia.org/wiki/Poisson_distribution)</span> with a</span></span><br><span class="line"><span class="function">     * parameter of about 0.5 on average <span class="keyword">for</span> the <span class="keyword">default</span> resizing</span></span><br><span class="line"><span class="function">     * threshold of 0.75, although with a large variance because of</span></span><br><span class="line"><span class="function">     * resizing granularity. Ignoring variance, the expected</span></span><br><span class="line"><span class="function">     * occurrences of list size k <span class="title">are</span> <span class="params">(exp(-<span class="number">0.5</span>)</span> * <span class="title">pow</span><span class="params">(<span class="number">0.5</span>, k)</span> /</span></span><br><span class="line"><span class="function">     * <span class="title">factorial</span><span class="params">(k)</span>). The first values are:</span></span><br><span class="line"><span class="function">因为树节点的大小大约是普通节点的两倍，所以我们只在bin包含足够的节点时才使用树节点<span class="params">(参见</span></span></span><br><span class="line"><span class="function"><span class="params">TREEIFY_THRESHOLD)</span>。当它们变得太小<span class="params">(由于删除或调整大小)</span>时，就会被转换回普通的桶。在使用分布良好的用户</span></span><br><span class="line"><span class="function">hashcode时，很少使用树箱。理想情况下，在随机哈希码下，箱子中节点的频率服从泊松分布</span></span><br><span class="line"><span class="function"><span class="params">(http://en.wikipedia. org/wiki/Poisson. distr ibution)</span>,默认调整阈值为0.75,平均参数约为0.5,尽管由于调整粒度的差异很大。忽略方差，列表大小k的预期出现次数是<span class="params">(exp(-<span class="number">0.5</span>)</span>*<span class="title">pow</span><span class="params">(<span class="number">0.5</span>，k)</span>/<span class="title">factorial</span><span class="params">(k)</span>).</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">     *</span></span><br><span class="line"><span class="function">     * 0:    0.60653066</span></span><br><span class="line"><span class="function">     * 1:    0.30326533</span></span><br><span class="line"><span class="function">     * 2:    0.07581633</span></span><br><span class="line"><span class="function">     * 3:    0.01263606</span></span><br><span class="line"><span class="function">     * 4:    0.00157952</span></span><br><span class="line"><span class="function">     * 5:    0.00015795</span></span><br><span class="line"><span class="function">     * 6:    0.00001316</span></span><br><span class="line"><span class="function">     * 7:    0.00000094</span></span><br><span class="line"><span class="function">     * 8:    0.00000006</span></span><br><span class="line"><span class="function">     * more: less than 1 in ten million</span></span><br><span class="line"><span class="function">     *</span></span><br><span class="line"><span class="function">     * The root of a tree bin is normally its first node.  However,</span></span><br><span class="line"><span class="function">     * <span class="title">sometimes</span> <span class="params">(currently only upon Iterator.remove)</span>, the root might</span></span><br><span class="line"><span class="function">     * be elsewhere, but can be recovered following parent links</span></span><br><span class="line"><span class="function">     * <span class="params">(method TreeNode.root()</span>).</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>1.TreeNodes占用空间是普通Nodes的两倍，所以只有当bin包含足够多的节点时才会转成TreeNodes,而是否足够<br>多就是由TREEIFY_THRESHOLD（8）的值决定的。当bin中节点数变少时， 又会转成普通的bin。并且我们查看源码的时候发现，链表长度达到8(桶的数量要大于64)就转成红黑树，当长度降到6就转成普通bin.这样就解释了为什么不是一开始就将其转换为TreeNodes, 而是需要一定节点数才转为TreeNodes, 说白了就是权衡，空间和时间的权衡。</p><p>2.当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过<strong>理想情况</strong>下随机hashCode算法下所有bin中节点的分布频率会遵循<strong>泊松分布</strong>，我们可以看到，一个bin中链表长度达到8个元素的概率为0.00000006. 几乎是不<br>可能事件。所以，之所以选择8，不是随便决定的，而是根据概率统计决定的。</p><p>也就是说:选择8因为符合泊松分布，超过8的时候，概率已经非常小了，所以我们选择8这个数字。</p><p>3.泊松分布</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83.png?versionId=CAEQGxiBgIDF.fqw2hciIGMxZjNiNzhmMDM0NzQyZjQ5OGE0MWY2OGM5MTg5MzZi"></p><p>图片原文链接：</p><p><a href="http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html">http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html</a></p><h4 id="问题2基于jdk18hashmap引入了红黑树为什么一开始不按照红黑树存储-要等到链表长度大于8才转换"><a href="#问题2：基于JDK1-8-hashmap引入了红黑树，为什么一开始不按照红黑树存储。要等到链表长度大于8才转换" class="headerlink" title="问题2：基于JDK1.8,hashmap引入了红黑树，为什么一开始不按照红黑树存储。要等到链表长度大于8才转换"></a>问题2：基于JDK1.8,hashmap引入了红黑树，为什么一开始不按照红黑树存储。要等到链表长度大于8才转换</h4><p>​        JDK 1.8以前HashMap的实现是数组+链表，即使哈希函数取得再好，也很难达到元素百分百均匀分布。当HashMap中有大量的元素都存放到同一个桶中时，这个桶下有一条长长的链表， 这个时候HashMap就相当于一<br>个单链表，假如单链表有n个元素,遍历的时间复杂度就是O(n),完全失去了它的优势。针对这种情况，JDK 1.8<br>中引入了红黑树(查找时间复杂度为O(logn))来优化这个问题。当链表长度很小的时候， 即使遍历,速度也非<br>常快,但是当链表长度不断变长，肯定会对查询性能有一定的影响， 所以才需要转成树。</p><p>2.TreeNodes占用空间是普通Nodes的两倍，当元素较少时，增加多余的开销</p><h3 id="15-红黑树退化为链表的阈值"><a href="#1-5-红黑树退化为链表的阈值" class="headerlink" title="1.5 红黑树退化为链表的阈值"></a>1.5 红黑树退化为链表的阈值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment">  * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment">  * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment">  当桶(bucket) 上的结点数小于这个值时树转链表</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><h3 id="16-链表转红黑树时数组的长度最小值"><a href="#1-6-链表转红黑树时，数组的长度最小值" class="headerlink" title="1.6 链表转红黑树时，数组的长度最小值"></a>1.6 链表转红黑树时，数组的长度最小值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment">   * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment">   * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment">   * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><h3 id="17-table-用来初始化"><a href="#1-7-table-用来初始化" class="headerlink" title="1.7 table 用来初始化"></a>1.7 table 用来初始化</h3><p>table必须是2的幂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment"> * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment"> * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment"> * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>jdk8之前数组类型是Entry&lt;K,V&gt;类型。从jdk1.8之后是Node&lt;K,V&gt;类型。 都实现了一样的接口:Map.Entry&lt;K,V&gt;.负责存储键值对数据的。在jdk8以后的构造方法中，并没有对table这个成员变量进行初始化，tabl e的初始化被推<br>迟到了put方法中</p><h3 id="18-存放元素缓存"><a href="#1-8-存放元素缓存" class="headerlink" title="1.8 存放元素缓存"></a>1.8 存放元素缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Holds cached entrySet(). Note that AbstractMap fields are used</span></span><br><span class="line"><span class="comment">  * for keySet() and values().</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br></pre></td></tr></table></figure><h3 id="19-hashmap元素的个数"><a href="#1-9-HashMap元素的个数" class="headerlink" title="1.9 HashMap元素的个数"></a>1.9 HashMap元素的个数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><h3 id="110-用来记录hashmap的修改次数"><a href="#1-10-用来记录HashMap的修改次数" class="headerlink" title="1.10 用来记录HashMap的修改次数"></a>1.10 用来记录HashMap的修改次数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of times this HashMap has been structurally modified</span></span><br><span class="line"><span class="comment"> * Structural modifications are those that change the number of mappings in</span></span><br><span class="line"><span class="comment"> * the HashMap or otherwise modify its internal structure (e.g.,</span></span><br><span class="line"><span class="comment"> * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class="line"><span class="comment"> * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class="line"><span class="comment">    结构修改是指改变HashMap中的映射数量或修改其内部结构(例如，rehash)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br></pre></td></tr></table></figure><h3 id="111-要调整大小的下一个大小值容量负载系数"><a href="#1-11-要调整大小的下一个大小值（容量-负载系数）" class="headerlink" title="1.11 要调整大小的下一个大小值（容量*负载系数）"></a>1.11 要调整大小的下一个大小值（容量*负载系数）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The next size value at which to resize (capacity * load factor).</span></span><br><span class="line"><span class="comment"> * 要调整大小的下一个大小值（容量*负载系数）。 数组长度唱过临界值时会进行扩容操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// (The javadoc description is true upon serialization.</span></span><br><span class="line"><span class="comment">// Additionally, if the table array has not been allocated, this</span></span><br><span class="line"><span class="comment">// field holds the initial array capacity, or zero signifying</span></span><br><span class="line"><span class="comment">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br></pre></td></tr></table></figure><h3 id="112-解决hash冲突的常用方法有"><a href="#1-12-解决hash冲突的常用方法有" class="headerlink" title="1.12 解决hash冲突的常用方法有"></a>1.12 解决hash冲突的常用方法有</h3><p> <strong>1.开放定址法</strong><br>基本思想是：当关键字key的哈希地址p=H（key）出现冲突时，以p为基础，产生另一个哈希地址p1，如果p1仍然冲突，再以p为基础，产生另一个哈希地址p2，…，直到找出一个不冲突的哈希地址pi ，将相应元素存入其中。</p><p><strong>2.再哈希法</strong><br>这种方法是同时构造多个不同的哈希函数：<br>Hi=RH1（key）  i=1，2，…，k<br>当哈希地址Hi=RH1（key）发生冲突时，再计算Hi=RH2（key）……，直到冲突不再产生。这种方法不易产生聚集，但增加了计算时间。</p><p><strong>3.链地址法</strong><br>这种方法的基本思想是将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。</p><p>hashmap解决hash冲突就是采用链地址法</p><p><strong>4.建立公共溢出区</strong><br>这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表。  </p><h2 id="2hashmap的方法介绍"><a href="#2-hashmap的方法介绍" class="headerlink" title="2.hashmap的方法介绍"></a>2.hashmap的方法介绍</h2><p><strong>Node节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Basic hash bin node, used for most entries.  (See below for</span></span><br><span class="line"><span class="comment">  * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">     <span class="keyword">final</span> K key;</span><br><span class="line">     V value;</span><br><span class="line">     Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">     Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">         <span class="keyword">this</span>.hash = hash;</span><br><span class="line">         <span class="keyword">this</span>.key = key;</span><br><span class="line">         <span class="keyword">this</span>.value = value;</span><br><span class="line">         <span class="keyword">this</span>.next = next;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>TreeNode节点</strong>部分源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Entry for Tree bins. Extends LinkedHashMap.Entry (which in turn</span></span><br><span class="line"><span class="comment">  * extends Node) so can be used as extension of either regular or</span></span><br><span class="line"><span class="comment">  * linked node.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">     TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">     TreeNode&lt;K,V&gt; left;</span><br><span class="line">     TreeNode&lt;K,V&gt; right;</span><br><span class="line">     TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">     <span class="keyword">boolean</span> red;</span><br><span class="line">     TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">         <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Returns root of tree containing this node.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="keyword">this</span>, p;;) &#123;</span><br><span class="line">             <span class="keyword">if</span> ((p = r.parent) == <span class="keyword">null</span>)</span><br><span class="line">                 <span class="keyword">return</span> r;</span><br><span class="line">             r = p;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="21-hash值计算方法-hash"><a href="#2-1-hash值计算方法-hash" class="headerlink" title="2.1 hash值计算方法 hash()"></a>2.1 hash值计算方法 hash()</h3><p>jdk1.8 源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算hash值的方法</span></span><br><span class="line"><span class="comment"> * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span><br><span class="line"><span class="comment"> * to lower.  Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment"> * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment"> * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment"> * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment"> * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment"> * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment"> * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment"> * are already reasonably distributed (so don&#x27;t benefit from</span></span><br><span class="line"><span class="comment"> * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment"> * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment"> * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment"> * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment"> * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment"> 计算 key.hashCode() 并将散列的较高位（异或）传播到较低位。由于该表使用二次幂掩码，因此仅在当前掩码之上位变化的散列集将始终发生冲突。 （众所周知的例子是在小表中保存连续整数的浮点键集。）所以我们应用一个变换，将高位的影响向下传播。位扩展的速度、效用和质量之间存在折衷。因为许多常见的散列集已经合理分布（因此不会从扩展中受益），并且因为我们使用树来处理 bin 中的大量冲突，所以我们只是以最便宜的方式对一些移位的位进行异或以减少系统损失，以及合并最高位的影响，否则由于表边界而永远不会在索引计算中使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先研究下key的哈希值是如何计算出来的。key的哈希值是通过上述方法计算出来的。</p><p>可以看到当key等于null的时候也是有哈希值的，返回的是0.</p><p>这个哈希方法首先计算出key的hashCode赋值给h,然后与h无符号右移16位后的二进制进行按位异或得到最后的<br>hash值。计算过程如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br></pre></td></tr></table></figure><p>这里其实就是把得到的hashcode转化为32位二进制，然后他的高16位和低16位做了一个异或的操作</p><p>举个例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&amp; (按位与运算) : 运算规则:相同的二进制数位上,都是<span class="number">1</span>的时候，结果为<span class="number">1</span>,否则为零。</span><br><span class="line">^ (按位异或运算) :运算规则:相同的二进制数位上，数字相同，结果为<span class="number">0</span>，不同为<span class="number">1.</span></span><br><span class="line">代码中通过这个hash &amp; (n-<span class="number">1</span>) 得到存储元素的位置</span><br><span class="line">p = tab[i = (n - <span class="number">1</span>) &amp; hash]</span><br><span class="line"></span><br><span class="line">(h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">假设这里的h = key.hashCode()得到的值为</span><br><span class="line"><span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span>    h</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span>    h &gt;&gt;&gt; <span class="number">16</span></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>   按位异或运算后得到的hash值</span><br><span class="line"></span><br><span class="line">此时数据长度n假设为默认的<span class="number">16</span>,那么这个key存放在table中位置为i = (n - <span class="number">1</span>) &amp; hash</span><br><span class="line"><span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>      hash</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算</span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>     索引位置为<span class="number">0</span> </span><br><span class="line"></span><br><span class="line">在存储一个key,假设key的hashcode高位变化较大</span><br><span class="line"><span class="number">1000</span> <span class="number">1000</span> <span class="number">0001</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0000</span>      hash值</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>      n-<span class="number">1</span> <span class="number">15</span>   &amp;运算</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>      索引位置为<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果当n的值,即数组长度很小时，假设是默认的16的话,这样的值和hashCode()直接做按位与操作，实际上只使用了哈希值的后4位。如果当哈希值的高位变化很大，低位变化很小,这样就很容易造成哈希冲突了，所以这里把高低位都利用起来,从而解决了这个问题。也是一种为了降低hash冲突的优化手段</p><p>​           为什么这里需要将高位数据移位到低位进行异或运算呢？这是因为有些数据计算出的哈希值差异主要在高位，而 HashMap 里的哈希寻址是忽略容量以上的高位的，那么这种处理就可以有效避免类似情况下的哈希碰撞。</p><h3 id="22-hashmap的put方法"><a href="#2-2-hashmap的put-方法" class="headerlink" title="2.2 hashmap的put()方法"></a>2.2 hashmap的put()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value  如果为true表示不更改现有的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode. 表示table为创建状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// p表示当前的节点。n表示表的长度</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// hashmap的table表的初始化操作,是在这里进行的。第一次执行的时候,会先在这里进行初始化操作</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 通过上述hash()方法得到hash值和数组长度进行按位与运算，得到元素的存储位置，如果table表的位置为空，就直接进行存储操作</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 产生了hash碰撞,走下述代码</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 这里的p的值是上面p = tab[i = (n - 1) &amp; hash ,if语句体虽然没有执行，但是这一段代码是否执行的,判断hash值和key值</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 判断当前table中的p节点是不是树节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 遍历链表的,取下一个位置存放新增的元素,这里采用的是尾插法，a.横竖都要遍历链表的长度是否大于树化的阈值，所以遍历的过程中，就直接插入元素了b.可能的因素就是遍历的过程中要比较key值是否相同，和jdk1.7有些不同</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">//如果下一个位置为空,就直接连接在链表后面</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 如果链表的长度大于8个时,就进行链表转红黑树的操作</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果链表的下一个元素不为空,比较hash值和key值</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// key值存在,就替换value值。新插入的元素的value值,替换原来这个key的value值</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">     <span class="comment">// hashmap的键值对个数大于扩容的阈值,就进行扩容操作</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图示：桶长度（bucket) 为8的数组</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/Jdk1.8%E6%9C%AA%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%BA%A2%E9%BB%91%E6%A0%91%E4%B9%8B%E5%89%8D%E7%9A%84%E5%BD%A2%E6%80%81.png?versionId=CAEQGxiBgMDP.fqw2hciIDQzYmNkYTQzZTNhMDQ4MmZhZDQyNjI1ZjZjYjJiOGRm"></p><h3 id="25-treeifybin"><a href="#2-5-TreeifyBin" class="headerlink" title="2.5 TreeifyBin()"></a>2.5 TreeifyBin()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment"> * table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment"> 替换指定哈希表的索引桶中所有的连接节点，除非表太小，否则将修改大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">/* 如果元素数组为空 或者 数组长度小于 树结构化的最小阈值（MIN_TREEIFY_CAPACITY=64） ,就进行扩容操作.对于这个值可以理解为：如果元素数组长度小于这个值，没有必要去进行结构转换.目的是</span></span><br><span class="line"><span class="comment">       如果数组很小,那么转红黑树,遍历效率要低一些，这时进行扩容操作，重新计算哈希值，链表的长度有可能就变短了。数据会放入到数组中，这样相对来说效率会高一些</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">        <span class="comment">//如果元素数组长度已经大于等于了 MIN_TREEIFY_CAPACITY，那么就有必要进行结构转换了</span></span><br><span class="line">        <span class="comment">// 根据hash值和数组长度进行取模运算后，得到链表的首节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//定义几个变量，hd代表头节点，tl代表尾节点</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="comment">//先把e节点转成TreeNode类型，并赋值给p</span></span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">              <span class="comment">//如果尾节点tl为空，则说明还没有根节点，试想下，这时元素数目都超过8个了，还能没有尾节点么，所以没有尾节点只能说明还没设置根节点</span></span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">             <span class="comment">//设置根节点，把p赋值给根节点hd</span></span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">//把tl设置为p的前一节点</span></span><br><span class="line">                p.prev = tl;</span><br><span class="line">                 <span class="comment">//把p设置为tl的后继节点，这两步其实就是我指向你，你指向我的关系，为了形成双向链表</span></span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把首节点设置成p后，把p赋值给尾节点tl，然后会再取链表的下一个节点，转成TreeNode类型后再赋值给p，如此循环</span></span><br><span class="line">            tl = p;</span><br><span class="line">              <span class="comment">//取下一个节点，直到下一个节点为空，也就代表这链表遍历好了</span></span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">         <span class="comment">//用新生成的双向链表替代旧的单向链表，其实就是把这个数组对应的位置重新赋值成新双向链表的首节点</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bin 的数量大于 TREEIFY_THRESHOLD 时：如果容量小于 MIN_TREEIFY_CAPACITY，只会进行简单的扩容。如果容量大于 MIN_TREEIFY_CAPACITY ，则会进行树化改造。</p><p>本质上这是个<strong>安全问题</strong>。因为在元素放置过程中，如果一个对象哈希冲突，都被放置到同一个桶里，则会形成一个链表，我们知道链表查询是线性的，会严重影响存取的性能。</p><p>最后一行才是转红黑树的操作</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/TreeNode%E8%8A%82%E7%82%B9.png?versionId=CAEQGxiBgIDP.fqw2hciIDgyYmM3ZWZlNzAyYTRiZTliZWU0YTdiZWU5NzNhMGYy"></p><h3 id="26-treeify"><a href="#2-6-Treeify" class="headerlink" title="2.6 Treeify()"></a>2.6 Treeify()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">      </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Forms tree of the nodes linked from this node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义树的根节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//  遍历链表，x指向当前节点、next指向下一个节点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">        x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 如果根节点为空，则把当前节点当做根节点。根据红黑树性质，根节点一定为黑色。</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.parent = <span class="keyword">null</span>;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            root = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 根节点已经存在的情况</span></span><br><span class="line">            <span class="comment">// 取得当前节点和当前节点的hash值</span></span><br><span class="line">            K k = x.key;</span><br><span class="line">            <span class="keyword">int</span> h = x.hash;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 从根节点遍历。这一步主要就是为了，判断当前节点应该在树的左侧还是右侧</span></span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> dir, ph;  <span class="comment">// dir代表方向  ph表示树节点的hash值。即TreeNodehash值</span></span><br><span class="line">                K pk = p.key;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h) <span class="comment">// 如果当前树节点hash值 大于 当前链表节点的hash值</span></span><br><span class="line">                    dir = -<span class="number">1</span>;  <span class="comment">//  标识当前链表节点会放到当前树节点的左侧</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line">                <span class="comment">// 保存当前树节点</span></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="comment">// 判断如果dir&lt;=0 说明当前节点的hash值小于当前树节点的hash值。需要把当前节点放置在当前树节点的左侧</span></span><br><span class="line">                <span class="comment">// 判断如果dir&gt;0 说明当前节点的hash值大于当前树节点的hash值。 需要把当前节点放置在当前树节点的右侧</span></span><br><span class="line">                <span class="comment">// p的左右节点存在不为空的情况,p节点就是当前遍历的树节点，说明该节点还有子节点。继续循环查找当前节点x的应该在哪里爸爸节点下面插入元素</span></span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    <span class="comment">// 元素插入之后，需要进行红黑树的自平衡操作,重新确定根节点的值</span></span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="27-红黑树自平衡操作"><a href="#2-7-红黑树自平衡操作" class="headerlink" title="2.7 红黑树自平衡操作"></a>2.7 红黑树自平衡操作</h3><h4 id="271balanceinsertion"><a href="#2-71balanceInsertion" class="headerlink" title="2.71balanceInsertion()"></a>2.71balanceInsertion()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 插入节点是黑色</span></span><br><span class="line">    x.red = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// xp为父节点  xpp：为爷爷节点   xxpl是爷爷的左节点  xppr：是爷爷节点的右节点</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">        <span class="comment">// 当前节点的父节点不存在,当前节点就是根节点</span></span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 父节点是黑色。当前节点可以直接插入,所以父节点就是根节点。   父节点如果是黑色，则爷爷节点一定不存在</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// 如果父节点是爷爷节点的左节点    </span></span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">            <span class="comment">// 如果爷爷节点的右节点不为空 同时是红节点</span></span><br><span class="line">            <span class="comment">//  a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果父节点是爷爷节点的左节点   插入节点时爷爷节点的右节点</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                    <span class="comment">// a.已爸爸为节点进行一次左旋操作,得到(LL双红的情况 4.2.1) 然后指定爸爸节点为当前节点,执行下一轮的操作</span></span><br><span class="line">                    root = rotateLeft(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// a.将爸爸节点染成黑色 b.将爷爷染成红色 c.然后已爷爷节点进行右旋操作</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 叔叔节点不为空,同事叔叔节点为红色</span></span><br><span class="line">            <span class="comment">// a.将爸爸和叔叔节点变成黑色  b.将爷爷节点变成红色  c.并且将爷爷节点当成当前节点,进行下一轮的处理</span></span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 插入节点为其父节点的左子节点(RL情况) a.以爸爸节点进行一次右旋,得到RR双红的场景( RR情况 4.3.1).然后指定爸爸节点为当前节点,进行下一轮的操作</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    <span class="comment">// 平衡过后,重新定义爷爷节点的变量值</span></span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 插入节点为其父节点的右子节点(RR情况) a.将爸爸染成黑色节点  b.将爷爷染成红色 c.然后已爷爷节点进行左旋操作</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123; </span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="272-红黑树左旋rotateleft"><a href="#2-72-红黑树左旋rotateLeft" class="headerlink" title="2.72 红黑树左旋rotateLeft"></a>2.72 红黑树左旋rotateLeft</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Red-black tree methods, all adapted from CLR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">            rl.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            (root = r).red = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">            pp.left = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = r;</span><br><span class="line">        r.left = p;</span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="273-红黑树右旋rotateright"><a href="#2-73-红黑树右旋rotateRight" class="headerlink" title="2.73 红黑树右旋rotateRight"></a>2.73 红黑树右旋rotateRight</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line">            lr.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            (root = l).red = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">            pp.right = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.left = l;</span><br><span class="line">        l.right = p;</span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换后的形态大约是</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E8%BD%AC%E6%8D%A2%E5%90%8E%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91%E7%BB%93%E6%9E%84.png?versionId=CAEQGxiBgIC2.fqw2hciIGI4M2M2ZTIzOTYzYTQ3ZjI4YzY5YjBhNzBjOGNhNDU5"></p><h3 id="28-扩容resize-方法"><a href="#2-8-扩容resize-方法" class="headerlink" title="2.8 扩容resize() 方法"></a>2.8 扩容resize() 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment">     * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment">     * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment">     * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment">     * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment">     * 初始化或者扩容表的长度为2倍</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        <span class="comment">// 旧表，第一次执行时，oldTabl为空</span></span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="comment">// 表的容量</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="comment">// 要调整大小的下一个大小值，默认是0</span></span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果扩容前旧表的容量大于阈值，就设置为Integer的最大值</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;  <span class="comment">// 如果旧表的长度左移一位还小于表的最大容量，就扩容表的长度为旧表的二倍，域值也为原来的一倍</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;   </span><br><span class="line">            <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            <span class="comment">// 初始化新容器的大小，必须是2的幂，默认是16。表刚创建的时候，会执行到这里</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            <span class="comment">// 默认的阈值是12 负载因子0.75* 默认的初始化容量16</span></span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新table表扩容时的的阈值</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        <span class="comment">// 假设一个容量为16的节点。newCap的值为16 下一次扩容时，容量为32扩大一倍</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 移动旧表的数据到新表中,移动的扩容中,需要重新的进行hash操作</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        <span class="comment">// 链表节点的处理  head是头节点  tail是尾部节点</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                         <span class="comment">// 获取当前节点的下一个节点，每一次循环e值会更新</span></span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 第一次slot的节点是头节点也是尾结点</span></span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 下一个节点设置为空</span></span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="comment">// slot节点的数+旧表的容量 存储新值</span></span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回扩容后新表的长度</span></span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>依据 resize 源码，不考虑极端情况（容量理论最大极限由 MAXIMUM_CAPACITY 指定，数值为 1&lt;&lt;30，也就是 2 的 30 次方），我们可以归纳为：阈值等于（负载因子）x（容量），如果构建 HashMap 的时候没有指定它们，那么就是依据相应的默认常量值。阈值通常是以倍数进行调整 （newThr = oldThr &lt;&lt; 1），我前面提到，根据 putVal 中的逻辑，当元素个数超过阈值大小时，则调整 Map 大小。扩容后，需要将老的数组中的元素重新放置到新的数组，这是扩容的一个主要开销来源。</p><h4 id="241-hashmap扩容的条件"><a href="#2-41-hashmap扩容的条件" class="headerlink" title="2.41 hashmap扩容的条件"></a>2.41 hashmap扩容的条件</h4><p>1.当HashMap中的元素个数超过 <code>数组长度 * loadFactor(负载因子)</code>时,就会进行数组扩容,扩容为原来的2倍</p><p>例如：数组长度默认是16，负载因子默认0.75 ，即当数组中 元素个数大于12的时候，就会进行扩容，数组长度变为32</p><p>2.在链表转换红黑树的时候，如果桶的数量不足64.也会进行扩容操作 </p><h4 id="242-扩容后的元素怎么存储"><a href="#2-42-扩容后的元素怎么存储" class="headerlink" title="2.42 扩容后的元素怎么存储"></a>2.42 扩容后的元素怎么存储</h4><p>进行扩容，会伴随着一次重新hash分配，并且会遍历hash表中所有的元素,是非常耗时的。在编写程序中,要尽<br>量避免resize。HashMap在进行扩容时，使用的rehash方式非常巧妙，因为每次扩容都是翻倍，与原来计算的(n-1)&amp;hash的结果相比，只是多了一个bit位，所以节点要么就在<strong>原来的位置，</strong>要么就被分配到**”原位置+旧容量”**这个位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&amp; (按位与运算) : 运算规则:相同的二进制数位上,都是<span class="number">1</span>的时候，结果为<span class="number">1</span>,否则为零。</span><br><span class="line">^ (按位异或运算) :运算规则:相同的二进制数位上，数字相同，结果为<span class="number">0</span>，不同为<span class="number">1.</span></span><br><span class="line">代码中通过这个hash &amp; (n-<span class="number">1</span>) 得到存储元素的位置</span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span>   n = <span class="number">16</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>   n-<span class="number">1</span> = <span class="number">15</span></span><br><span class="line">假设hashcode生成的值为 如下<span class="number">2</span>个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0111</span>   hash(key1)</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0001</span> <span class="number">0111</span>   hash(key2)    扩容后的hash值,比 扩容前多了个比特位</span><br><span class="line"></span><br><span class="line">计算开始</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0000</span>   n = <span class="number">16</span> 扩容前</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span>   n-<span class="number">1</span> = <span class="number">15</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">0111</span>   hash(key1)</span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0111</span>    hash &amp; (n-<span class="number">1</span>) = <span class="number">7</span> 索引位置为<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0010</span> <span class="number">0000</span>   n=<span class="number">32</span> 扩容一倍后</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1111</span>   n-<span class="number">1</span> = <span class="number">31</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0001</span> <span class="number">0111</span>   hash(key2)</span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">0111</span>   hash &amp; (n-<span class="number">1</span>) = <span class="number">23</span>  索引位置为<span class="number">7</span>+<span class="number">16</span>(旧的数组容量)</span><br></pre></td></tr></table></figure><p>结论：计算新的索引，高位是0那么存储到<strong>原来索引</strong>位置，如果高位是1那么存储到<strong>原来索引+旧的数组长度</strong>位置。因此，我们在扩充HashMap的时候，不需要重新计算hash,只需要看看原来的hash值新增的那个bit是1还是0就<br>可以了，是0的话索引没变,是1的话索引变成原索引+oldCap(原位置+旧容量)。正是因为这样巧妙的rehash方式，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1是是随机的，在resize的过程中保证 了rehash之后每个桶上的节点数一定小于等于原来桶上的节点数,保证了rehash之后不会出现更严重的hash冲突,均匀的把之前的冲突的节点分散到新的桶中了。</p><h4 id="243-hashmap容量初始化"><a href="#2-4-3-hashmap容量初始化" class="headerlink" title="2.4.3 hashmap容量初始化"></a>2.4.3 hashmap容量初始化</h4><p>如果我们确切的知道我们有多少键值对需要存储，那么我们在初始化HashMap的时候就应该指定它的容量，<br>防止HashMap自动扩容，影响使用效率。</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C.png?versionId=CAEQGxiBgMDZ.fqw2hciIGNkYzZjZTM0NzAzMzQxMDM4MTUxN2MzY2RjN2E1NmRl"></p><h4 id="244-多线程下hashmap造成cpu100的问题"><a href="#2-4-4-多线程下hashmap造成cpu100-的问题" class="headerlink" title="2.4.4 多线程下hashmap造成cpu100%的问题"></a>2.4.4 多线程下hashmap造成cpu100%的问题</h4><p>hashmap不同于hashtable.他是线程不安全的，当多线程并发扩容时就可能会出现环形引用的问题，从而导致死循环的出现，一直死循环就会导致 CPU 运行 100%，但是Oracle认为这不是错误,是因为Hashmap本身就是线程不安全的。Oracle官网的连接如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;bugs.java.com&#x2F;bugdatabase&#x2F;view_bug.do?bug_id&#x3D;6423457</span><br></pre></td></tr></table></figure><p>并提供给了我们，可以替换的为jdk1.5之后的 <code>ConcurrentHashMap</code>   或者使用性能较差的Hashtable 或 synchronizedMap 包装器</p><p>java并发包的作者原文评论如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Doug Lea writes:</span><br><span class="line"></span><br><span class="line">&quot;This is a classic symptom of an incorrectly synchronized use of</span><br><span class="line">HashMap. Clearly, the submitters need to use a thread-safe</span><br><span class="line">HashMap. If they upgraded to Java 5, they could just use</span><br><span class="line">ConcurrentHashMap. If they can&#39;t do this yet, they can use</span><br><span class="line">either the pre-JSR166 version, or better, the unofficial backport</span><br><span class="line">as mentioned by Martin. If they can&#39;t do any of these, they can</span><br><span class="line">use Hashtable or synchhronizedMap wrappers, and live with poorer</span><br><span class="line">performance. In any case, it&#39;s not a JDK or JVM bug.&quot;</span><br><span class="line"></span><br><span class="line">I agree that the presence of a corrupted data structure alone</span><br><span class="line">does not indicate a bug in the JDK.</span><br></pre></td></tr></table></figure><p>为什么并发的时候，会导出环状呢，简单分析下</p><p>这个cpu100%的问题，实际工作中上我也没有遇到过，参考了下网上的文章：</p><p>原文链接：<a href="https://blog.csdn.net/hao134838/article/details/107220317/">https://blog.csdn.net/hao134838/article/details/107220317/</a></p><p>JDK1.7的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e.next; <span class="comment">// 线程一执行此处</span></span><br><span class="line">            <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">            e.next = newTable[i];</span><br><span class="line">            newTable[i] = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/jdk1.7%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8.png?versionId=CAEQGxiBgMDS.fqw2hciIGNhM2Y4YTk2ZDZiMjRhODhhYzQ2NDAyNWUyYWM5NGQ4"></p><p>假设 HashMap 的默认大小为 2，HashMap 本身中有一个键值 key(5)，我们再使用两个线程：t1 添加 key(3)，t2 添加 key(7)，首先两个线程先把 key(3) 和 key(7) 都添加到 HashMap 中，此时因为 HashMap 的长度不够用了就会进行扩容操作，然后这时线程 t1 在执行到 Entry&lt;K,V&gt; next = e.next 时，此时线程t1中的e节点指向了key(3),然后next指针指向了key(7)。然后让出了cpu的执行权。对于线程t2来说，添加key(7) 的时候，会进行扩容操作，扩容的时候，会再次进行rehash操作，重新计算位置，然后把链表的位置更改为了e节点为key7，他的next指向key3.此时t1线程又重新获取到了cpu的执行权。对于t1线程来说，key(3)指向的是key(7)，由于线程t2把key(7)的下一个指向变成了key(3)，对于t1来说，key(7) 的next就是key(3) .这样就造成key(3)和key(7)的循环引用问题，而死循环就是导致cpu100%的原因</p><h4 id="245-hashmap的size不准确造成的诡异问题"><a href="#2-4-5-hashmap的size不准确造成的诡异问题" class="headerlink" title="2.4.5 hashmap的size不准确造成的诡异问题"></a>2.4.5 hashmap的size不准确造成的诡异问题</h4><p>略</p><h2 id="3hashtable-hashmap-treemap不同"><a href="#3-HashTable、HashMap、TreeMap不同" class="headerlink" title="3.HashTable、HashMap、TreeMap不同"></a>3.HashTable、HashMap、TreeMap不同</h2><p><strong>Hashtable</strong> 是早期 Java 类库提供的一个哈希表实现，本身是同步的，不支持 null 键和值，由于同步导致的性能开销，所以已经很少被推荐使用。</p><p><strong>HashMap</strong> 是应用更加广泛的哈希表实现，行为上大致上与 HashTable 一致，主要区别在于 HashMap 不是同步的，支持 null 键和值等。通常情况下，HashMap 进行 put 或者 get 操作，可以达到常数时间的性能，所以它是绝大部分利用键值对存取场景的首选</p><p><strong>TreeMap</strong> 则是基于红黑树的一种提供顺序访问的 Map，和 HashMap 不同，它的 get、put、remove 之类操作都是 O（log(n)）的时间复杂度，具体顺序可以由指定的 Comparator 来决定，或者根据键的自然顺序来判断。</p><p>类图如下：</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/Java%E5%9F%BA%E7%A1%80/HashMap/images/hashmap%E7%B1%BB%E5%9B%BE.png?versionId=CAEQGxiBgIDQ.fqw2hciIGU2NjViYzk4Y2IwMjRmZmJiZTQ1MjJhMDZiZjcyMjE5"></p><p>HashMap 的性能表现非常依赖于哈希码的有效性，请务必掌握 hashCode 和 equals 的一些基本约定</p><p>比如：</p><ul><li>equals 相等，hashCode 一定要相等。</li><li>重写了 hashCode 也要重写 equals。</li><li>hashCode 需要保持一致性，状态改变返回的哈希值仍然要一致。</li><li>LinkedHashMap 通常提供的是遍历顺序符合插入顺序，它的实现是通过键值对维护一个双向链表。</li></ul><p>对于 TreeMap，它的整体顺序是由键的顺序关系决定的，通过 Comparator 或 Comparable（自然顺序）来决定。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jdk18-hashmap源码简单讲解&quot;&gt;&lt;a href=&quot;#JDK1-8-HashMap源码简单讲解&quot; class=&quot;headerlink&quot; title=&quot;JDK1.8 HashMap源码简单讲解&quot;&gt;&lt;/a&gt;JDK1.8 HashMap源码简单讲解&lt;/h1&gt;&lt;h</summary>
      
    
    
    
    
    <category term="Java基础" scheme="https://lswisdom.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>证书生成方式</title>
    <link href="https://lswisdom.github.io/posts/221454774/"/>
    <id>https://lswisdom.github.io/posts/221454774/</id>
    <published>2021-07-25T09:43:36.000Z</published>
    <updated>2021-08-15T14:34:39.087Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为服务器生成证书"><a href="#为服务器生成证书" class="headerlink" title="为服务器生成证书"></a>为服务器生成证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -alias tomcat -keyalg RSA -keystore E:\download\tomcat.keystore -validity 36500</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Window/1618128025572.png?versionId=CAEQExiBgMDmlp301hciIDI4OThjYmZjNzFlODQxMDY4MmIwZDNjODkyMzJlMzM3" alt="1618128025572"></p><h3 id="为客户端生成证书"><a href="#为客户端生成证书" class="headerlink" title="为客户端生成证书"></a>为客户端生成证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -alias mykey -keyalg RSA -storetype PKCS12 -keystore E:\download\mykey.p12</span><br></pre></td></tr></table></figure><p>会生成一个客户端的证书</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Window/1618128094997.png?versionId=CAEQExiBgMC18p701hciIDA4OWM2ZmZiYTgxODQyMDk5YmVlNTc0ZDg0OGU2Mzcy" alt="1618128094997"></p><h3 id="让服务器信任客户端证书"><a href="#让服务器信任客户端证书" class="headerlink" title="让服务器信任客户端证书"></a>让服务器信任客户端证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -export -alias mykey -keystore E:\downlaod\mykey.p12 -storetype PKCS12 -storepass 123456 -rfc -file E:\downlaod\mykey.cer</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Window/1618126654702.png?versionId=CAEQExiBgMC2nqD01hciIDRiNjdjZTlkNTU4MjQxZDhiMWFiYzY1MjI1NmIwYzNj" alt="1618126654702"></p><h3 id="将该文件导入服务器的证书库添加一个信任证书命令"><a href="#将该文件导入服务器的证书库，添加一个信任证书命令" class="headerlink" title="将该文件导入服务器的证书库，添加一个信任证书命令"></a>将该文件导入服务器的证书库，添加一个信任证书命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -import -v -file E:\download\mykey.cer -keystore E:\download\tomcat.keystore</span><br></pre></td></tr></table></figure><h3 id="查看证书命令"><a href="#查看证书命令：" class="headerlink" title="查看证书命令："></a>查看证书命令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -keystore E:\download\tomcat.keystore</span><br></pre></td></tr></table></figure><h3 id="让客户端信任服务器证书"><a href="#让客户端信任服务器证书" class="headerlink" title="让客户端信任服务器证书"></a>让客户端信任服务器证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -keystore E:\download\tomcat.keystore -export -alias tomcat -file E:\download\tomcat.cer(tomcat为你设置服务器端的证书名)</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Window/1618128547443.png?versionId=CAEQExiBgIDH8qH01hciIGUzZTcwMzcwYTA0NjQ3ZTQ4N2FmNzcwZjk1ZTUxOTUy" alt="1618128547443"></p><h3 id="配置tomcat的服务器"><a href="#配置tomcat的服务器" class="headerlink" title="配置tomcat的服务器"></a>配置tomcat的服务器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">clientAuth</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sslProtocol</span>=<span class="string">&quot;TLS&quot;</span></span></span><br><span class="line"><span class="tag">  </span></span><br><span class="line"><span class="tag">  <span class="attr">keystoreFile</span>=<span class="string">&quot;E:\download\tomcat.keystore&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keystorePass</span>=<span class="string">&quot;123456&quot;</span> </span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h3 id="把cas里面的证书位置替换一下"><a href="#把cas里面的证书位置替换一下" class="headerlink" title="把cas里面的证书位置替换一下"></a>把cas里面的证书位置替换一下</h3><p>cas/WEB-INF/classes/application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.ssl.key-store&#x3D;E:\download\tomcat.keystore</span><br></pre></td></tr></table></figure><p>在e:download文件夹中执行cmd 会生成一个证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -import -alias tomcat -keystore cacerts -file tomcat.cer </span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Window/1618129421310.png?versionId=CAEQExiBgMCR0qP01hciIDdiMDFmZTU3YzQ0YzRjNmJhZjk4N2NhNmNiZjBjNmU4" alt="1618129421310"></p><p>复制该文件，并替换java目录下面的证书文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.8.0_251\jre\lib\security</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;为服务器生成证书&quot;&gt;&lt;a href=&quot;#为服务器生成证书&quot; class=&quot;headerlink&quot; title=&quot;为服务器生成证书&quot;&gt;&lt;/a&gt;为服务器生成证书&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Centos7安装Redis</title>
    <link href="https://lswisdom.github.io/posts/2813726945/"/>
    <id>https://lswisdom.github.io/posts/2813726945/</id>
    <published>2021-07-25T09:17:42.000Z</published>
    <updated>2021-08-15T14:33:42.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-centos7单节点安装redis"><a href="#一、CentOS7单节点安装Redis" class="headerlink" title="一、CentOS7单节点安装Redis"></a>一、CentOS7单节点安装Redis</h2><p>注意：安装redis需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装,否则编译时会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install make cmake gcc gcc-c++</span><br></pre></td></tr></table></figure><h3 id="1-下载redis安装包"><a href="#1-下载redis安装包" class="headerlink" title="1. 下载redis安装包"></a>1. 下载redis安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf redis-5.0.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="3进入redis目录下编译"><a href="#3-进入redis目录下编译" class="headerlink" title="3.进入redis目录下编译"></a>3.进入redis目录下编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Redis/redis%E7%BC%96%E8%AF%91.png?versionId=CAEQExiBgIC.lvfz1hciIGQ4NmY5OWMyNDk4MzQ2OTRiNWM0Nzk5NWY2Zjg0MWE5"></p><h3 id="4指定安装目录"><a href="#4-指定安装目录" class="headerlink" title="4.指定安装目录"></a>4.指定安装目录</h3><p>安装，PREFIX参数指定redis的安装目录，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;redis</span><br></pre></td></tr></table></figure><h3 id="5启动redis"><a href="#5-启动redis" class="headerlink" title="5.启动redis"></a>5.启动redis</h3><p>进入安装后的路径，就是cd /usr/local/software/redis</p><p>　　在bin目录下执行 cd bin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　.&#x2F;redis-server</span><br></pre></td></tr></table></figure><p>这是redis的前台启动，缺点是ssh命令窗口关了之后服务就会停止</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Redis/redis%E5%90%8E%E5%8F%B01.png?versionId=CAEQExiBgIDBlvfz1hciIDdhZjNmN2Y2M2E3YTQwNGZhNjgyMjcxOGYxMTIzY2Yx"></p><h3 id="6设置后台启动"><a href="#6-设置后台启动" class="headerlink" title="6.设置后台启动"></a>6.设置后台启动</h3><p>　　把redis源码包解压目录下的redis.conf复制到安装目录的bin下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;local&#x2F;software&#x2F;redis-5.0.0&#x2F;redis.conf  &#x2F;usr&#x2F;local&#x2F;software&#x2F;redis&#x2F;bin</span><br></pre></td></tr></table></figure><p>修改配置文件（bin下面的redis.conf）：<br>redis默认只能本机访问，要把下面两句改一下才能远程访问</p><p>#bind 127.0.0.1  注释掉<br>  关闭保护模式<br>  protected-mode no<br>  以守护进程后台模式运行<br>  daemonize yes</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Redis/redis.conf%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9.png?versionId=CAEQExiBgIC_lvfz1hciIDc4M2E2NjBlZTA5YzRlNjk4ODYxNTU5ZmZkMjQ3ZGI0"></p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/Redis/1re.png?versionId=CAEQExiCgIC.lvfz1hciIDQyODFlMGYyNjQ5NTQ0Zjk4MGM5ODBlY2QzYjdiMTc0"><br>在bin目录下执行./redis-server redis.conf</p><p>检查是否启动完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps ef | grep redis</span><br></pre></td></tr></table></figure><h3 id="7开放端口号"><a href="#7-开放端口号" class="headerlink" title="7.开放端口号"></a>7.开放端口号</h3><p>有时候可能会出现连接不上的情况，要注意开放端口号</p><p>打开6379端口防火墙方法：</p><p>执行命令打开6379端口防火墙，看到success字样就表明添加成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;6379&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure><p>然后重新启动防火墙，看到success字样就表明重启成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>验证是否生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --query-port&#x3D;6379&#x2F;tcp</span><br></pre></td></tr></table></figure><p>开放完端口号后，连接一下就可以了　</p><p>　　</p><h3 id="8redisconf配置详解"><a href="#8-redis-conf配置详解" class="headerlink" title="8.redis.conf配置详解"></a>8.redis.conf配置详解</h3><p>redis.conf 里面有一些配置，可以根据需要修改，比如说添加认证密码。修改端口号等</p><p>redis.conf配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span><br><span class="line"></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line">2. 当Redis以守护进程方式运行时，Redis默认会把pid写入&#x2F;var&#x2F;run&#x2F;redis.pid文件，可以通过pidfile指定</span><br><span class="line"></span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis.pid</span><br><span class="line"></span><br><span class="line">3. 指定Redis监听端口，默认端口为6379，为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</span><br><span class="line"></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">4. 绑定的主机地址</span><br><span class="line"></span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line">5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span><br><span class="line"></span><br><span class="line">timeout 300</span><br><span class="line"></span><br><span class="line">6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span><br><span class="line"></span><br><span class="line">loglevel verbose</span><br><span class="line"></span><br><span class="line">7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给&#x2F;dev&#x2F;null</span><br><span class="line"></span><br><span class="line">logfile stdout</span><br><span class="line"></span><br><span class="line">8. 设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</span><br><span class="line"></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line">9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span><br><span class="line"></span><br><span class="line">save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"></span><br><span class="line">Redis默认配置文件中提供了三个条件：</span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line"></span><br><span class="line">save 300 10</span><br><span class="line"></span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</span><br><span class="line"></span><br><span class="line">10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span><br><span class="line"></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line">11. 指定本地数据库文件名，默认值为dump.rdb</span><br><span class="line"></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line">12. 指定本地数据库存放目录</span><br><span class="line"></span><br><span class="line">dir .&#x2F;</span><br><span class="line"></span><br><span class="line">13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span><br><span class="line"></span><br><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line">14. 当master服务设置了密码保护时，slav服务连接master的密码</span><br><span class="line"></span><br><span class="line">masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line">15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭</span><br><span class="line"></span><br><span class="line">requirepass foobared</span><br><span class="line"></span><br><span class="line">16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</span><br><span class="line"></span><br><span class="line">maxclients 128</span><br><span class="line"></span><br><span class="line">17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span><br><span class="line"></span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line">18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line">19. 指定更新日志文件名，默认为appendonly.aof</span><br><span class="line"></span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line">20. 指定更新日志条件，共有3个可选值： no：表示等操作系统进行数据缓存同步到磁盘（快） always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） everysec：表示每秒同步一次（折中，默认值）</span><br><span class="line"></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line">21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</span><br><span class="line"></span><br><span class="line">vm-enabled no</span><br><span class="line"></span><br><span class="line">22. 虚拟内存文件路径，默认值为&#x2F;tmp&#x2F;redis.swap，不可多个Redis实例共享</span><br><span class="line"></span><br><span class="line">vm-swap-file &#x2F;tmp&#x2F;redis.swap</span><br><span class="line"></span><br><span class="line">23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</span><br><span class="line"></span><br><span class="line">vm-max-memory 0</span><br><span class="line"></span><br><span class="line">24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</span><br><span class="line"></span><br><span class="line">vm-page-size 32</span><br><span class="line"></span><br><span class="line">25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</span><br><span class="line"></span><br><span class="line">vm-pages 134217728</span><br><span class="line"></span><br><span class="line">26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</span><br><span class="line"></span><br><span class="line">vm-max-threads 4</span><br><span class="line"></span><br><span class="line">27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</span><br><span class="line"></span><br><span class="line">glueoutputbuf yes</span><br><span class="line"></span><br><span class="line">28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span><br><span class="line"></span><br><span class="line">hash-max-zipmap-entries 64</span><br><span class="line"></span><br><span class="line">hash-max-zipmap-value 512</span><br><span class="line"></span><br><span class="line">29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</span><br><span class="line"></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line">30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</span><br><span class="line"></span><br><span class="line">include &#x2F;path&#x2F;to&#x2F;local.conf</span><br><span class="line"></span><br><span class="line">redis.conf配置</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-centos7单节点安装redis&quot;&gt;&lt;a href=&quot;#一、CentOS7单节点安装Redis&quot; class=&quot;headerlink&quot; title=&quot;一、CentOS7单节点安装Redis&quot;&gt;&lt;/a&gt;一、CentOS7单节点安装Redis&lt;/h2&gt;&lt;p&gt;注意</summary>
      
    
    
    
    <category term="Redis" scheme="https://lswisdom.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://lswisdom.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Centos7开启防火墙命令</title>
    <link href="https://lswisdom.github.io/posts/3592562801/"/>
    <id>https://lswisdom.github.io/posts/3592562801/</id>
    <published>2021-07-25T09:13:26.000Z</published>
    <updated>2021-08-15T14:33:50.627Z</updated>
    
    <content type="html"><![CDATA[<p>打开6379端口防火墙方法：</p><p>执行命令打开6379端口防火墙，看到success字样就表明添加成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;6379&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure><p>然后重新启动防火墙，看到success字样就表明重启成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>最后可以输入命令验证6379端口打开是否生效，看到yes及表示生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --query-port&#x3D;6379&#x2F;tcp</span><br></pre></td></tr></table></figure><p>重试一下，就可以连接了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开6379端口防火墙方法：&lt;/p&gt;
&lt;p&gt;执行命令打开6379端口防火墙，看到success字样就表明添加成功&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    <category term="linux" scheme="https://lswisdom.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>centos7安装JDK</title>
    <link href="https://lswisdom.github.io/posts/3393234349/"/>
    <id>https://lswisdom.github.io/posts/3393234349/</id>
    <published>2021-07-25T08:54:55.000Z</published>
    <updated>2021-08-15T14:33:44.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本环境配置"><a href="#基本环境配置" class="headerlink" title="基本环境配置"></a>基本环境配置</h2><h3 id="1centos7安装jdk"><a href="#1-CentOS7安装JDK" class="headerlink" title="1.CentOS7安装JDK"></a>1.CentOS7安装JDK</h3><h4 id="1检查系统中是否存在jdk"><a href="#1-检查系统中是否存在JDK" class="headerlink" title="1.检查系统中是否存在JDK"></a>1.检查系统中是否存在JDK</h4><p>CentOS一般会自带两个jdk，使用命令查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br><span class="line">rpm -e --nodeps 要卸载的包 (包通过上面的指令可以获取到)]</span><br><span class="line">如：</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.99-2.6.5.1.el6.x86_64</span><br><span class="line">rpm -e --nodeps java-1.6.0-openjdk-1.6.0.38-1.13.10.4.el6.x86_64</span><br><span class="line">rpm:用于管理套件</span><br><span class="line">-e:表示删除指定的套件</span><br><span class="line">-q:使用询问模式，当遇到任何问题时，rpm指令会先询问用户。</span><br><span class="line">-a:查询所有套件。</span><br><span class="line">|:把前一个命令原本要bai输出到屏幕的数据du当作是后一个命令的标准输入</span><br></pre></td></tr></table></figure><h4 id="2上传jdk包"><a href="#2-上传JDK包" class="headerlink" title="2.上传JDK包"></a>2.上传JDK包</h4><p>上传JDK包到/usr/local/software目录下面</p><p>执行解压JDK安装文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u151-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="3配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h4><p>vim /etc/profile</p><p>在文件最末尾加上下面几句话</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/software/jdk1.8.0_151</span><br><span class="line">export JRE_HOME=/usr/local/software/jdk1.8.0_151/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/JDK/JDK%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.png?versionId=CAEQExiBgICo1cjz1hciIDhhZTk0OTFjZjllOTQzNjNiYTQ0OGI0YjM1Nzk5NGMy"></p><p>保存退出</p><p>让配置生效：</p><p>source /etc/profile</p><p>检查环境：</p><p>运行java –version能看到版本信息</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/JDK/%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF.png?versionId=CAEQExiBgICT9bzz1hciIDZhZTVmNDYyMTAxYzRmZmNhYzc1MDRiNzhmODRjNGQ0"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本环境配置&quot;&gt;&lt;a href=&quot;#基本环境配置&quot; class=&quot;headerlink&quot; title=&quot;基本环境配置&quot;&gt;&lt;/a&gt;基本环境配置&lt;/h2&gt;&lt;h3 id=&quot;1centos7安装jdk&quot;&gt;&lt;a href=&quot;#1-CentOS7安装JDK&quot; class=&quot;h</summary>
      
    
    
    
    <category term="linux" scheme="https://lswisdom.github.io/categories/linux/"/>
    
    
    <category term="Linux环境安装" scheme="https://lswisdom.github.io/tags/Linux%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>centos7下安装ElasticSearch</title>
    <link href="https://lswisdom.github.io/posts/3121942040/"/>
    <id>https://lswisdom.github.io/posts/3121942040/</id>
    <published>2021-04-18T11:25:45.000Z</published>
    <updated>2021-08-15T13:26:12.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7安装elasticsearch712"><a href="#CentOS7安装ElasticSearch7-12" class="headerlink" title="CentOS7安装ElasticSearch7.12"></a>CentOS7安装ElasticSearch7.12</h1><h2 id="1安装jdk"><a href="#1-安装JDK" class="headerlink" title="1.安装JDK"></a>1.安装JDK</h2><p>安装JDK 并配置环境变量,配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;jdk1.8.0_281</span><br><span class="line">export JRE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;jdk1.8.0_281&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib</span><br><span class="line">export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</span><br></pre></td></tr></table></figure><h2 id="2安装elasticsearch"><a href="#2-安装ElasticSearch" class="headerlink" title="2.安装ElasticSearch"></a>2.安装ElasticSearch</h2><p>注意：我下载的是7版本,需要jdk11的支持，但是开发环境我选择 jdk1.8</p><p>​下载6版本的可以使用jdk1.8 </p><p>ElasticSearch文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html</a><br>ElasticSearch下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf elasticsearch-7.12.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>下载完成后的地址路径如下：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/01%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%E7%9B%AE%E5%BD%95.png?versionId=CAEQExiBgIDd547l1hciIDkwZTNkYWYxMTE0ZjRiZmU4MjAwYzY5ZWY5ZjZmYmE5"></p><h2 id="3启动es并解决es启动报错"><a href="#3-启动ES-并解决ES启动报错" class="headerlink" title="3.启动ES,并解决ES启动报错"></a>3.启动ES,并解决ES启动报错</h2><p>进入bin目录下面执行  ./elasticsearch</p><h3 id="错误一es712-需要使用jdk11的版本"><a href="#错误一：ES7-12-需要使用JDK11的版本" class="headerlink" title="错误一：ES7.12 需要使用JDK11的版本"></a>错误一：ES7.12 需要使用JDK11的版本</h3><p>报错，提示信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">distribution with a bundled JDK, ensure the JAVA_HOME environment variable is not set.</span><br><span class="line">warning: usage of JAVA_HOME is deprecated, use ES_JAVA_HOME</span><br><span class="line">Future versions of Elasticsearch will require Java <span class="number">11</span>; your Java version from [/usr/local/software/jdk1<span class="number">.8</span><span class="number">.0_281</span>/jre] does not meet <span class="keyword">this</span> requirement. Consider switching to a distribution of Elasticsearch with a bundled JDK. If you are already using a distribution with a bundled JDK, ensure the JAVA_HOME environment variable is not set.</span><br><span class="line">[<span class="number">2021</span>-<span class="number">04</span>-18T19:<span class="number">54</span>:<span class="number">57</span>,<span class="number">709</span>][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [MiWiFi-R3-srv] uncaught exception in thread [main]</span><br></pre></td></tr></table></figure><p>这个意思提示我们，使用ES7.12需要jdk11的版本<br>下载安装jdk11,并修改es需要的jdk环境变量<br>修改vim elasticsearch 文件,并在文件最上方添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#配置自己的jdk11</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk-11.0.10&#x2F;</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">#添加jdk判断</span><br><span class="line">if [ -x &quot;$JAVA_HOME&#x2F;bin&#x2F;java&quot; ]; then</span><br><span class="line">        JAVA&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;jdk-11.0.10&#x2F;bin&#x2F;java&quot;</span><br><span class="line">else</span><br><span class="line">        JAVA&#x3D;&#96;which java&#96;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>再次启动ES    ./elasticsearch</p><h3 id="错误二es提示我们不可以使用root用户"><a href="#错误二：Es提示我们不可以使用root用户" class="headerlink" title="错误二：Es提示我们不可以使用root用户"></a>错误二：Es提示我们不可以使用root用户</h3><p> 提示信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:101)</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:168)</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:397)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:159)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:150)</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:75)</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:116)</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:79)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:115)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:81)</span><br><span class="line">For complete error details, refer to the log at &#x2F;usr&#x2F;local&#x2F;software&#x2F;elasticsearch-7.12.0&#x2F;logs&#x2F;elasticsearch.log</span><br></pre></td></tr></table></figure><p>解决办法：创建新用户，并用新用户进行启动<br>创建用户组：groupadd esgroup<br>创建es用户：useradd esuser -g esgroup -p 123456<br>然后使用chown命令来让这个文件夹属于这个用户<br>chown -R esuser:esgroup elasticsearch-7.12.0<br>切换用户，使用新用户esuser进行服务启动</p><p>再次启动,启动成功后，使用curl 127.0.0.1:9200 进行访问，如果返回一段json。说明启动成功了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@MiWiFi-R3-srv bin]# curl 127.0.0.1:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;MiWiFi-R3-srv&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;htoKhKvMRfCpzscUQLWWAQ&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.12.0&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;tar&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;78722783c38caa25a70982b5b042074cde5d3b3a&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2021-03-18T06:17:15.410153305Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.8.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是ES默认支持localhost启动，修改配置文件config下面的vim elasticsearch.yml 如下图所示<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/03elasticsearch.yml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png?versionId=CAEQExiBgMCf9fzt1hciIGZhZDAzMWZmOTQ2NTQ0MTQ4NWFjMTIwZDNlN2M3ODZm"><br>启动完成后，重新启动，又出现了新的警告信息</p><h3 id="错误三option-useconcmarksweepgc-was-deprecated-in-version-90-and-will-likely-be-removed-in-a-future-release"><a href="#错误三：Option-UseConcMarkSweepGC-was-deprecated-in-version-9-0-and-will-likely-be-removed-in-a-future-release" class="headerlink" title="错误三：Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release"></a>错误三：Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release</h3><p>这个是警告信息，垃圾回收器的问题，可以不修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</span><br></pre></td></tr></table></figure><h3 id="错误四提示在启动elasticsearch之前您必须解决以下行中描述的要点"><a href="#错误四：提示：在启动Elasticsearch之前，您必须解决以下行中描述的要点" class="headerlink" title="错误四：提示：在启动Elasticsearch之前，您必须解决以下行中描述的要点"></a>错误四：提示：在启动Elasticsearch之前，您必须解决以下行中描述的要点</h3><p>提示信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [3] bootstrap checks failed. You must address the points described in the following [3] lines before starting Elasticsearch.</span><br><span class="line">bootstrap check failure [1] of [3]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class="line">bootstrap check failure [2] of [3]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">bootstrap check failure [3] of [3]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</span><br><span class="line">ERROR: Elasticsearch did not exit normally - check the logs at &#x2F;usr&#x2F;local&#x2F;software&#x2F;elasticsearch-7.12.0&#x2F;logs&#x2F;elasticsearch.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4第一个错误意思大概是elasticsearch进程的文件描述符4096过低增加到至少65535"><a href="#4-第一个错误，意思大概是：elasticsearch进程的文件描述符-4096-过低，增加到至少-65535" class="headerlink" title="4.第一个错误，意思大概是：elasticsearch进程的文件描述符[4096]过低，增加到至少[65535]"></a>4.第一个错误，意思大概是：elasticsearch进程的文件描述符[4096]过低，增加到至少[65535]</h3><p>解决方案：<br> 修改 vim /etc/security/limits.conf<br> 在文件最下方加入如下配置：<br>注意：第一列是你刚才创建的用户名称,我刚才创建的用户是esuser</p><p>esuser soft nofile 65536<br>esuser hard nofile 65536<br>esuser soft nproc 4096<br>esuser hard nproc 4096</p><h3 id="5第二个错误意思大概是虚拟机最大的虚拟内存区域-max_map_count65530太低增加到至少262144"><a href="#5-第二个错误，意思大概是：虚拟机最大的虚拟内存区域。max-map-count-65530-太低，增加到至少-262144" class="headerlink" title="5.第二个错误，意思大概是：虚拟机最大的虚拟内存区域。max_map_count[65530]太低，增加到至少[262144]"></a>5.第二个错误，意思大概是：虚拟机最大的虚拟内存区域。max_map_count[65530]太低，增加到至少[262144]</h3><p>解决办法：进入/etc 修改sysctl.conf文档，里面都是注释，添加如下面一行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count&#x3D;655360 推荐信息提示至少262144</span><br></pre></td></tr></table></figure><p>保存信息wq<br>注意：配置如果想要生效，需要执行如下配置：<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/04%E9%85%8D%E7%BD%AE%E7%94%9F%E6%95%88.png?versionId=CAEQExiBgIC6j4Tu1hciIGRhNGI1MmNiY2Q3ZTQ3NzA5YjM2MDljMTlhNzU0N2Nk"></p><h3 id="6第三个错误"><a href="#6-第三个错误：" class="headerlink" title="6.第三个错误："></a>6.第三个错误：</h3><p>解决办法：在elasticsearch的config目录下，修改elasticsearch.yml配置文件，将下面的配置加入到该配置文件中：<br>注意：这里的node-1为node-name配置的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;] </span><br></pre></td></tr></table></figure><p>注意默认情况下：node-name的值是注释掉的。这里要放开</p><h3 id="7-重新启动es-看看效果启动完成后还是提示这个错误"><a href="#7-重新启动ES-看看效果-启动完成后-还是提示这个错误" class="headerlink" title="7. 重新启动ES 看看效果,启动完成后,还是提示这个错误"></a>7. 重新启动ES 看看效果,启动完成后,还是提示这个错误</h3><p> check failure [1] of [1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]<br>这种情况,可能是配置没有生效,重启虚拟机再看看效果<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/05elastic-search%E5%90%AF%E5%8A%A8%E6%95%88%E6%9E%9C.png?versionId=CAEQExiCgIC9j4Tu1hciIDEwYTAyMjA1MWI1YzQwOTk5ODIxOGU5YzJmZTg3ZWEw"><br>重新启动完成后，再次启动提示start，表示已经正常启动了</p><h3 id="8windows电脑无法直接访问"><a href="#8-windows电脑无法直接访问" class="headerlink" title="8.windows电脑无法直接访问"></a>8.windows电脑无法直接访问</h3><p>开放9200端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;9200&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>使用windows客户端访问，能看到正常返回json了<br><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/ElasticSearch7.12/06%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%E6%95%88%E6%9E%9C.png?versionId=CAEQExiBgIC9j4Tu1hciIGIzNmRjMGY2NDNjYTQ4Zjc4NTRmMDA5YWU4MmUyNzE3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;centos7安装elasticsearch712&quot;&gt;&lt;a href=&quot;#CentOS7安装ElasticSearch7-12&quot; class=&quot;headerlink&quot; title=&quot;CentOS7安装ElasticSearch7.12&quot;&gt;&lt;/a&gt;CentOS7安装</summary>
      
    
    
    
    <category term="linux" scheme="https://lswisdom.github.io/categories/linux/"/>
    
    
    <category term="Linux环境安装" scheme="https://lswisdom.github.io/tags/Linux%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>使用CAS实现单点登录一</title>
    <link href="https://lswisdom.github.io/posts/3633779439/"/>
    <id>https://lswisdom.github.io/posts/3633779439/</id>
    <published>2021-04-14T23:32:10.000Z</published>
    <updated>2021-08-15T14:33:44.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-cas服务器的搭建"><a href="#一、CAS服务器的搭建" class="headerlink" title="一、CAS服务器的搭建"></a>一、CAS服务器的搭建</h1><p>地址：github地址：<a href="https://github.com/apereo/cas-overlay-template">https://github.com/apereo/cas-overlay-template</a></p><h2 id="11-服务部署和测试"><a href="#1-1-服务部署和测试" class="headerlink" title="1.1 服务部署和测试"></a>1.1 服务部署和测试</h2><p>clone下来依赖包,下载后的依赖包,需要手动创建src/main/resources 目录,并在该目录下面创建application.properties文件和log4j2.xml文件<br>log4j2.xml文件,主要是为了设置CAS的日志输出目录<br>application.properties目录：一些数据库配置、证书配置等<br>配置完成后,打包部署在tomcat的webapp目录下面</p><p>等待CAS服务启动之后,通过<a href="http://localhost:8080/cas/login">http://localhost:8080/cas/login</a><br>可以使用默认的账号：casuser   Mellon登录</p><h1 id="二-配置applicationpropertis-文件通过数据库验证"><a href="#二、配置application-propertis-文件-通过数据库验证" class="headerlink" title="二、配置application.propertis 文件,通过数据库验证"></a>二、配置application.propertis 文件,通过数据库验证</h1><h2 id="21-pomxml中添加依赖文件"><a href="#2-1-pom-xml中添加依赖文件" class="headerlink" title="2.1 pom.xml中添加依赖文件"></a>2.1 pom.xml中添加依赖文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.postgresql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;postgresql&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;42.2.18.jre7&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apereo.cas&#x2F;cas-server-support-jdbc --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apereo.cas&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cas-server-support-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;cas.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>注释掉默认的用户配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#cas.authn.accept.users&#x3D;casuser::Mellon</span><br></pre></td></tr></table></figure><h2 id="22-添加jdbc认证"><a href="#2-2-添加jdbc认证" class="headerlink" title="2.2 添加jdbc认证"></a>2.2 添加jdbc认证</h2><h3 id="221-这是使用数据库连接的配置"><a href="#2-2-1-这是使用数据库连接的配置" class="headerlink" title="2.2.1 这是使用数据库连接的配置"></a>2.2.1 这是使用数据库连接的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cas.authn.jdbc.query[0].driverClass&#x3D;org.postgresql.Driver</span><br><span class="line">cas.authn.jdbc.query[0].url&#x3D;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres</span><br><span class="line">cas.authn.jdbc.query[0].user&#x3D;postgres</span><br><span class="line">cas.authn.jdbc.query[0].password&#x3D;password</span><br><span class="line"></span><br><span class="line">cas.authn.jdbc.query[0].sql&#x3D;select * from sys_user where username&#x3D;?</span><br><span class="line"># 字段的列明</span><br><span class="line">cas.authn.jdbc.query[0].fieldPassword&#x3D;password</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure><h3 id="222-md5加密配置"><a href="#2-2-2-MD5加密配置" class="headerlink" title="2.2.2 MD5加密配置"></a>2.2.2 MD5加密配置</h3><p>如果密码进行加盐配置,需要增加如下配置,这样数据库中存储的事MD5加密的密码,CAS页面输入的密码还是原始的密码就可以登录 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm&#x3D;MD5</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.type&#x3D;DEFAULT</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure><h3 id="223-密码加盐加密"><a href="#2-2-3-密码加盐加密" class="headerlink" title="2.2.3 密码加盐加密"></a>2.2.3 密码加盐加密</h3><p>简单的MD5值太简单,需要加盐值的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 加盐配置</span><br><span class="line">#配置数据库连接</span><br><span class="line">cas.authn.jdbc.encode[0].driverClass&#x3D;org.postgresql.Driver</span><br><span class="line">cas.authn.jdbc.encode[0].url&#x3D;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres</span><br><span class="line">cas.authn.jdbc.encode[0].user&#x3D;postgres</span><br><span class="line">cas.authn.jdbc.encode[0].password&#x3D;password</span><br><span class="line">#加密迭代次数</span><br><span class="line">cas.authn.jdbc.encode[0].numberOfIterations&#x3D;1024</span><br><span class="line"># 数据库存放的动态盐值的字段列明</span><br><span class="line">cas.authn.jdbc.encode[0].saltFieldName&#x3D;PasswordSalt</span><br><span class="line">cas.authn.jdbc.encode[0].sql&#x3D;select * from sys_user where username&#x3D;?</span><br><span class="line">cas.authn.jdbc.encode[0].algorithmName&#x3D;MD5</span><br><span class="line"># 哪个字段作为密码字段</span><br><span class="line">cas.authn.jdbc.encode[0].passwordFieldName&#x3D;password</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application.properties文件的模板如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line"># CAS Server Context Configuration</span><br><span class="line">#</span><br><span class="line">server.context-path&#x3D;&#x2F;cas</span><br><span class="line">server.port&#x3D;8443</span><br><span class="line"></span><br><span class="line"># CAS 的访问需要https证书,在这里配置</span><br><span class="line">server.ssl.key-store&#x3D;E:&#x2F;download&#x2F;tomcat.keystore</span><br><span class="line">server.ssl.key-store-password&#x3D;123456</span><br><span class="line">server.ssl.key-password&#x3D;123456</span><br><span class="line"></span><br><span class="line">server.max-http-header-size&#x3D;2097152</span><br><span class="line">server.use-forward-headers&#x3D;true</span><br><span class="line">server.connection-timeout&#x3D;20000</span><br><span class="line">server.error.include-stacktrace&#x3D;ALWAYS</span><br><span class="line"></span><br><span class="line">server.compression.enabled&#x3D;true</span><br><span class="line">server.compression.mime-types&#x3D;application&#x2F;javascript,application&#x2F;json,application&#x2F;xml,text&#x2F;html,text&#x2F;xml,text&#x2F;plain</span><br><span class="line"></span><br><span class="line">server.tomcat.max-http-post-size&#x3D;2097152</span><br><span class="line">server.tomcat.basedir&#x3D;build&#x2F;tomcat</span><br><span class="line">server.tomcat.accesslog.enabled&#x3D;true</span><br><span class="line">server.tomcat.accesslog.pattern&#x3D;%t %a &quot;%r&quot; %s (%D ms)</span><br><span class="line">server.tomcat.accesslog.suffix&#x3D;.log</span><br><span class="line">server.tomcat.min-spare-threads&#x3D;10</span><br><span class="line">server.tomcat.max-threads&#x3D;200</span><br><span class="line">server.tomcat.port-header&#x3D;X-Forwarded-Port</span><br><span class="line">server.tomcat.protocol-header&#x3D;X-Forwarded-Proto</span><br><span class="line">server.tomcat.protocol-header-https-value&#x3D;https</span><br><span class="line">server.tomcat.remote-ip-header&#x3D;X-FORWARDED-FOR</span><br><span class="line">server.tomcat.uri-encoding&#x3D;UTF-8</span><br><span class="line"></span><br><span class="line">spring.http.encoding.charset&#x3D;UTF-8</span><br><span class="line">spring.http.encoding.enabled&#x3D;true</span><br><span class="line">spring.http.encoding.force&#x3D;true</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># CAS Cloud Bus Configuration</span><br><span class="line">#</span><br><span class="line">spring.cloud.bus.enabled&#x3D;false</span><br><span class="line"></span><br><span class="line"># Indicates that systemPropertiesOverride can be used.</span><br><span class="line"># Set to false to prevent users from changing the default accidentally. Default true.</span><br><span class="line">spring.cloud.config.allow-override&#x3D;true</span><br><span class="line"></span><br><span class="line"># External properties should override system properties.</span><br><span class="line">spring.cloud.config.override-system-properties&#x3D;false</span><br><span class="line"></span><br><span class="line"># When allowOverride is true, external properties should take lowest priority, and not override any</span><br><span class="line"># existing property sources (including local config files).</span><br><span class="line">spring.cloud.config.override-none&#x3D;false</span><br><span class="line"></span><br><span class="line"># spring.cloud.bus.refresh.enabled&#x3D;true</span><br><span class="line"># spring.cloud.bus.env.enabled&#x3D;true</span><br><span class="line"># spring.cloud.bus.destination&#x3D;CasCloudBus</span><br><span class="line"># spring.cloud.bus.ack.enabled&#x3D;true</span><br><span class="line"></span><br><span class="line">endpoints.enabled&#x3D;false</span><br><span class="line">endpoints.sensitive&#x3D;true</span><br><span class="line"></span><br><span class="line">endpoints.restart.enabled&#x3D;false</span><br><span class="line">endpoints.shutdown.enabled&#x3D;false</span><br><span class="line"></span><br><span class="line"># Control the security of the management&#x2F;actuator endpoints</span><br><span class="line"># The &#39;enabled&#39; flag below here controls the rendering of details for the health endpoint amongst other things.</span><br><span class="line">management.security.enabled&#x3D;true</span><br><span class="line">management.security.roles&#x3D;ACTUATOR,ADMIN</span><br><span class="line">management.security.sessions&#x3D;if_required</span><br><span class="line">management.context-path&#x3D;&#x2F;status</span><br><span class="line">management.add-application-context-header&#x3D;false</span><br><span class="line"></span><br><span class="line"># Define a CAS-specific &quot;WARN&quot; status code and its order</span><br><span class="line">management.health.status.order&#x3D;WARN, DOWN, OUT_OF_SERVICE, UNKNOWN, UP</span><br><span class="line"></span><br><span class="line"># Control the security of the management&#x2F;actuator endpoints</span><br><span class="line"># With basic authentication, assuming Spring Security and&#x2F;or relevant modules are on the classpath.</span><br><span class="line">security.basic.authorize-mode&#x3D;role</span><br><span class="line">security.basic.path&#x3D;&#x2F;cas&#x2F;status&#x2F;**</span><br><span class="line"># security.basic.enabled&#x3D;true</span><br><span class="line"># security.user.name&#x3D;casuser</span><br><span class="line"># security.user.password&#x3D;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># CAS Web Application Session Configuration</span><br><span class="line">#</span><br><span class="line">server.session.timeout&#x3D;300</span><br><span class="line">server.session.cookie.http-only&#x3D;true</span><br><span class="line">server.session.tracking-modes&#x3D;COOKIE</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># CAS Thymeleaf View Configuration</span><br><span class="line">#</span><br><span class="line">spring.thymeleaf.encoding&#x3D;UTF-8</span><br><span class="line">spring.thymeleaf.cache&#x3D;true</span><br><span class="line">spring.thymeleaf.mode&#x3D;HTML</span><br><span class="line">spring.thymeleaf.template-resolver-order&#x3D;100</span><br><span class="line">##</span><br><span class="line"># CAS Log4j Configuration</span><br><span class="line">#</span><br><span class="line"># logging.config&#x3D;file:&#x2F;etc&#x2F;cas&#x2F;log4j2.xml</span><br><span class="line">server.context-parameters.isLog4jAutoInitializationDisabled&#x3D;true</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># CAS AspectJ Configuration</span><br><span class="line">#</span><br><span class="line">spring.aop.auto&#x3D;true</span><br><span class="line">spring.aop.proxy-target-class&#x3D;true</span><br><span class="line"></span><br><span class="line">## 添加认证服务</span><br><span class="line">cas.tgc.secure&#x3D;false</span><br><span class="line">cas.serviceRegistry.initFromJson&#x3D;true</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># CAS Authentication Credentials</span><br><span class="line">#</span><br><span class="line"># 默认的登录正好和密码</span><br><span class="line">#cas.authn.accept.users&#x3D;casuser::Mellon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加盐配置</span><br><span class="line">#配置数据库连接</span><br><span class="line">#cas.authn.jdbc.encode[0].driverClass&#x3D;org.postgresql.Driver</span><br><span class="line">#cas.authn.jdbc.encode[0].url&#x3D;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres</span><br><span class="line">#cas.authn.jdbc.encode[0].user&#x3D;postgres</span><br><span class="line">#cas.authn.jdbc.encode[0].password&#x3D;password</span><br><span class="line">#加密迭代次数</span><br><span class="line">#cas.authn.jdbc.encode[0].numberOfIterations&#x3D;1024</span><br><span class="line"># 数据库存放的动态盐值的字段列明</span><br><span class="line">#cas.authn.jdbc.encode[0].saltFieldName&#x3D;PasswordSalt</span><br><span class="line">#cas.authn.jdbc.encode[0].sql&#x3D;select * from sys_user where username&#x3D;?</span><br><span class="line">#cas.authn.jdbc.encode[0].algorithmName&#x3D;MD5</span><br><span class="line"># 哪个字段作为密码字段</span><br><span class="line">#cas.authn.jdbc.encode[0].passwordFieldName&#x3D;password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cas.authn.jdbc.query[0].driverClass&#x3D;org.postgresql.Driver</span><br><span class="line">cas.authn.jdbc.query[0].url&#x3D;jdbc:postgresql:&#x2F;&#x2F;127.0.0.1:5432&#x2F;postgres</span><br><span class="line">cas.authn.jdbc.query[0].user&#x3D;postgres</span><br><span class="line">cas.authn.jdbc.query[0].password&#x3D;password</span><br><span class="line"></span><br><span class="line">#cas.authn.jdbc.query[0].numberOfIterations&#x3D;1024</span><br><span class="line">#cas.authn.jdbc.query[0].saltFieldName&#x3D;PasswordSalt</span><br><span class="line">cas.authn.jdbc.query[0].sql&#x3D;select * from sys_user where username&#x3D;?</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm&#x3D;MD5</span><br><span class="line">cas.authn.jdbc.query[0].fieldPassword&#x3D;password</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.type&#x3D;DEFAULT</span><br><span class="line">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding&#x3D;UTF-8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>log4j2.xml文件的模板如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!-- Specify the refresh internal in seconds. --&gt;</span><br><span class="line">&lt;Configuration monitorInterval&#x3D;&quot;5&quot; packages&#x3D;&quot;org.apereo.cas.logging&quot;&gt;</span><br><span class="line">    &lt;Properties&gt;</span><br><span class="line">        &lt;Property name&#x3D;&quot;baseDir&quot;&gt;D:\device-logs&lt;&#x2F;Property&gt;</span><br><span class="line">    &lt;&#x2F;Properties&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name&#x3D;&quot;console&quot; target&#x3D;&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%d %p [%c] - &lt;%m&gt;%n&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Console&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RollingFile name&#x3D;&quot;file&quot; fileName&#x3D;&quot;$&#123;baseDir&#125;&#x2F;cas.log&quot; append&#x3D;&quot;true&quot;</span><br><span class="line">                     filePattern&#x3D;&quot;$&#123;baseDir&#125;&#x2F;cas-%d&#123;yyyy-MM-dd-HH&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%highlight&#123;%d %p [%c] - &lt;%m&gt;&#125;%n&quot;&#x2F;&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;OnStartupTriggeringPolicy &#x2F;&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;10 MB&quot;&#x2F;&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max&#x3D;&quot;5&quot; compressionLevel&#x3D;&quot;9&quot;&gt;</span><br><span class="line">                &lt;Delete basePath&#x3D;&quot;$&#123;baseDir&#125;&quot; maxDepth&#x3D;&quot;2&quot;&gt;</span><br><span class="line">                    &lt;IfFileName glob&#x3D;&quot;*&#x2F;*.log.gz&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;IfLastModified age&#x3D;&quot;7d&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;Delete&gt;</span><br><span class="line">            &lt;&#x2F;DefaultRolloverStrategy&gt;</span><br><span class="line">        &lt;&#x2F;RollingFile&gt;</span><br><span class="line">        &lt;RollingFile name&#x3D;&quot;auditlogfile&quot; fileName&#x3D;&quot;$&#123;baseDir&#125;&#x2F;cas_audit.log&quot; append&#x3D;&quot;true&quot;</span><br><span class="line">                     filePattern&#x3D;&quot;$&#123;baseDir&#125;&#x2F;cas_audit-%d&#123;yyyy-MM-dd-HH&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%d %p [%c] - %m%n&quot;&#x2F;&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;OnStartupTriggeringPolicy &#x2F;&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;10 MB&quot;&#x2F;&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max&#x3D;&quot;5&quot; compressionLevel&#x3D;&quot;9&quot;&gt;</span><br><span class="line">                &lt;Delete basePath&#x3D;&quot;$&#123;baseDir&#125;&quot; maxDepth&#x3D;&quot;2&quot;&gt;</span><br><span class="line">                    &lt;IfFileName glob&#x3D;&quot;*&#x2F;*.log.gz&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;IfLastModified age&#x3D;&quot;7d&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;Delete&gt;</span><br><span class="line">            &lt;&#x2F;DefaultRolloverStrategy&gt;</span><br><span class="line">        &lt;&#x2F;RollingFile&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RollingFile name&#x3D;&quot;perfFileAppender&quot; fileName&#x3D;&quot;$&#123;baseDir&#125;&#x2F;perfStats.log&quot; append&#x3D;&quot;true&quot;</span><br><span class="line">                     filePattern&#x3D;&quot;$&#123;baseDir&#125;&#x2F;perfStats-%d&#123;yyyy-MM-dd-HH&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern&#x3D;&quot;%m%n&quot;&#x2F;&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;OnStartupTriggeringPolicy &#x2F;&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;10 MB&quot;&#x2F;&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max&#x3D;&quot;5&quot; compressionLevel&#x3D;&quot;9&quot;&gt;</span><br><span class="line">                &lt;Delete basePath&#x3D;&quot;$&#123;baseDir&#125;&quot; maxDepth&#x3D;&quot;2&quot;&gt;</span><br><span class="line">                    &lt;IfFileName glob&#x3D;&quot;*&#x2F;*.log.gz&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;IfLastModified age&#x3D;&quot;7d&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;Delete&gt;</span><br><span class="line">            &lt;&#x2F;DefaultRolloverStrategy&gt;</span><br><span class="line">        &lt;&#x2F;RollingFile&gt;</span><br><span class="line"></span><br><span class="line">        &lt;CasAppender name&#x3D;&quot;casAudit&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;auditlogfile&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;CasAppender&gt;</span><br><span class="line">        &lt;CasAppender name&#x3D;&quot;casFile&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;CasAppender&gt;</span><br><span class="line">        &lt;CasAppender name&#x3D;&quot;casConsole&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;console&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;CasAppender&gt;</span><br><span class="line">        &lt;CasAppender name&#x3D;&quot;casPerf&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;perfFileAppender&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;CasAppender&gt;</span><br><span class="line">    &lt;&#x2F;Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;com.couchbase&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apereo.cas.web.CasWebApplication&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.security&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.boot.autoconfigure.security&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.jasig.cas.client&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apereo&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apereo.services.persondir&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apache&quot; level&#x3D;&quot;error&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.cloud&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.cloud.context&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.boot&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.aop&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.boot.actuate.autoconfigure&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.webflow&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.session&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.amqp&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.integration&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.messaging&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.web&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.orm.jpa&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.scheduling&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.thymeleaf&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.pac4j&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.opensaml&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;net.sf.ehcache&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;com.ryantenney.metrics&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;console&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;file&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;net.jradius&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.openid4java&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.ldaptive&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;com.hazelcast&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.context.annotation&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.boot.devtools&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.jasig.spring&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.springframework.web.socket&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apache.cxf&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apache.http&quot; level&#x3D;&quot;off&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;perfStatsLogger&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;false&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casPerf&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apereo.cas.web.flow&quot; level&#x3D;&quot;info&quot; additivity&#x3D;&quot;true&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncLogger name&#x3D;&quot;org.apereo.inspektr.audit.support&quot; level&#x3D;&quot;info&quot; includeLocation&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casAudit&quot;&#x2F;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casFile&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncLogger&gt;</span><br><span class="line">        &lt;AsyncRoot level&#x3D;&quot;error&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref&#x3D;&quot;casConsole&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;AsyncRoot&gt;</span><br><span class="line">    &lt;&#x2F;Loggers&gt;</span><br><span class="line">&lt;&#x2F;Configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-cas服务器的搭建&quot;&gt;&lt;a href=&quot;#一、CAS服务器的搭建&quot; class=&quot;headerlink&quot; title=&quot;一、CAS服务器的搭建&quot;&gt;&lt;/a&gt;一、CAS服务器的搭建&lt;/h1&gt;&lt;p&gt;地址：github地址：&lt;a href=&quot;https://githu</summary>
      
    
    
    
    <category term="linux" scheme="https://lswisdom.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7安装MYSLQ5.7</title>
    <link href="https://lswisdom.github.io/posts/1192933728/"/>
    <id>https://lswisdom.github.io/posts/1192933728/</id>
    <published>2021-04-05T09:54:08.000Z</published>
    <updated>2021-07-25T09:09:47.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="centos73安装mysql"><a href="#CentOS7-3安装mysql" class="headerlink" title="CentOS7.3安装mysql"></a>CentOS7.3安装mysql</h2><p><strong>第一步：下载和安装mysql源</strong></p><p>1.先下载 mysql源安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure><p>2.安装mysql源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y localinstall mysql57-community-release-el7-11.noarch.rpm </span><br></pre></td></tr></table></figure><p><strong>第二步：在线安装Mysql</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p>下载的东西比较多,要稍微等会</p><p><strong>第三步：启动Mysql服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><p><strong>第四步：设置开机启动</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p><strong>第五步：修改root本地登录密码</strong></p><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个临时的默认密码。</p><p>[root@localhost ~]# vi /var/log/mysqld.log</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/mysql/%E5%AE%89%E8%A3%85/mysql5.7%E7%9A%84%E5%AF%86%E7%A0%81.png?versionId=CAEQExiBgICcvufk1hciIDJhYWI3YjU5OWQ0NzQ0OTM4ZDBkNDZmZDlmMTgxYjg4" alt="mysql的密码"></p><p>这里的临时密码 eMV.R#mWe3ha</p><p>[root@localhost ~]#  mysql -u root -p</p><p>Enter password: </p><p>输入临时密码 进入mysql命令行；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;ZhipengWang2012@&#39;;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>修改密码为 ZhipengWang2012@    (备注 mysql5.7默认密码策略要求密码必须是大小写字母数字特殊字母的组合，至少8位) </p><p><strong>第七步：设置允许远程登录</strong></p><p>Mysql默认不允许远程登录，我们需要设置下，并且防火墙开放3306端口；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;@LiShuai123&#39; WITH GRANT OPTION;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; exit;</span><br><span class="line"></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>退出下；</p><p>centos7开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# firewall-cmd --zone&#x3D;public --add-port&#x3D;3306&#x2F;tcp --permanent</span><br><span class="line"></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# </span><br><span class="line"></span><br><span class="line">开放3306端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>第八步：配置默认编码为utf8</strong></p><p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</p><p>[mysqld]</p><p>character_set_server=utf8</p><p>init_connect=’SET NAMES utf8’</p><p>[root@localhost ~]# vi /etc/my.cnf</p><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/mysql/%E5%AE%89%E8%A3%85/Mysql5.7%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81.png?versionId=CAEQExiBgICQvufk1hciIDE5NDcyNzYxMWY5YzQ5N2RhNmNhMjIwM2E3ZTVhNWU0" alt="修改编码">  </p><p>编辑保存完 重启mysql服务；</p><p>[root@localhost ~]# systemctl restart mysqld</p><p>[root@localhost ~]# </p><p>查看下编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%character%&#39;;</span><br><span class="line"></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line"></span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line"></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line"></span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line"></span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line"></span><br><span class="line">| character_sets_dir       | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |</span><br><span class="line"></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line"></span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注:都安装成功了之后，那个tar.gz的压缩包就可以删掉了，节省磁盘空间</p><p>linux下的mysql默认是大小写敏感的，通过java操作数据库的时候会出现找不到表的情况，需要设置大小写不敏感</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqld]后添加添加lower_case_table_names&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="https://ls-picture-oss.oss-cn-hangzhou.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F/mysql/%E5%AE%89%E8%A3%85/mysql5.7%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E8%AE%BE%E7%BD%AE.png?versionId=CAEQExiBgID.vefk1hciIGRhYjAzNTFkMzE2ZDQ4ZDQ4MGNmNzQ0ZjA4OGQyMjhm" alt="设置大小写不敏感">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">虚拟机中mysql的地址如下：</span><br><span class="line">10.9.32.171</span><br><span class="line">账号root</span><br><span class="line">密码：root</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CentOs6.8安装mysql</p><p><a href="https://www.cnblogs.com/saneri/p/6617415.html">https://www.cnblogs.com/saneri/p/6617415.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;centos73安装mysql&quot;&gt;&lt;a href=&quot;#CentOS7-3安装mysql&quot; class=&quot;headerlink&quot; title=&quot;CentOS7.3安装mysql&quot;&gt;&lt;/a&gt;CentOS7.3安装mysql&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;第一步：下载和</summary>
      
    
    
    
    <category term="linux" scheme="https://lswisdom.github.io/categories/linux/"/>
    
    
    <category term="环境安装" scheme="https://lswisdom.github.io/tags/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
